// Tegra ROM IDC by G33KAtWork & q3k, 2018/04/23
// rom.bin 1c629af8a34adf21771630822a77ff78f57d0ba3e4953d96f0f68e5ab2b38dec
// Notes:
//  - you will need to have uncompressed IRAM
//  - this does not take into account IPATCH data
//  - some of the structs have _inner members just so that reading hexrays
//    output is less painful
//  - parts of it are certainly wrong
//  - please, for the love of everything that is holy, don't hoard 0days and
//    also boast about it on twitter - you'll only make bad actors throw
//    more resources at the problem to find the bug before you release it
//

#define UNLOADED_FILE   1
#include <idc.idc>

static main(void)
{
  // set 'loading idc file' mode
  set_inf_attr(INF_GENFLAGS, INFFL_LOADIDC|get_inf_attr(INF_GENFLAGS));
  GenInfo();            // various settings
  Segments();           // segmentation
  Enums();              // enumerations
  Structures();         // structure types
  ApplyStrucTInfos();   // structure type infos
  Patches();            // manual patches
  SegRegs();            // segment register values
  Bytes();              // individual bytes (code,data)
  Functions();          // function definitions
  // clear 'loading idc file' mode
  set_inf_attr(INF_GENFLAGS, ~INFFL_LOADIDC&get_inf_attr(INF_GENFLAGS));
}

//------------------------------------------------------------------------
// General information

static GenInfo(void) {

        delete_all_segments();    // purge database
	set_processor_type("ARM", SETPROC_USER);
	set_inf_attr(INF_COMPILER, 1);
	set_inf_attr(INF_STRLIT_BREAK, 0xA);
	set_flag(INF_CMTFLAG, SW_ALLCMT, 0);
	set_flag(INF_OUTFLAGS, OFLG_SHOW_VOID, 0);
	set_inf_attr(INF_XREFNUM, 2);
	set_flag(INF_OUTFLAGS, OFLG_SHOW_AUTO, 1);
	set_inf_attr(INF_INDENT, 16);
	set_inf_attr(INF_COMMENT, 40);
	set_inf_attr(INF_MAXREF, 0x10);
}

//------------------------------------------------------------------------
// Information about segmentation

static Segments(void) {
	set_selector(0X1,0);
	set_selector(0X2,0);
	set_selector(0X3,0);
	set_selector(0X4,0);
	set_selector(0X5,0);
	set_selector(0X6,0);
	set_selector(0X7,0);
	;
	add_segm_ex(0X100000,0X118000,0,1,1,5,ADDSEG_NOSREG);
	SegRename(0X100000,"ROM");
	SegClass (0X100000,"CODE");
	SegDefReg(0x100000,"T",0x0);
	SegDefReg(0x100000,"DS",0x0);
	set_segm_type(0X100000,2);
	add_segm_ex(0X40000000,0X40010000,0X1,1,1,2,ADDSEG_NOSREG);
	SegRename(0X40000000,"IRAMA");
	SegClass (0X40000000,"IRAMA");
	SegDefReg(0x40000000,"T",0x0);
	SegDefReg(0x40000000,"DS",0x1);
	add_segm_ex(0X40010000,0X40020000,0X1,1,1,2,ADDSEG_NOSREG);
	SegRename(0X40010000,"IRAMB");
	SegClass (0X40010000,"IRAMB");
	SegDefReg(0x40010000,"T",0x0);
	SegDefReg(0x40010000,"DS",0x1);
	add_segm_ex(0X40020000,0X40030000,0X1,1,1,2,ADDSEG_NOSREG);
	SegRename(0X40020000,"IRAMC");
	SegClass (0X40020000,"IRAMC");
	SegDefReg(0x40020000,"T",0x0);
	SegDefReg(0x40020000,"DS",0x1);
	add_segm_ex(0X40030000,0X40040000,0X1,1,1,2,ADDSEG_NOSREG);
	SegRename(0X40030000,"IRAMD");
	SegClass (0X40030000,"IRAMD");
	SegDefReg(0x40030000,"T",0x0);
	SegDefReg(0x40030000,"DS",0x1);
	add_segm_ex(0X60005000,0X60005400,0X1,1,1,2,ADDSEG_NOSREG);
	SegRename(0X60005000,"TMR");
	SegClass (0X60005000,"TMR");
	SegDefReg(0x60005000,"T",0x0);
	SegDefReg(0x60005000,"DS",0x1);
	add_segm_ex(0X60006000,0X60007000,0X1,1,1,2,ADDSEG_NOSREG);
	SegRename(0X60006000,"CLK_RST");
	SegClass (0X60006000,"CLK_RST");
	SegDefReg(0x60006000,"T",0x0);
	SegDefReg(0x60006000,"DS",0x1);
	add_segm_ex(0X60007000,0X60008000,0X1,1,1,2,ADDSEG_NOSREG);
	SegRename(0X60007000,"FLOW_CTRL");
	SegClass (0X60007000,"FLOW_CTRL");
	SegDefReg(0x60007000,"T",0x0);
	SegDefReg(0x60007000,"DS",0x1);
	add_segm_ex(0X6000C000,0X6000C300,0X1,1,1,2,ADDSEG_NOSREG);
	SegRename(0X6000C000,"SYS_REGS");
	SegClass (0X6000C000,"SYS_REGS");
	SegDefReg(0x6000C000,"T",0x0);
	SegDefReg(0x6000C000,"DS",0x1);
	add_segm_ex(0X6000D500,0X6000D600,0X1,1,1,2,ADDSEG_NOSREG);
	SegRename(0X6000D500,"GPIO6");
	SegClass (0X6000D500,"GPIO6");
	SegDefReg(0x6000D500,"T",0x0);
	SegDefReg(0x6000D500,"DS",0x1);
	add_segm_ex(0X6000F000,0X60010000,0X1,1,1,2,ADDSEG_NOSREG);
	SegRename(0X6000F000,"EXC_VECTORS");
	SegClass (0X6000F000,"EXC_VECTORS");
	SegDefReg(0x6000F000,"T",0x0);
	SegDefReg(0x6000F000,"DS",0x1);
	add_segm_ex(0X6001DC00,0X6001E000,0X1,1,1,2,ADDSEG_NOSREG);
	SegRename(0X6001DC00,"IPATCH");
	SegClass (0X6001DC00,"IPATCH");
	SegDefReg(0x6001DC00,"T",0x0);
	SegDefReg(0x6001DC00,"DS",0x1);
	add_segm_ex(0X70000000,0X70000400,0X1,1,1,2,ADDSEG_NOSREG);
	SegRename(0X70000000,"PP");
	SegClass (0X70000000,"PP");
	SegDefReg(0x70000000,"T",0x0);
	SegDefReg(0x70000000,"DS",0x1);
	add_segm_ex(0X70000800,0X70000C00,0X1,1,1,2,ADDSEG_NOSREG);
	SegRename(0X70000800,"GP");
	SegClass (0X70000800,"GP");
	SegDefReg(0x70000800,"T",0x0);
	SegDefReg(0x70000800,"DS",0x1);
	add_segm_ex(0X70003000,0X70004000,0X1,1,1,2,ADDSEG_NOSREG);
	SegRename(0X70003000,"PINMUX_AUX");
	SegClass (0X70003000,"PINMUX_AUX");
	SegDefReg(0x70003000,"T",0x0);
	SegDefReg(0x70003000,"DS",0x1);
	add_segm_ex(0X70006000,0X70006040,0X1,1,1,2,ADDSEG_NOSREG);
	SegRename(0X70006000,"UARTA");
	SegClass (0X70006000,"UARTA");
	SegDefReg(0x70006000,"T",0x0);
	SegDefReg(0x70006000,"DS",0x1);
	add_segm_ex(0X70006040,0X70006080,0X1,1,1,2,ADDSEG_NOSREG);
	SegRename(0X70006040,"UARTB");
	SegClass (0X70006040,"UARTB");
	SegDefReg(0x70006040,"T",0x0);
	SegDefReg(0x70006040,"DS",0x1);
	add_segm_ex(0X70006200,0X70006300,0X1,1,1,2,ADDSEG_NOSREG);
	SegRename(0X70006200,"UARTC");
	SegClass (0X70006200,"UARTC");
	SegDefReg(0x70006200,"T",0x0);
	SegDefReg(0x70006200,"DS",0x1);
	add_segm_ex(0X70006300,0X70006400,0X1,1,1,2,ADDSEG_NOSREG);
	SegRename(0X70006300,"UARTD");
	SegClass (0X70006300,"UARTD");
	SegDefReg(0x70006300,"T",0x0);
	SegDefReg(0x70006300,"DS",0x1);
	add_segm_ex(0X70006400,0X70006500,0X1,1,1,2,ADDSEG_NOSREG);
	SegRename(0X70006400,"UARTE");
	SegClass (0X70006400,"UARTE");
	SegDefReg(0x70006400,"T",0x0);
	SegDefReg(0x70006400,"DS",0x1);
	add_segm_ex(0X7000C000,0X7000C100,0X1,1,1,2,ADDSEG_NOSREG);
	SegRename(0X7000C000,"I2C");
	SegClass (0X7000C000,"I2C");
	SegDefReg(0x7000C000,"T",0x0);
	SegDefReg(0x7000C000,"DS",0x1);
	add_segm_ex(0X7000C400,0X7000C500,0X1,1,1,2,ADDSEG_NOSREG);
	SegRename(0X7000C400,"I2C2");
	SegClass (0X7000C400,"I2C2");
	SegDefReg(0x7000C400,"T",0x0);
	SegDefReg(0x7000C400,"DS",0x1);
	add_segm_ex(0X7000C500,0X7000C600,0X1,1,1,2,ADDSEG_NOSREG);
	SegRename(0X7000C500,"I2C3");
	SegClass (0X7000C500,"I2C3");
	SegDefReg(0x7000C500,"T",0x0);
	SegDefReg(0x7000C500,"DS",0x1);
	add_segm_ex(0X7000C700,0X7000C800,0X1,1,1,2,ADDSEG_NOSREG);
	SegRename(0X7000C700,"I2C4");
	SegClass (0X7000C700,"I2C4");
	SegDefReg(0x7000C700,"T",0x0);
	SegDefReg(0x7000C700,"DS",0x1);
	add_segm_ex(0X7000D000,0X7000D100,0X1,1,1,2,ADDSEG_NOSREG);
	SegRename(0X7000D000,"I2C5");
	SegClass (0X7000D000,"I2C5");
	SegDefReg(0x7000D000,"T",0x0);
	SegDefReg(0x7000D000,"DS",0x1);
	add_segm_ex(0X7000D100,0X7000D200,0X1,1,1,2,ADDSEG_NOSREG);
	SegRename(0X7000D100,"I2C6");
	SegClass (0X7000D100,"I2C6");
	SegDefReg(0x7000D100,"T",0x0);
	SegDefReg(0x7000D100,"DS",0x1);
	add_segm_ex(0X7000E400,0X7000F000,0X1,1,1,2,ADDSEG_NOSREG);
	SegRename(0X7000E400,"PMC");
	SegClass (0X7000E400,"PMC");
	SegDefReg(0x7000E400,"T",0x0);
	SegDefReg(0x7000E400,"DS",0x1);
	add_segm_ex(0X7000F800,0X7000FC00,0X1,1,1,2,ADDSEG_NOSREG);
	SegRename(0X7000F800,"FUSE");
	SegClass (0X7000F800,"FUSE");
	SegDefReg(0x7000F800,"T",0x0);
	SegDefReg(0x7000F800,"DS",0x1);
	add_segm_ex(0X7000FC00,0X70010000,0X1,1,1,2,ADDSEG_NOSREG);
	SegRename(0X7000FC00,"KFUSE");
	SegClass (0X7000FC00,"KFUSE");
	SegDefReg(0x7000FC00,"T",0x0);
	SegDefReg(0x7000FC00,"DS",0x1);
	add_segm_ex(0X70012000,0X70014000,0X1,1,1,2,ADDSEG_NOSREG);
	SegRename(0X70012000,"SE");
	SegClass (0X70012000,"SE");
	SegDefReg(0x70012000,"T",0x0);
	SegDefReg(0x70012000,"DS",0x1);
	add_segm_ex(0X70019000,0X7001A000,0X1,1,1,2,ADDSEG_NOSREG);
	SegRename(0X70019000,"MC");
	SegClass (0X70019000,"MC");
	SegDefReg(0x70019000,"T",0x0);
	SegDefReg(0x70019000,"DS",0x1);
	add_segm_ex(0X7001B000,0X7001C000,0X1,1,1,2,ADDSEG_NOSREG);
	SegRename(0X7001B000,"EMC");
	SegClass (0X7001B000,"EMC");
	SegDefReg(0x7001B000,"T",0x0);
	SegDefReg(0x7001B000,"DS",0x1);
	add_segm_ex(0X70020000,0X70030000,0X1,1,1,2,ADDSEG_NOSREG);
	SegRename(0X70020000,"SATA");
	SegClass (0X70020000,"SATA");
	SegDefReg(0x70020000,"T",0x0);
	SegDefReg(0x70020000,"DS",0x1);
	add_segm_ex(0X70090000,0X7009A000,0X1,1,1,2,ADDSEG_NOSREG);
	SegRename(0X70090000,"XUSB_HOST");
	SegClass (0X70090000,"XUSB_HOST");
	SegDefReg(0x70090000,"T",0x0);
	SegDefReg(0x70090000,"DS",0x1);
	add_segm_ex(0X7009F000,0X700A0000,0X1,1,1,2,ADDSEG_NOSREG);
	SegRename(0X7009F000,"XUSB_PADCTL");
	SegClass (0X7009F000,"XUSB_PADCTL");
	SegDefReg(0x7009F000,"T",0x0);
	SegDefReg(0x7009F000,"DS",0x1);
	add_segm_ex(0X700B0000,0X700B0200,0X1,1,1,2,ADDSEG_NOSREG);
	SegRename(0X700B0000,"SDMMC1");
	SegClass (0X700B0000,"SDMMC1");
	SegDefReg(0x700B0000,"T",0x0);
	SegDefReg(0x700B0000,"DS",0x1);
	add_segm_ex(0X700B0200,0X700B0400,0X1,1,1,2,ADDSEG_NOSREG);
	SegRename(0X700B0200,"SDMMC2");
	SegClass (0X700B0200,"SDMMC2");
	SegDefReg(0x700B0200,"T",0x0);
	SegDefReg(0x700B0200,"DS",0x1);
	add_segm_ex(0X700B0400,0X700B0600,0X1,1,1,2,ADDSEG_NOSREG);
	SegRename(0X700B0400,"SDMMC3");
	SegClass (0X700B0400,"SDMMC3");
	SegDefReg(0x700B0400,"T",0x0);
	SegDefReg(0x700B0400,"DS",0x1);
	add_segm_ex(0X700B0600,0X700B0800,0X1,1,1,2,ADDSEG_NOSREG);
	SegRename(0X700B0600,"SDMMC4");
	SegClass (0X700B0600,"SDMMC4");
	SegDefReg(0x700B0600,"T",0x0);
	SegDefReg(0x700B0600,"DS",0x1);
	add_segm_ex(0X700B1000,0X700B1200,0X1,1,1,2,ADDSEG_NOSREG);
	SegRename(0X700B1000,"SDMMC1B");
	SegClass (0X700B1000,"SDMMC1B");
	SegDefReg(0x700B1000,"T",0x0);
	SegDefReg(0x700B1000,"DS",0x1);
	add_segm_ex(0X700B2200,0X700B2400,0X1,1,1,2,ADDSEG_NOSREG);
	SegRename(0X700B2200,"SDMMC2B");
	SegClass (0X700B2200,"SDMMC2B");
	SegDefReg(0x700B2200,"T",0x0);
	SegDefReg(0x700B2200,"DS",0x1);
	add_segm_ex(0X700B3400,0X700B3600,0X1,1,1,2,ADDSEG_NOSREG);
	SegRename(0X700B3400,"SDMMC3B");
	SegClass (0X700B3400,"SDMMC3B");
	SegDefReg(0x700B3400,"T",0x0);
	SegDefReg(0x700B3400,"DS",0x1);
	add_segm_ex(0X700B4600,0X700B4800,0X1,1,1,2,ADDSEG_NOSREG);
	SegRename(0X700B4600,"SDMMC4B");
	SegClass (0X700B4600,"SDMMC4B");
	SegDefReg(0x700B4600,"T",0x0);
	SegDefReg(0x700B4600,"DS",0x1);
	add_segm_ex(0X700D0000,0X700DA000,0X1,1,1,2,ADDSEG_NOSREG);
	SegRename(0X700D0000,"XUSB_DEV");
	SegClass (0X700D0000,"XUSB_DEV");
	SegDefReg(0x700D0000,"T",0x0);
	SegDefReg(0x700D0000,"DS",0x1);
	add_segm_ex(0X700F0000,0X70100000,0X1,1,1,2,ADDSEG_NOSREG);
	SegRename(0X700F0000,"SYSCTR0");
	SegClass (0X700F0000,"SYSCTR0");
	SegDefReg(0x700F0000,"T",0x0);
	SegDefReg(0x700F0000,"DS",0x1);
	add_segm_ex(0X70410000,0X70411000,0X1,1,1,2,ADDSEG_NOSREG);
	SegRename(0X70410000,"QSPI");
	SegClass (0X70410000,"QSPI");
	SegDefReg(0x70410000,"T",0x0);
	SegDefReg(0x70410000,"DS",0x1);
	add_segm_ex(0X7D000000,0X7D001800,0X1,1,1,2,ADDSEG_NOSREG);
	SegRename(0X7D000000,"USB");
	SegClass (0X7D000000,"USB");
	SegDefReg(0x7D000000,"T",0x0);
	SegDefReg(0x7D000000,"DS",0x1);
	set_inf_attr(INF_LOW_OFF, 0x40000000);
	set_inf_attr(INF_HIGH_OFF, 0x7D001800);
}

static Enums_0(id) {

	id = add_enum(-1,"DEVICE_CLOCK",0x1100000);
	add_enum_member(id,"DEVICE_CLOCK_USBD",	0X36,	-1);
	add_enum_member(id,"DEVICE_CLOCK_MEM",	0X60,	-1);
	add_enum_member(id,"DEVICE_CLOCK_APBDMA",	0X62,	-1);
	add_enum_member(id,"DEVICE_CLOCK_PMC",	0X66,	-1);
	add_enum_member(id,"DEVICE_CLOCK_EMC",	0X79,	-1);
	add_enum_member(id,"DEVICE_CLOCK_XUSB_HOST",	0XB9,	-1);
	add_enum_member(id,"DEVICE_CLOCK_XUSB",	0X16F,	-1);
	add_enum_member(id,"DEVICE_CLOCK_QSPI",	0X1B3,	-1);
	add_enum_member(id,"DEVICE_CLOCK_I2C5",	0X128006F,	-1);
	add_enum_member(id,"DEVICE_CLOCK_SDMMC4",	0X164002F,	-1);
	add_enum_member(id,"DEVICE_CLOCK_UARTA",	0X1780026,	-1);
	add_enum_member(id,"DEVICE_CLOCK_SATA_OOB",	0X420013B,	-1);
	add_enum_member(id,"DEVICE_CLOCK_SATA_SPECIAL_CASE",	0X424001C,	-1);
	add_enum_member(id,"DEVICE_CLOCK_SATA",	0X424013C,	-1);
	add_enum_member(id,"DEVICE_CLOCK_UNKNOWN",	0X42C013F,	-1);
	id = add_enum(-1,"CLOCK_ENABLE_DISABLE",0x1100000);
	add_enum_member(id,"CLOCK_DISABLE",	0,	-1);
	add_enum_member(id,"CLOCK_ENABLE",	0X1,	-1);
	id = add_enum(-1,"DEVICE_RESET",0x1100000);
	add_enum_member(id,"DEVICE_RESET_UARTA",	0X6,	-1);
	add_enum_member(id,"DEVICE_RESET_SDMMC4",	0XF,	-1);
	add_enum_member(id,"DEVICE_RESET_USBD",	0X16,	-1);
	add_enum_member(id,"DEVICE_RESET_MEM",	0X20,	-1);
	add_enum_member(id,"DEVICE_RESET_APBDMA",	0X22,	-1);
	add_enum_member(id,"DEVICE_RESET_I2C5",	0X2F,	-1);
	add_enum_member(id,"DEVICE_RESET_EMC",	0X39,	-1);
	add_enum_member(id,"DEVICE_RESET_XUSB_HOST",	0X59,	-1);
	add_enum_member(id,"DEVICE_RESET_QSPI",	0X93,	-1);
	add_enum_member(id,"DEVICE_RESET_UNKNOWN2",	0XBB,	-1);
	add_enum_member(id,"DEVICE_RESET_SATA",	0XBC,	-1);
	add_enum_member(id,"DEVICE_RESET_UNKNOWN",	0XBF,	-1);
	add_enum_member(id,"DEVICE_RESET_SATACOLD",	0XC1,	-1);
	add_enum_member(id,"DEVICE_RESET_XUSB_PADCTL",	0XCE,	-1);
	id = add_enum(-1,"RESET_ASSERT_DEASSERT",0x1100000);
	add_enum_member(id,"RESET_DEASSERT",	0,	-1);
	add_enum_member(id,"RESET_ASSERT",	0X1,	-1);
	id = add_enum(-1,"FUSE_BOOT_DEV",0x1100000);
	add_enum_member(id,"FUSE_BOOT_DEV_SDMMC",	0,	-1);
	add_enum_member(id,"FUSE_BOOT_DEV_QSPI",	0X1,	-1);
	add_enum_member(id,"FUSE_BOOT_DEV_SATA",	0X2,	-1);
	add_enum_member(id,"FUSE_BOOT_DEV_USB_DEVICE",	0X3,	-1);
	add_enum_member(id,"FUSE_BOOT_DEV_USB_HOST",	0X4,	-1);
	add_enum_member(id,"FUSE_BOOT_DEV_UARTA",	0X5,	-1);
	id = add_enum(-1,"STRAP_BOOT_DEV",0x1100000);
	add_enum_member(id,"STRAP_BOOT_DEV_SDMMC",	0,	-1);
	add_enum_member(id,"STRAP_BOOT_DEV_QSPI",	0X1,	-1);
	add_enum_member(id,"STRAP_BOOT_DEV_SATA",	0X2,	-1);
	add_enum_member(id,"STRAP_BOOT_DEV_USE_FUSE",	0X3,	-1);
	add_enum_member(id,"STRAP_BOOT_DEV_USB_HOST",	0X4,	-1);
	add_enum_member(id,"STRAP_BOOT_DEV_USB_DEVICE",	0X5,	-1);
	id = add_enum(-1,"B_REQUEST",0x1100000);
	add_enum_member(id,"GET_STATUS",	0,	-1);
	add_enum_member(id,"CLEAR_FEATURE",	0X1,	-1);
	add_enum_member(id,"SET_FEATURE",	0X3,	-1);
	add_enum_member(id,"SET_ADDRESS",	0X5,	-1);
	add_enum_member(id,"GET_DESCRIPTOR",	0X6,	-1);
	add_enum_member(id,"SET_DESCRIPTOR",	0X7,	-1);
	add_enum_member(id,"GET_CONFIGURATION",	0X8,	-1);
	add_enum_member(id,"SET_CONFIGURATION",	0X9,	-1);
	id = add_enum(-1,"STORAGE_ADAPTER",0x1100000);
	add_enum_member(id,"STORAGE_ADAPTER_NONE",	0,	-1);
	add_enum_member(id,"STORAGE_ADAPTER_SPI",	0X3,	-1);
	add_enum_member(id,"STORAGE_ADAPTER_MMC",	0X4,	-1);
	add_enum_member(id,"STORAGE_ADAPTER_INVALID_5",	0X5,	-1);
	add_enum_member(id,"STORAGE_ADAPTER_INVALID_6",	0X6,	-1);
	add_enum_member(id,"STORAGE_ADAPTER_INVALID_7",	0X7,	-1);
	add_enum_member(id,"STORAGE_ADAPTER_INVALID_8",	0X8,	-1);
	add_enum_member(id,"STORAGE_ADAPTER_USB_HOST",	0X9,	-1);
	add_enum_member(id,"STORAGE_ADAPTER_SATA",	0XA,	-1);
	add_enum_member(id,"STORAGE_ADAPTER_UART",	0XB,	-1);
	id = add_enum(-1,"RCM_OP_MODE",0x1100000);
	add_enum_member(id,"RCM_OP_MODE_UNK",	0,	-1);
	add_enum_member(id,"RCM_OP_MODE_PREPROD",	0X1,	-1);
	add_enum_member(id,"RCM_OP_MODE_FA",	0X2,	-1);
	add_enum_member(id,"RCM_OP_MODE_DEVEL",	0X3,	-1);
	add_enum_member(id,"RCM_OP_MODE_ODM_OPEN",	0X4,	-1);
	add_enum_member(id,"RCM_OP_MODE_ODM_SECURE_AES",	0X5,	-1);
	add_enum_member(id,"RCM_OP_MODE_ODM_SECURE_PKC",	0X6,	-1);
	id = add_enum(-1,"SCRATCH0",0x1100000);
	set_enum_bf(id,1);
	add_enum_member(id,"SCRATCH0_WARMBOOT",	0X1,	0x1);
	add_enum_member(id,"SCRATCH0_RECOVERY",	0X4,	0x4);
	add_enum_member(id,"SCRATCH0_PREPROD_HANG",	0X10,	0x10);
	id = add_enum(-1,"HANDOFF_BOOTMODE",0x1100000);
	add_enum_member(id,"HANDOFF_BOOTMODE_STORAGE",	0X1,	-1);
	add_enum_member(id,"HANDOFF_BOOTMODE_RCM",	0X2,	-1);
	add_enum_member(id,"HANDOFF_BOOTMODE_RECOVERY",	0X4,	-1);
	id = add_enum(-1,"SD_CMD",0x1100000);
	add_enum_member(id,"SD_CMD_GO_STATE_IDLE",	0,	-1);
	add_enum_member(id,"SD_CMD_ALL_SEND_CID",	0X2,	-1);
	add_enum_member(id,"SD_CMD_SEND_RELATIVE_ADDR",	0X3,	-1);
	add_enum_member(id,"SD_CMD_SWITCH",	0X6,	-1);
	add_enum_member(id,"SD_CMD_SELECT_DESELECT_CARD",	0X7,	-1);
	add_enum_member(id,"SD_CMD_SEND_EXT_CSD",	0X8,	-1);
	add_enum_member(id,"SD_CMD_SEND_CSD",	0X9,	-1);
	add_enum_member(id,"SD_CMD_SEND_STATUS",	0XD,	-1);
	add_enum_member(id,"SD_CMD_SET_BLOCKLEN",	0X10,	-1);
	add_enum_member(id,"SD_CMD_READ_BLOCK_SINGLE",	0X11,	-1);
	add_enum_member(id,"SD_CMD_READ_BLOCK_MULTIPLE",	0X12,	-1);
	add_enum_member(id,"SD_CMD_SET_BLOCKCOUNT",	0X17,	-1);
	id = add_enum(-1,"SD_STATE_DATA_BUS_WIDTH",0x1100000);
	add_enum_member(id,"SD_STATE_DATA_BUS_WIDTH_4BIT",	0X1,	-1);
	add_enum_member(id,"SD_STATE_DATA_BUS_WIDTH_8BIT",	0X2,	-1);
	id = add_enum(-1,"SD_CONFIG_DATA_TRANSFER_MODE",0x1100000);
	add_enum_member(id,"SD_CONFIG_DATA_TRANSFER_MODE_SDR_4BIT",	0X1,	-1);
	add_enum_member(id,"SD_CONFIG_DATA_TRANSFER_MODE_SDR_8BIT",	0X2,	-1);
	add_enum_member(id,"SD_CONFIG_DATA_TRANSFER_MODE_DDR_4BIT",	0X5,	-1);
	add_enum_member(id,"SD_CONFIG_DATA_TRANSFER_MODE_DDR_8BIT",	0X6,	-1);
	id = add_enum(-1,"nvboot_memory_type",0x1100000);
	add_enum_member(id,"nvboot_memory_type_none",	0,	-1);
	add_enum_member(id,"nvboot_memory_type_ddr",	0,	-1);
	add_enum_member(id,"nvboot_memory_type_lpddr",	0,	-1);
	add_enum_member(id,"nvboot_memory_type_ddr2",	0,	-1);
	add_enum_member(id,"nvboot_memory_type_lpddr2",	0X1,	-1);
	add_enum_member(id,"nvboot_memory_type_ddr3",	0X2,	-1);
	add_enum_member(id,"nvboot_memory_type_lpddr4",	0X3,	-1);
	add_enum_member(id,"nvboot_memory_type_num",	0X4,	-1);
	add_enum_member(id,"nvboot_memory_type_force32",	0X7FFFFFF,	-1);
	id = add_enum(-1,"SD_INITIALIZATION_STATUS",0x1100000);
	add_enum_member(id,"SD_INITIALIZATION_STATUS_OKAY",	0X1,	-1);
	add_enum_member(id,"SD_INITIALIZATION_STATUS_NEED_READ",	0X2,	-1);
	add_enum_member(id,"SD_INITIALIZATION_STATUS_COMMAND_TIMED_OUT",	0X3,	-1);
	add_enum_member(id,"SD_INITIALIZATION_STATUS_ERROR",	0X6,	-1);
	add_enum_member(id,"SD_INITIALIZATION_STATUS_CARD_TIMEOUT",	0X7,	-1);
	id = add_enum(-1,"RCM_OPCODE",0x1100000);
	add_enum_member(id,"RCM_CMD_NONE",	0,	-1);
	add_enum_member(id,"RCM_CMD_SYNC",	0X1,	-1);
	add_enum_member(id,"RCM_CMD_DL_CODE",	0X4,	-1);
	add_enum_member(id,"RCM_CMD_QUERY_BR_VERSION",	0X5,	-1);
	add_enum_member(id,"RCM_CMD_QUERY_RCM_VERSION",	0X6,	-1);
	add_enum_member(id,"RCM_CMD_QUERY_BD_VERSION",	0X7,	-1);
	id = add_enum(-1,"SE_HASH_MODE",0x1100000);
	add_enum_member(id,"SE_HASH_MODE_SHA1",	0,	-1);
	add_enum_member(id,"SE_HASH_MODE_SHA224",	0X4,	-1);
	add_enum_member(id,"SE_HASH_MODE_SHA256",	0X5,	-1);
	add_enum_member(id,"SE_HASH_MODE_SHA384",	0X6,	-1);
	add_enum_member(id,"SE_HASH_MODE_SHA512",	0X7,	-1);
	id = add_enum(-1,"BOOTROM_KEYSLOT",0x1100000);
	add_enum_member(id,"BOOTROM_KEYSLOT_TEMP",	0XA,	-1);
	add_enum_member(id,"BOOTROM_KEYSLOT_AES_1",	0XB,	-1);
	add_enum_member(id,"BOOTROM_KEYSLOT_AES_2",	0XC,	-1);
	add_enum_member(id,"BOOTROM_KEYSLOT_PRIVKEY_1",	0XD,	-1);
	add_enum_member(id,"BOOTROM_KEYSLOT_PRIVKEY_2",	0XE,	-1);
	id = add_enum(-1,"SE_OPERATION",0x1100000);
	add_enum_member(id,"SE_OPERATION_ABORT",	0,	-1);
	add_enum_member(id,"SE_OPERATION_START",	0X1,	-1);
	add_enum_member(id,"SE_OPERATION_RESTART",	0X2,	-1);
	add_enum_member(id,"SE_OPERATION_CTX_SAVE",	0X3,	-1);
	id = add_enum(-1,"USB1_IF_USB_SUSP_CTRL",0x1100000);
	set_enum_bf(id,1);
	add_enum_member(id,"USB1_IF_USB_SUSP_CTRL_UTMIP_RESET",	0X800,	0x800);
	add_enum_member(id,"USB1_IF_USB_SUSP_CTRL_UTMIP_PHY_ENB",	0X1000,	0x1000);
	id = add_enum(-1,"SE_KEYTABLE_QUAD",0x1100000);
	add_enum_member(id,"SE_KEYTABLE_QUAD_KEYS_128",	0,	-1);
	add_enum_member(id,"SE_KEYTABLE_QUAD_KEYS_192",	0X1,	-1);
	add_enum_member(id,"SE_KEYTABLE_QUAD_ORG_IV",	0X2,	-1);
	add_enum_member(id,"SE_KEYTABLE_QUAD_UPDTD_IV",	0X3,	-1);
	id = add_enum(-1,"ENDPTCTRL",0x1100000);
	set_enum_bf(id,1);
	add_enum_member(id,"RX_STALL",	0X1,	0x1);
	add_enum_member(id,"ENDPTCTRL_RXT_CTRL",	0,	0xC);
	add_enum_member(id,"ENDPTCTRL_RXT_ISO",	0X4,	0xC);
	add_enum_member(id,"ENDPTCTRL_RXT_BULK",	0X8,	0xC);
	add_enum_member(id,"ENDPTCTRL_RXT_INTR",	0XC,	0xC);
	set_bmask_name(id,0XC,"RXT");
	add_enum_member(id,"ENDPTCTRL_RXR_KEEP_PID_SEQ",	0X40,	0x40);
	add_enum_member(id,"ENDPTCTRL_TXR_KEEP_PID_SEQ",	0X400000,	0x400000);
	id = add_enum(-1,"SE_KEY_SIZE",0x1100000);
	add_enum_member(id,"SE_KEY_SIZE_128",	0,	-1);
	add_enum_member(id,"SE_KEY_SIZE_192",	0X1,	-1);
	add_enum_member(id,"SE_KEY_SIZE_256",	0X2,	-1);
	id = add_enum(-1,"HARDKEY_STATUS",0x1100000);
	add_enum_member(id,"HARDKEY_FUSE_VALID",	0,	-1);
	add_enum_member(id,"HARDKEY_NOT_AVAILABLE",	0X3A,	-1);
	add_enum_member(id,"HARDKEY_VALID",	0X3B,	-1);
	add_enum_member(id,"HARDKEY_INVALID",	0X3C,	-1);
	add_enum_member(id,"HARDKEY_FUSE_OVER_15",	0X3D,	-1);
	add_enum_member(id,"HARDKEY_NOT_SET_IN_FUSE",	0X3E,	-1);
	id = add_enum(-1,"USBSTS",0x1100000);
	set_enum_bf(id,1);
	add_enum_member(id,"USBSTS_PORT_CHANGE",	0X4,	0x4);
	add_enum_member(id,"USBSTS_USB_RESET",	0X40,	0x40);
	id = add_enum(-1,"tegra_endpt",0x1100000);
	set_enum_bf(id,1);
	add_enum_member(id,"tegra_endpt_rx",	0,	0x1);
	add_enum_member(id,"tegra_endpt_tx",	0X1,	0x1);
	add_enum_member(id,"tegra_endpt_num",	0,	0xFFFFFFFE);
	add_enum_member(id,"tegra_endpt_num_0",	0,	0xFFFFFFFE);
	add_enum_member(id,"tegra_endpt_num_1",	0X2,	0xFFFFFFFE);
	add_enum_member(id,"tegra_endpt_num_2",	0X4,	0xFFFFFFFE);
	add_enum_member(id,"tegra_endpt_num_3",	0X6,	0xFFFFFFFE);
	set_bmask_name(id,0XFFFFFFFE,"tegra_endpt_nummask");
	id = add_enum(-1,"tegra_EP_STATUS",0x1100000);
	add_enum_member(id,"tegra_EP_STATUS_BUFFER_READY",	0X1,	-1);
	add_enum_member(id,"tegra_EP_STATUS_ERROR",	0X2,	-1);
	add_enum_member(id,"tegra_EP_STATUS_STALLED",	0X4,	-1);
	add_enum_member(id,"tegra_EP_STATUS_DISABLED",	0X5,	-1);
	id = add_enum(-1,"RCM_ERROR",0x2200000);
	add_enum_member(id,"RCM_ERROR_INVALID_LOWSEC_KEY",	0X4,	-1);
	add_enum_member(id,"RCM_ERROR_INVALID_LEN_INSECURE",	0X8,	-1);
	add_enum_member(id,"RCM_ERROR_LEN_MISMATCH",	0XA,	-1);
	add_enum_member(id,"RCM_ERROR_PAYLOAD_LEN_MISMATCH",	0XB,	-1);
	add_enum_member(id,"RCM_ERROR_LEFTOVER_DATA",	0XF,	-1);
	add_enum_member(id,"RCM_ERROR_NO_PUBKEY_LOADED",	0X13,	-1);
	add_enum_member(id,"RCM_ERROR_INVALID_KEYINDEX",	0X15,	-1);
	add_enum_member(id,"RCM_ERROR_INVALID_SIGNATURE",	0X16,	-1);
	return id;
}

//------------------------------------------------------------------------
// Information about enum types

static Enums(void) {
        auto id;
        begin_type_updating(UTP_ENUM);
	id = Enums_0(id);
        end_type_updating(UTP_ENUM);
}

static ApplyStrucTInfos_0(void) {
        auto id;
	id = get_struc_id("data_copy_table_struct");
	SetType(get_member_id(id, 0x0), "void *");
	SetType(get_member_id(id, 0x4), "void *");
	SetType(get_member_id(id, 0xC), "void (__cdecl *)(void *dst, void *src, int len)");
	id = get_struc_id("storage_adapter");
	SetType(get_member_id(id, 0x0), "void *");
	SetType(get_member_id(id, 0x4), "void *");
	SetType(get_member_id(id, 0x8), "struct storage_adapter *");
	SetType(get_member_id(id, 0xC), "void *");
	SetType(get_member_id(id, 0x10), "void *");
	SetType(get_member_id(id, 0x14), "void *");
	SetType(get_member_id(id, 0x18), "void *");
	SetType(get_member_id(id, 0x1C), "void *");
	id = get_struc_id("storage_context");
	SetType(get_member_id(id, 0x4), "boot_device_load_context_maybe");
	id = get_struc_id("boot_device_load_context_maybe");
	SetType(get_member_id(id, 0x8), "struct storage_adapter *");
	id = get_struc_id("boot_device_uart_config");
	id = get_struc_id("boot_device_sd_config");
	SetType(get_member_id(id, 0x4), "SD_CONFIG_DATA_TRANSFER_MODE");
	id = get_struc_id("boot_device_config");
	SetType(get_member_id(id, 0x0), "boot_device_sd_config");
	id = get_struc_id("boot_device_sd_state");
	SetType(get_member_id(id, 0x0), "boot_device_shared_state *");
	SetType(get_member_id(id, 0x4), "handoff_sd_info *");
	id = get_struc_id("boot_device_shared_state");
	SetType(get_member_id(id, 0x1C), "SD_INITIALIZATION_STATUS");
	id = get_struc_id("boot_device_shared_state_inner_1");
	SetType(get_member_id(id, 0x218), "boot_device_shared_state_inner_2");
	id = get_struc_id("boot_device_shared_state_inner_2");
	id = get_struc_id("badblock_table");
	id = get_struc_id("rsa_key_modulus");
	id = get_struc_id("boot_config_table");
	SetType(get_member_id(id, 0x0), "badblock_table");
	SetType(get_member_id(id, 0x210), "rsa_key_modulus");
	SetType(get_member_id(id, 0x510), "hash");
	SetType(get_member_id(id, 0x520), "ecid");
	SetType(get_member_id(id, 0x544), "STORAGE_ADAPTER");
	SetType(get_member_id(id, 0x548), "dev_params");
	id = get_struc_id("object_signature");
	SetType(get_member_id(id, 0x0), "hash");
	SetType(get_member_id(id, 0x10), "rsa_pss_sig");
	id = get_struc_id("hash");
	id = get_struc_id("rsa_pss_sig");
	id = get_struc_id("ecid");
	id = get_struc_id("dev_params");
	id = get_struc_id("sdmmc_params");
	id = get_struc_id("nvboot_sdram_params");
	SetType(get_member_id(id, 0x0), "nvboot_memory_type");
	SetType(get_member_id(id, 0x4), "unsigned int");
	SetType(get_member_id(id, 0x8), "unsigned int");
	SetType(get_member_id(id, 0xC), "unsigned int");
	SetType(get_member_id(id, 0x10), "unsigned int");
	SetType(get_member_id(id, 0x14), "unsigned int");
	SetType(get_member_id(id, 0x18), "unsigned int");
	SetType(get_member_id(id, 0x1C), "unsigned int");
	SetType(get_member_id(id, 0x20), "unsigned int");
	SetType(get_member_id(id, 0x24), "unsigned int");
	SetType(get_member_id(id, 0x28), "unsigned int");
	SetType(get_member_id(id, 0x2C), "unsigned int");
	SetType(get_member_id(id, 0x30), "unsigned int");
	SetType(get_member_id(id, 0x34), "unsigned int");
	SetType(get_member_id(id, 0x38), "unsigned int");
	SetType(get_member_id(id, 0x3C), "unsigned int");
	SetType(get_member_id(id, 0x40), "unsigned int");
	SetType(get_member_id(id, 0x44), "unsigned int");
	SetType(get_member_id(id, 0x48), "unsigned int");
	SetType(get_member_id(id, 0x4C), "unsigned int");
	SetType(get_member_id(id, 0x50), "unsigned int");
	SetType(get_member_id(id, 0x54), "unsigned int");
	SetType(get_member_id(id, 0x58), "unsigned int");
	SetType(get_member_id(id, 0x5C), "unsigned int");
	SetType(get_member_id(id, 0x60), "unsigned int");
	SetType(get_member_id(id, 0x64), "unsigned int");
	SetType(get_member_id(id, 0x68), "unsigned int");
	SetType(get_member_id(id, 0x6C), "unsigned int");
	SetType(get_member_id(id, 0x70), "unsigned int");
	SetType(get_member_id(id, 0x74), "unsigned int");
	SetType(get_member_id(id, 0x78), "unsigned int");
	SetType(get_member_id(id, 0x7C), "unsigned int");
	SetType(get_member_id(id, 0x80), "unsigned int");
	SetType(get_member_id(id, 0x84), "unsigned int");
	SetType(get_member_id(id, 0x88), "unsigned int");
	SetType(get_member_id(id, 0x8C), "unsigned int");
	SetType(get_member_id(id, 0x90), "unsigned int");
	SetType(get_member_id(id, 0x94), "unsigned int");
	SetType(get_member_id(id, 0x98), "unsigned int");
	SetType(get_member_id(id, 0x9C), "unsigned int");
	SetType(get_member_id(id, 0xA0), "unsigned int");
	SetType(get_member_id(id, 0xA4), "unsigned int");
	SetType(get_member_id(id, 0xA8), "unsigned int");
	SetType(get_member_id(id, 0xAC), "unsigned int");
	SetType(get_member_id(id, 0xB0), "unsigned int");
	SetType(get_member_id(id, 0xB4), "unsigned int");
	SetType(get_member_id(id, 0xB8), "unsigned int");
	SetType(get_member_id(id, 0xBC), "unsigned int");
	SetType(get_member_id(id, 0xC0), "unsigned int");
	SetType(get_member_id(id, 0xC4), "unsigned int");
	SetType(get_member_id(id, 0xC8), "unsigned int");
	SetType(get_member_id(id, 0xCC), "unsigned int");
	SetType(get_member_id(id, 0xD0), "unsigned int");
	SetType(get_member_id(id, 0xD4), "unsigned int");
	SetType(get_member_id(id, 0xD8), "unsigned int");
	SetType(get_member_id(id, 0xDC), "unsigned int");
	SetType(get_member_id(id, 0xE0), "unsigned int");
	SetType(get_member_id(id, 0xE4), "unsigned int");
	SetType(get_member_id(id, 0xE8), "unsigned int");
	SetType(get_member_id(id, 0xEC), "unsigned int");
	SetType(get_member_id(id, 0xF0), "unsigned int");
	SetType(get_member_id(id, 0xF4), "unsigned int");
	SetType(get_member_id(id, 0xF8), "unsigned int");
	SetType(get_member_id(id, 0xFC), "unsigned int");
	SetType(get_member_id(id, 0x100), "unsigned int");
	SetType(get_member_id(id, 0x104), "unsigned int");
	SetType(get_member_id(id, 0x108), "unsigned int");
	SetType(get_member_id(id, 0x10C), "unsigned int");
	SetType(get_member_id(id, 0x110), "unsigned int");
	SetType(get_member_id(id, 0x114), "unsigned int");
	SetType(get_member_id(id, 0x118), "unsigned int");
	SetType(get_member_id(id, 0x11C), "unsigned int");
	SetType(get_member_id(id, 0x120), "unsigned int");
	SetType(get_member_id(id, 0x124), "unsigned int");
	SetType(get_member_id(id, 0x128), "unsigned int");
	SetType(get_member_id(id, 0x12C), "unsigned int");
	SetType(get_member_id(id, 0x130), "unsigned int");
	SetType(get_member_id(id, 0x134), "unsigned int");
	SetType(get_member_id(id, 0x138), "unsigned int");
	SetType(get_member_id(id, 0x13C), "unsigned int");
	SetType(get_member_id(id, 0x140), "unsigned int");
	SetType(get_member_id(id, 0x144), "unsigned int");
	SetType(get_member_id(id, 0x148), "unsigned int");
	SetType(get_member_id(id, 0x14C), "unsigned int");
	SetType(get_member_id(id, 0x150), "unsigned int");
	SetType(get_member_id(id, 0x154), "unsigned int");
	SetType(get_member_id(id, 0x158), "unsigned int");
	SetType(get_member_id(id, 0x15C), "unsigned int");
	SetType(get_member_id(id, 0x160), "unsigned int");
	SetType(get_member_id(id, 0x164), "unsigned int");
	SetType(get_member_id(id, 0x168), "unsigned int");
	SetType(get_member_id(id, 0x16C), "unsigned int");
	SetType(get_member_id(id, 0x170), "unsigned int");
	SetType(get_member_id(id, 0x174), "unsigned int");
	SetType(get_member_id(id, 0x178), "unsigned int");
	SetType(get_member_id(id, 0x17C), "unsigned int");
	SetType(get_member_id(id, 0x180), "unsigned int");
	SetType(get_member_id(id, 0x184), "unsigned int");
	SetType(get_member_id(id, 0x188), "unsigned int");
	SetType(get_member_id(id, 0x18C), "unsigned int");
	SetType(get_member_id(id, 0x190), "unsigned int");
	SetType(get_member_id(id, 0x194), "unsigned int");
	SetType(get_member_id(id, 0x198), "unsigned int");
	SetType(get_member_id(id, 0x19C), "unsigned int");
	SetType(get_member_id(id, 0x1A0), "unsigned int");
	SetType(get_member_id(id, 0x1A4), "unsigned int");
	SetType(get_member_id(id, 0x1A8), "unsigned int");
	SetType(get_member_id(id, 0x1AC), "unsigned int");
	SetType(get_member_id(id, 0x1B0), "unsigned int");
	SetType(get_member_id(id, 0x1B4), "unsigned int");
	SetType(get_member_id(id, 0x1B8), "unsigned int");
	SetType(get_member_id(id, 0x1BC), "unsigned int");
	SetType(get_member_id(id, 0x1C0), "unsigned int");
	SetType(get_member_id(id, 0x1C4), "unsigned int");
	SetType(get_member_id(id, 0x1C8), "unsigned int");
	SetType(get_member_id(id, 0x1CC), "unsigned int");
	SetType(get_member_id(id, 0x1D0), "unsigned int");
	SetType(get_member_id(id, 0x1D4), "unsigned int");
	SetType(get_member_id(id, 0x1D8), "unsigned int");
	SetType(get_member_id(id, 0x1DC), "unsigned int");
	SetType(get_member_id(id, 0x1E0), "unsigned int");
	SetType(get_member_id(id, 0x1E4), "unsigned int");
	SetType(get_member_id(id, 0x1E8), "unsigned int");
	SetType(get_member_id(id, 0x1EC), "unsigned int");
	SetType(get_member_id(id, 0x1F0), "unsigned int");
	SetType(get_member_id(id, 0x1F4), "unsigned int");
	SetType(get_member_id(id, 0x1F8), "unsigned int");
	SetType(get_member_id(id, 0x1FC), "unsigned int");
	SetType(get_member_id(id, 0x200), "unsigned int");
	SetType(get_member_id(id, 0x204), "unsigned int");
	SetType(get_member_id(id, 0x208), "unsigned int");
	SetType(get_member_id(id, 0x20C), "unsigned int");
	SetType(get_member_id(id, 0x210), "unsigned int");
	SetType(get_member_id(id, 0x214), "unsigned int");
	SetType(get_member_id(id, 0x218), "unsigned int");
	SetType(get_member_id(id, 0x21C), "unsigned int");
	SetType(get_member_id(id, 0x220), "unsigned int");
	SetType(get_member_id(id, 0x224), "unsigned int");
	SetType(get_member_id(id, 0x228), "unsigned int");
	SetType(get_member_id(id, 0x22C), "unsigned int");
	SetType(get_member_id(id, 0x230), "unsigned int");
	SetType(get_member_id(id, 0x234), "unsigned int");
	SetType(get_member_id(id, 0x238), "unsigned int");
	SetType(get_member_id(id, 0x23C), "unsigned int");
	SetType(get_member_id(id, 0x240), "unsigned int");
	SetType(get_member_id(id, 0x244), "unsigned int");
	SetType(get_member_id(id, 0x248), "unsigned int");
	SetType(get_member_id(id, 0x24C), "unsigned int");
	SetType(get_member_id(id, 0x250), "unsigned int");
	SetType(get_member_id(id, 0x254), "unsigned int");
	SetType(get_member_id(id, 0x258), "unsigned int");
	SetType(get_member_id(id, 0x25C), "unsigned int");
	SetType(get_member_id(id, 0x260), "unsigned int");
	SetType(get_member_id(id, 0x264), "unsigned int");
	SetType(get_member_id(id, 0x268), "unsigned int");
	SetType(get_member_id(id, 0x26C), "unsigned int");
	SetType(get_member_id(id, 0x270), "unsigned int");
	SetType(get_member_id(id, 0x274), "unsigned int");
	SetType(get_member_id(id, 0x278), "unsigned int");
	SetType(get_member_id(id, 0x27C), "unsigned int");
	SetType(get_member_id(id, 0x280), "unsigned int");
	SetType(get_member_id(id, 0x284), "unsigned int");
	SetType(get_member_id(id, 0x288), "unsigned int");
	SetType(get_member_id(id, 0x28C), "unsigned int");
	SetType(get_member_id(id, 0x290), "unsigned int");
	SetType(get_member_id(id, 0x294), "unsigned int");
	SetType(get_member_id(id, 0x298), "unsigned int");
	SetType(get_member_id(id, 0x29C), "unsigned int");
	SetType(get_member_id(id, 0x2A0), "unsigned int");
	SetType(get_member_id(id, 0x2A4), "unsigned int");
	SetType(get_member_id(id, 0x2A8), "unsigned int");
	SetType(get_member_id(id, 0x2AC), "unsigned int");
	SetType(get_member_id(id, 0x2B0), "unsigned int");
	SetType(get_member_id(id, 0x2B4), "unsigned int");
	SetType(get_member_id(id, 0x2B8), "unsigned int");
	SetType(get_member_id(id, 0x2BC), "unsigned int");
	SetType(get_member_id(id, 0x2C0), "unsigned int");
	SetType(get_member_id(id, 0x2C4), "unsigned int");
	SetType(get_member_id(id, 0x2C8), "unsigned int");
	SetType(get_member_id(id, 0x2CC), "unsigned int");
	SetType(get_member_id(id, 0x2D0), "unsigned int");
	SetType(get_member_id(id, 0x2D4), "unsigned int");
	SetType(get_member_id(id, 0x2D8), "unsigned int");
	SetType(get_member_id(id, 0x2DC), "unsigned int");
	SetType(get_member_id(id, 0x2E0), "unsigned int");
	SetType(get_member_id(id, 0x2E4), "unsigned int");
	SetType(get_member_id(id, 0x2E8), "unsigned int");
	SetType(get_member_id(id, 0x2EC), "unsigned int");
	SetType(get_member_id(id, 0x2F0), "unsigned int");
	SetType(get_member_id(id, 0x2F4), "unsigned int");
	SetType(get_member_id(id, 0x2F8), "unsigned int");
	SetType(get_member_id(id, 0x2FC), "unsigned int");
	SetType(get_member_id(id, 0x300), "unsigned int");
	SetType(get_member_id(id, 0x304), "unsigned int");
	SetType(get_member_id(id, 0x308), "unsigned int");
	SetType(get_member_id(id, 0x30C), "unsigned int");
	SetType(get_member_id(id, 0x310), "unsigned int");
	SetType(get_member_id(id, 0x314), "unsigned int");
	SetType(get_member_id(id, 0x318), "unsigned int");
	SetType(get_member_id(id, 0x31C), "unsigned int");
	SetType(get_member_id(id, 0x320), "unsigned int");
	SetType(get_member_id(id, 0x324), "unsigned int");
	SetType(get_member_id(id, 0x328), "unsigned int");
	SetType(get_member_id(id, 0x32C), "unsigned int");
	SetType(get_member_id(id, 0x330), "unsigned int");
	SetType(get_member_id(id, 0x334), "unsigned int");
	SetType(get_member_id(id, 0x338), "unsigned int");
	SetType(get_member_id(id, 0x33C), "unsigned int");
	SetType(get_member_id(id, 0x340), "unsigned int");
	SetType(get_member_id(id, 0x344), "unsigned int");
	SetType(get_member_id(id, 0x348), "unsigned int");
	SetType(get_member_id(id, 0x34C), "unsigned int");
	SetType(get_member_id(id, 0x350), "unsigned int");
	SetType(get_member_id(id, 0x354), "unsigned int");
	SetType(get_member_id(id, 0x358), "unsigned int");
	SetType(get_member_id(id, 0x35C), "unsigned int");
	SetType(get_member_id(id, 0x360), "unsigned int");
	SetType(get_member_id(id, 0x364), "unsigned int");
	SetType(get_member_id(id, 0x368), "unsigned int");
	SetType(get_member_id(id, 0x36C), "unsigned int");
	SetType(get_member_id(id, 0x370), "unsigned int");
	SetType(get_member_id(id, 0x374), "unsigned int");
	SetType(get_member_id(id, 0x378), "unsigned int");
	SetType(get_member_id(id, 0x37C), "unsigned int");
	SetType(get_member_id(id, 0x380), "unsigned int");
	SetType(get_member_id(id, 0x384), "unsigned int");
	SetType(get_member_id(id, 0x388), "unsigned int");
	SetType(get_member_id(id, 0x38C), "unsigned int");
	SetType(get_member_id(id, 0x390), "unsigned int");
	SetType(get_member_id(id, 0x394), "unsigned int");
	SetType(get_member_id(id, 0x398), "unsigned int");
	SetType(get_member_id(id, 0x39C), "unsigned int");
	SetType(get_member_id(id, 0x3A0), "unsigned int");
	SetType(get_member_id(id, 0x3A4), "unsigned int");
	SetType(get_member_id(id, 0x3A8), "unsigned int");
	SetType(get_member_id(id, 0x3AC), "unsigned int");
	SetType(get_member_id(id, 0x3B0), "unsigned int");
	SetType(get_member_id(id, 0x3B4), "unsigned int");
	SetType(get_member_id(id, 0x3B8), "unsigned int");
	SetType(get_member_id(id, 0x3BC), "unsigned int");
	SetType(get_member_id(id, 0x3C0), "unsigned int");
	SetType(get_member_id(id, 0x3C4), "unsigned int");
	SetType(get_member_id(id, 0x3C8), "unsigned int");
	SetType(get_member_id(id, 0x3CC), "unsigned int");
	SetType(get_member_id(id, 0x3D0), "unsigned int");
	SetType(get_member_id(id, 0x3D4), "unsigned int");
	SetType(get_member_id(id, 0x3D8), "unsigned int");
	SetType(get_member_id(id, 0x3DC), "unsigned int");
	SetType(get_member_id(id, 0x3E0), "unsigned int");
	SetType(get_member_id(id, 0x3E4), "unsigned int");
	SetType(get_member_id(id, 0x3E8), "unsigned int");
	SetType(get_member_id(id, 0x3EC), "unsigned int");
	SetType(get_member_id(id, 0x3F0), "unsigned int");
	SetType(get_member_id(id, 0x3F4), "unsigned int");
	SetType(get_member_id(id, 0x3F8), "unsigned int");
	SetType(get_member_id(id, 0x3FC), "unsigned int");
	SetType(get_member_id(id, 0x400), "unsigned int");
	SetType(get_member_id(id, 0x404), "unsigned int");
	SetType(get_member_id(id, 0x408), "unsigned int");
	SetType(get_member_id(id, 0x40C), "unsigned int");
	SetType(get_member_id(id, 0x410), "unsigned int");
	SetType(get_member_id(id, 0x414), "unsigned int");
	SetType(get_member_id(id, 0x418), "unsigned int");
	SetType(get_member_id(id, 0x41C), "unsigned int");
	SetType(get_member_id(id, 0x420), "unsigned int");
	SetType(get_member_id(id, 0x424), "unsigned int");
	SetType(get_member_id(id, 0x428), "unsigned int");
	SetType(get_member_id(id, 0x42C), "unsigned int");
	SetType(get_member_id(id, 0x430), "unsigned int");
	SetType(get_member_id(id, 0x434), "unsigned int");
	SetType(get_member_id(id, 0x438), "unsigned int");
	SetType(get_member_id(id, 0x43C), "unsigned int");
	SetType(get_member_id(id, 0x440), "unsigned int");
	SetType(get_member_id(id, 0x444), "unsigned int");
	SetType(get_member_id(id, 0x448), "unsigned int");
	SetType(get_member_id(id, 0x44C), "unsigned int");
	SetType(get_member_id(id, 0x450), "unsigned int");
	SetType(get_member_id(id, 0x454), "unsigned int");
	SetType(get_member_id(id, 0x458), "unsigned int");
	SetType(get_member_id(id, 0x45C), "unsigned int");
	SetType(get_member_id(id, 0x460), "unsigned int");
	SetType(get_member_id(id, 0x464), "unsigned int");
	SetType(get_member_id(id, 0x468), "unsigned int");
	SetType(get_member_id(id, 0x46C), "unsigned int");
	SetType(get_member_id(id, 0x470), "unsigned int");
	SetType(get_member_id(id, 0x474), "unsigned int");
	SetType(get_member_id(id, 0x478), "unsigned int");
	SetType(get_member_id(id, 0x47C), "unsigned int");
	SetType(get_member_id(id, 0x480), "unsigned int");
	SetType(get_member_id(id, 0x484), "unsigned int");
	SetType(get_member_id(id, 0x488), "unsigned int");
	SetType(get_member_id(id, 0x48C), "unsigned int");
	SetType(get_member_id(id, 0x490), "unsigned int");
	SetType(get_member_id(id, 0x494), "unsigned int");
	SetType(get_member_id(id, 0x498), "unsigned int");
	SetType(get_member_id(id, 0x49C), "unsigned int");
	SetType(get_member_id(id, 0x4A0), "unsigned int");
	SetType(get_member_id(id, 0x4A4), "unsigned int");
	SetType(get_member_id(id, 0x4A8), "unsigned int");
	SetType(get_member_id(id, 0x4AC), "unsigned int");
	SetType(get_member_id(id, 0x4B0), "unsigned int");
	SetType(get_member_id(id, 0x4B4), "unsigned int");
	SetType(get_member_id(id, 0x4B8), "unsigned int");
	SetType(get_member_id(id, 0x4BC), "unsigned int");
	SetType(get_member_id(id, 0x4C0), "unsigned int");
	SetType(get_member_id(id, 0x4C4), "unsigned int");
	SetType(get_member_id(id, 0x4C8), "unsigned int");
	SetType(get_member_id(id, 0x4CC), "unsigned int");
	SetType(get_member_id(id, 0x4D0), "unsigned int");
	SetType(get_member_id(id, 0x4D4), "unsigned int");
	SetType(get_member_id(id, 0x4D8), "unsigned int");
	SetType(get_member_id(id, 0x4DC), "unsigned int");
	SetType(get_member_id(id, 0x4E0), "unsigned int");
	SetType(get_member_id(id, 0x4E4), "unsigned int");
	SetType(get_member_id(id, 0x4E8), "unsigned int");
	SetType(get_member_id(id, 0x4EC), "unsigned int");
	SetType(get_member_id(id, 0x4F0), "unsigned int");
	SetType(get_member_id(id, 0x4F4), "unsigned int");
	SetType(get_member_id(id, 0x4F8), "unsigned int");
	SetType(get_member_id(id, 0x4FC), "unsigned int");
	SetType(get_member_id(id, 0x500), "unsigned int");
	SetType(get_member_id(id, 0x504), "unsigned int");
	SetType(get_member_id(id, 0x508), "unsigned int");
	SetType(get_member_id(id, 0x50C), "unsigned int");
	SetType(get_member_id(id, 0x510), "unsigned int");
	SetType(get_member_id(id, 0x514), "unsigned int");
	SetType(get_member_id(id, 0x518), "unsigned int");
	SetType(get_member_id(id, 0x51C), "unsigned int");
	SetType(get_member_id(id, 0x520), "unsigned int");
	SetType(get_member_id(id, 0x524), "unsigned int");
	SetType(get_member_id(id, 0x528), "unsigned int");
	SetType(get_member_id(id, 0x52C), "unsigned int");
	SetType(get_member_id(id, 0x530), "unsigned int");
	SetType(get_member_id(id, 0x534), "unsigned int");
	SetType(get_member_id(id, 0x538), "unsigned int");
	SetType(get_member_id(id, 0x53C), "unsigned int");
	SetType(get_member_id(id, 0x540), "unsigned int");
	SetType(get_member_id(id, 0x544), "unsigned int");
	SetType(get_member_id(id, 0x548), "unsigned int");
	SetType(get_member_id(id, 0x54C), "unsigned int");
	SetType(get_member_id(id, 0x550), "unsigned int");
	SetType(get_member_id(id, 0x554), "unsigned int");
	SetType(get_member_id(id, 0x558), "unsigned int");
	SetType(get_member_id(id, 0x55C), "unsigned int");
	SetType(get_member_id(id, 0x560), "unsigned int");
	SetType(get_member_id(id, 0x564), "unsigned int");
	SetType(get_member_id(id, 0x568), "unsigned int");
	SetType(get_member_id(id, 0x56C), "unsigned int");
	SetType(get_member_id(id, 0x570), "unsigned int");
	SetType(get_member_id(id, 0x574), "unsigned int");
	SetType(get_member_id(id, 0x578), "unsigned int");
	SetType(get_member_id(id, 0x57C), "unsigned int");
	SetType(get_member_id(id, 0x580), "unsigned int");
	SetType(get_member_id(id, 0x584), "unsigned int");
	SetType(get_member_id(id, 0x588), "unsigned int");
	SetType(get_member_id(id, 0x58C), "unsigned int");
	SetType(get_member_id(id, 0x590), "unsigned int");
	SetType(get_member_id(id, 0x594), "unsigned int");
	SetType(get_member_id(id, 0x598), "unsigned int");
	SetType(get_member_id(id, 0x59C), "unsigned int");
	SetType(get_member_id(id, 0x5A0), "unsigned int");
	SetType(get_member_id(id, 0x5A4), "unsigned int");
	SetType(get_member_id(id, 0x5A8), "unsigned int");
	SetType(get_member_id(id, 0x5AC), "unsigned int");
	SetType(get_member_id(id, 0x5B0), "unsigned int");
	SetType(get_member_id(id, 0x5B4), "unsigned int");
	SetType(get_member_id(id, 0x5B8), "unsigned int");
	SetType(get_member_id(id, 0x5BC), "unsigned int");
	SetType(get_member_id(id, 0x5C0), "unsigned int");
	SetType(get_member_id(id, 0x5C4), "unsigned int");
	SetType(get_member_id(id, 0x5C8), "unsigned int");
	SetType(get_member_id(id, 0x5CC), "unsigned int");
	SetType(get_member_id(id, 0x5D0), "unsigned int");
	SetType(get_member_id(id, 0x5D4), "unsigned int");
	SetType(get_member_id(id, 0x5D8), "unsigned int");
	SetType(get_member_id(id, 0x5DC), "unsigned int");
	SetType(get_member_id(id, 0x5E0), "unsigned int");
	SetType(get_member_id(id, 0x5E4), "unsigned int");
	SetType(get_member_id(id, 0x5E8), "unsigned int");
	SetType(get_member_id(id, 0x5EC), "unsigned int");
	SetType(get_member_id(id, 0x5F0), "unsigned int");
	SetType(get_member_id(id, 0x5F4), "unsigned int");
	SetType(get_member_id(id, 0x5F8), "unsigned int");
	SetType(get_member_id(id, 0x5FC), "unsigned int");
	SetType(get_member_id(id, 0x600), "unsigned int");
	SetType(get_member_id(id, 0x604), "unsigned int");
	SetType(get_member_id(id, 0x608), "unsigned int");
	SetType(get_member_id(id, 0x60C), "unsigned int");
	SetType(get_member_id(id, 0x610), "unsigned int");
	SetType(get_member_id(id, 0x614), "unsigned int");
	SetType(get_member_id(id, 0x618), "unsigned int");
	SetType(get_member_id(id, 0x61C), "unsigned int");
	SetType(get_member_id(id, 0x620), "unsigned int");
	SetType(get_member_id(id, 0x624), "unsigned int");
	SetType(get_member_id(id, 0x628), "unsigned int");
	SetType(get_member_id(id, 0x62C), "unsigned int");
	SetType(get_member_id(id, 0x630), "unsigned int");
	SetType(get_member_id(id, 0x634), "unsigned int");
	SetType(get_member_id(id, 0x638), "unsigned int");
	SetType(get_member_id(id, 0x63C), "unsigned int");
	SetType(get_member_id(id, 0x640), "unsigned int");
	SetType(get_member_id(id, 0x644), "unsigned int");
	SetType(get_member_id(id, 0x648), "unsigned int");
	SetType(get_member_id(id, 0x64C), "unsigned int");
	SetType(get_member_id(id, 0x650), "unsigned int");
	SetType(get_member_id(id, 0x654), "unsigned int");
	SetType(get_member_id(id, 0x658), "unsigned int");
	SetType(get_member_id(id, 0x65C), "unsigned int");
	SetType(get_member_id(id, 0x660), "unsigned int");
	SetType(get_member_id(id, 0x664), "unsigned int");
	SetType(get_member_id(id, 0x668), "unsigned int");
	SetType(get_member_id(id, 0x66C), "unsigned int");
	SetType(get_member_id(id, 0x670), "unsigned int");
	SetType(get_member_id(id, 0x674), "unsigned int");
	SetType(get_member_id(id, 0x678), "unsigned int");
	SetType(get_member_id(id, 0x67C), "unsigned int");
	SetType(get_member_id(id, 0x680), "unsigned int");
	SetType(get_member_id(id, 0x684), "unsigned int");
	SetType(get_member_id(id, 0x688), "unsigned int");
	SetType(get_member_id(id, 0x68C), "unsigned int");
	SetType(get_member_id(id, 0x690), "unsigned int");
	SetType(get_member_id(id, 0x694), "unsigned int");
	SetType(get_member_id(id, 0x698), "unsigned int");
	SetType(get_member_id(id, 0x69C), "unsigned int");
	SetType(get_member_id(id, 0x6A0), "unsigned int");
	SetType(get_member_id(id, 0x6A4), "unsigned int");
	SetType(get_member_id(id, 0x6A8), "unsigned int");
	SetType(get_member_id(id, 0x6AC), "unsigned int");
	SetType(get_member_id(id, 0x6B0), "unsigned int");
	SetType(get_member_id(id, 0x6B4), "unsigned int");
	SetType(get_member_id(id, 0x6B8), "unsigned int");
	SetType(get_member_id(id, 0x6BC), "unsigned int");
	SetType(get_member_id(id, 0x6C0), "unsigned int");
	SetType(get_member_id(id, 0x6C4), "unsigned int");
	SetType(get_member_id(id, 0x6C8), "unsigned int");
	SetType(get_member_id(id, 0x6CC), "unsigned int");
	SetType(get_member_id(id, 0x6D0), "unsigned int");
	SetType(get_member_id(id, 0x6D4), "unsigned int");
	SetType(get_member_id(id, 0x6D8), "unsigned int");
	SetType(get_member_id(id, 0x6DC), "unsigned int");
	SetType(get_member_id(id, 0x6E0), "unsigned int");
	SetType(get_member_id(id, 0x6E4), "unsigned int");
	SetType(get_member_id(id, 0x6E8), "unsigned int");
	SetType(get_member_id(id, 0x6EC), "unsigned int");
	SetType(get_member_id(id, 0x6F0), "unsigned int");
	SetType(get_member_id(id, 0x6F4), "unsigned int");
	SetType(get_member_id(id, 0x6F8), "unsigned int");
	SetType(get_member_id(id, 0x6FC), "unsigned int");
	SetType(get_member_id(id, 0x700), "unsigned int");
	SetType(get_member_id(id, 0x704), "unsigned int");
	SetType(get_member_id(id, 0x708), "unsigned int");
	SetType(get_member_id(id, 0x70C), "unsigned int");
	SetType(get_member_id(id, 0x710), "unsigned int");
	SetType(get_member_id(id, 0x714), "unsigned int");
	SetType(get_member_id(id, 0x718), "unsigned int");
	SetType(get_member_id(id, 0x71C), "unsigned int");
	SetType(get_member_id(id, 0x720), "unsigned int");
	SetType(get_member_id(id, 0x724), "unsigned int");
	SetType(get_member_id(id, 0x728), "unsigned int");
	SetType(get_member_id(id, 0x72C), "unsigned int");
	SetType(get_member_id(id, 0x730), "unsigned int");
	SetType(get_member_id(id, 0x734), "unsigned int");
	SetType(get_member_id(id, 0x738), "unsigned int");
	SetType(get_member_id(id, 0x73C), "unsigned int");
	SetType(get_member_id(id, 0x740), "unsigned int");
	SetType(get_member_id(id, 0x744), "unsigned int");
	SetType(get_member_id(id, 0x748), "unsigned int");
	SetType(get_member_id(id, 0x74C), "unsigned int");
	SetType(get_member_id(id, 0x750), "unsigned int");
	SetType(get_member_id(id, 0x754), "unsigned int");
	SetType(get_member_id(id, 0x758), "unsigned int");
	SetType(get_member_id(id, 0x75C), "unsigned int");
	SetType(get_member_id(id, 0x760), "unsigned int");
	SetType(get_member_id(id, 0x764), "unsigned int");
	id = get_struc_id("spiflash_params");
	id = get_struc_id("bootloader_info");
	id = get_struc_id("load_context");
	SetType(get_member_id(id, 0x0), "boot_device_load_context_maybe *");
	SetType(get_member_id(id, 0x4), "boot_config_table *");
	SetType(get_member_id(id, 0x1C), "secure_load_desc *");
	SetType(get_member_id(id, 0x64), "char *");
	SetType(get_member_id(id, 0x160), "boot_context_inner_2");
	id = get_struc_id("boot_context_inner_2");
	id = get_struc_id("boot_context_inner_1");
	id = get_struc_id("handoff");
	SetType(get_member_id(id, 0xC), "HANDOFF_BOOTMODE");
	SetType(get_member_id(id, 0x14), "STORAGE_ADAPTER");
	id = get_struc_id("secure_load_desc");
	SetType(get_member_id(id, 0x14), "object_signature *");
	id = get_struc_id("main_selection");
	id = get_struc_id("handoff_bootloader_info");
	id = get_struc_id("main_populated_table");
	SetType(get_member_id(id, 0x4), "void *");
	SetType(get_member_id(id, 0x8), "void *");
	SetType(get_member_id(id, 0xC), "void *");
	SetType(get_member_id(id, 0x10), "void *");
	SetType(get_member_id(id, 0x14), "void *");
	SetType(get_member_id(id, 0x18), "void *");
	SetType(get_member_id(id, 0x1C), "void *");
	SetType(get_member_id(id, 0x20), "void *");
	id = get_struc_id("handoff_sd_info");
	id = get_struc_id("usb_request");
	SetType(get_member_id(id, 0x4), "tegra_registers_USB *");
	SetType(get_member_id(id, 0x8), "usb_control_setup");
	id = get_struc_id("usb_control_setup");
	id = get_struc_id("device_descriptor");
	id = get_struc_id("rcm_msg_t");
	id = get_struc_id("iostruct");
	id = get_struc_id("rcm_unk_state");
	id = get_struc_id("rsa_pubkey");
	id = get_struc_id("ci_ucd");
	id = get_struc_id("dtd");
	id = get_struc_id("usbd");
	SetType(get_member_id(id, 0x80), "usb_queue_head *");
	id = get_struc_id("some_key");
	id = get_struc_id("se_dma_desc");
	id = get_struc_id("tegra_registers_USB");
	SetType(get_member_id(id, 0x21C), "enum ENDPTCTRL");
	SetType(get_member_id(id, 0x220), "unsigned int[15]");
	SetType(get_member_id(id, 0x1000), "usb_queue_head[]");
	id = get_struc_id("usb_queue_head");
	id = get_struc_id("tegra_registers_USB_qh_pair");
	return id;
}

//------------------------------------------------------------------------
// Information about type information for structure members

static ApplyStrucTInfos() {
	ApplyStrucTInfos_0();
}

static Structures_0(id) {
        auto mid;

	id = add_struc(-1,"data_copy_table_struct",0);
	id = add_struc(-1,"storage_adapter",0);
	id = add_struc(-1,"storage_context",0);
	set_struc_cmt(id,"NOTE: struct might be bigger",0);
	id = add_struc(-1,"boot_device_load_context_maybe",0);
	set_struc_cmt(id,"NOTE: struct might be bigger",0);
	id = add_struc(-1,"boot_device_uart_config",0);
	id = add_struc(-1,"boot_device_sd_config",0);
	id = add_struc(-1,"boot_device_config",1);
	id = add_struc(-1,"boot_device_sd_state",0);
	id = add_struc(-1,"boot_device_shared_state",0);
	id = add_struc(-1,"boot_device_shared_state_inner_1",0);
	id = add_struc(-1,"boot_device_shared_state_inner_2",0);
	id = add_struc(-1,"badblock_table",0);
	id = add_struc(-1,"rsa_key_modulus",0);
	id = add_struc(-1,"boot_config_table",0);
	id = add_struc(-1,"object_signature",0);
	id = add_struc(-1,"hash",0);
	id = add_struc(-1,"rsa_pss_sig",0);
	id = add_struc(-1,"ecid",0);
	id = add_struc(-1,"dev_params",0);
	id = add_struc(-1,"sdmmc_params",0);
	id = add_struc(-1,"nvboot_sdram_params",0);
	id = add_struc(-1,"spiflash_params",0);
	id = add_struc(-1,"bootloader_info",0);
	id = add_struc(-1,"load_context",0);
	id = add_struc(-1,"boot_context_inner_2",0);
	id = add_struc(-1,"boot_context_inner_1",0);
	id = add_struc(-1,"handoff",0);
	id = add_struc(-1,"secure_load_desc",0);
	id = add_struc(-1,"main_selection",0);
	id = add_struc(-1,"handoff_bootloader_info",0);
	id = add_struc(-1,"main_populated_table",0);
	id = add_struc(-1,"handoff_sd_info",0);
	id = add_struc(-1,"usb_request",0);
	id = add_struc(-1,"usb_control_setup",0);
	id = add_struc(-1,"device_descriptor",0);
	id = add_struc(-1,"rcm_msg_t",0);
	id = add_struc(-1,"iostruct",0);
	id = add_struc(-1,"rcm_unk_state",0);
	id = add_struc(-1,"rsa_pubkey",0);
	id = add_struc(-1,"ci_ucd",0);
	set_struc_cmt(id,"https://lists.denx.de/pipermail/u-boot/2014-April/178178.html",0);
	id = add_struc(-1,"dtd",0);
	id = add_struc(-1,"usbd",0);
	id = add_struc(-1,"some_key",0);
	id = add_struc(-1,"se_dma_desc",0);
	id = add_struc(-1,"tegra_registers_USB",0);
	id = add_struc(-1,"usb_queue_head",0);
	id = add_struc(-1,"tegra_registers_USB_qh_pair",0);
	
	id = get_struc_id("data_copy_table_struct");
	mid = add_struc_member(id,"src",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"dst",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"len",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"function",	0XC,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	
	id = get_struc_id("storage_adapter");
	mid = add_struc_member(id,"load_config",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"verify_config",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"get_page_size",	0X8,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"init",	0XC,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"read",	0X10,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"last_read_status",	0X14,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"disable",	0X18,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"returns12_except_sata",	0X1C,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	
	id = get_struc_id("boot_device_load_context_maybe");
	mid = add_struc_member(id,"bct_block_size_log2",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"page_size_log2",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"adapter",	0X8,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	
	id = get_struc_id("storage_context");
	mid = add_struc_member(id,"field_0",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"device_load_ctx",	0X4,	0x60000400,	get_struc_id("boot_device_load_context_maybe"),	12);
	mid = add_struc_member(id,"production_aes",	0X10,	0x000400,	-1,	1);
	mid = add_struc_member(id,"production_no_pkc",	0X11,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_12",	0X12,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_13",	0X13,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_14",	0X14,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_15",	0X15,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_16",	0X16,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_17",	0X17,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_18",	0X18,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_19",	0X19,	0x000400,	-1,	1);
	mid = add_struc_member(id,"enable_fail_back",	0X1A,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_1B",	0X1B,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_1C",	0X1C,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_1D",	0X1D,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_1E",	0X1E,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_1F",	0X1F,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_20",	0X20,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_24",	0X24,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_28",	0X28,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_2C",	0X2C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_30",	0X30,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_34",	0X34,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_38",	0X38,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_3C",	0X3C,	0x20000400,	-1,	4);
	
	id = get_struc_id("boot_device_uart_config");
	mid = add_struc_member(id,"field_0",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_4",	0X4,	0x20000400,	-1,	4);
	
	id = get_struc_id("boot_device_sd_config");
	mid = add_struc_member(id,"clock_divider_inverse",	0,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_1",	0X1,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_2",	0X2,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_3",	0X3,	0x000400,	-1,	1);
	mid = add_struc_member(id,"transfer_mode",	0X4,	0x28800400,	get_enum("SD_CONFIG_DATA_TRANSFER_MODE"),	4);
	mid = add_struc_member(id,"zero",	0X8,	0x000400,	-1,	1);
	mid = add_struc_member(id,"multipage_support",	0X9,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_A",	0XA,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_B",	0XB,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_C",	0XC,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_D",	0XD,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_E",	0XE,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_F",	0XF,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_10",	0X10,	0x000400,	-1,	1);
	
	id = get_struc_id("boot_device_config");
	mid = add_struc_member(id,"i",	0,	0x60000400,	get_struc_id("boot_device_sd_config"),	17);
	
	id = get_struc_id("boot_device_sd_state");
	mid = add_struc_member(id,"shared",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"handoff_info",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"field_8",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_C",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_10",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_14",	0X14,	0x20000400,	-1,	4);
	
	id = get_struc_id("boot_device_shared_state_inner_2");
	mid = add_struc_member(id,"skip_status_check_after_transfer",	0,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_1",	0X1,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_2",	0X2,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_3",	0X3,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_10",	0X4,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_5",	0X5,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_6",	0X6,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_7",	0X7,	0x000400,	-1,	1);
	mid = add_struc_member(id,"last_read_destination",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"multipage_support",	0XC,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_19",	0XD,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_1A",	0XE,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_1B",	0XF,	0x000400,	-1,	1);
	
	id = get_struc_id("boot_device_shared_state_inner_1");
	mid = add_struc_member(id,"card_nsac",	0,	0x000400,	-1,	1);
	mid = add_struc_member(id,"card_csd_word3",	0X1,	0x000400,	-1,	1);
	mid = add_struc_member(id,"card_trans_speed",	0X2,	0x000400,	-1,	1);
	mid = add_struc_member(id,"something_based_on_card_speed",	0X3,	0x000400,	-1,	1);
	mid = add_struc_member(id,"high_speed_mode_supported",	0X4,	0x000400,	-1,	1);
	mid = add_struc_member(id,"card_has_vers_4",	0X5,	0x000400,	-1,	1);
	mid = add_struc_member(id,"card_block_size_log2",	0X6,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_1B",	0X7,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_8",	0X8,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_9",	0X9,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_A",	0XA,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_B",	0XB,	0x000400,	-1,	1);
	mid = add_struc_member(id,"zero",	0XC,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_D",	0XD,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_E",	0XE,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_F",	0XF,	0x000400,	-1,	1);
	mid = add_struc_member(id,"calculated_card_size_blocks",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"some_time_expiry",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"buffer_b",	0X18,	0x000400,	-1,	512);
	mid = add_struc_member(id,"i",	0X218,	0x60000400,	get_struc_id("boot_device_shared_state_inner_2"),	16);
	
	id = get_struc_id("boot_device_shared_state");
	mid = add_struc_member(id,"bct_stride_log2",	0,	0x000400,	-1,	1);
	set_member_cmt(id,	0,	"thing might even be bigger, used by all bootdevs",	0);
	mid = add_struc_member(id,"block_size_log2",	0X1,	0x000400,	-1,	1);
	mid = add_struc_member(id,"blocks_per_bct_stride_log2",	0X2,	0x000400,	-1,	1);
	mid = add_struc_member(id,"clock_divider_inverse",	0X3,	0x000400,	-1,	1);
	mid = add_struc_member(id,"card_address",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"transfer_mode",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"cmd_result",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"cid",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_14",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_18",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"read_status",	0X1C,	0x28800400,	get_enum("SD_INITIALIZATION_STATUS"),	4);
	mid = add_struc_member(id,"some_block_and_timeout_shenanigans",	0X20,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"init_attempts",	0X24,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_25",	0X25,	0x000400,	-1,	1);
	mid = add_struc_member(id,"address_in_bytes",	0X26,	0x000400,	-1,	1);
	mid = add_struc_member(id,"card_spec_vers",	0X27,	0x000400,	-1,	1);
	mid = add_struc_member(id,"zero",	0X28,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"four_zero",	0X2C,	0x20000400,	-1,	8);
	mid = add_struc_member(id,"csd_res",	0X34,	0x000400,	-1,	512);
	mid = add_struc_member(id,"i",	0X234,	0x60000400,	get_struc_id("boot_device_shared_state_inner_1"),	552);
	
	id = get_struc_id("badblock_table");
	mid = add_struc_member(id,"entries_used",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"virtual_blk_size_log2",	0X4,	0x000400,	-1,	1);
	mid = add_struc_member(id,"block_size_log2",	0X5,	0x000400,	-1,	1);
	mid = add_struc_member(id,"bad_blocks",	0X6,	0x000400,	-1,	512);
	mid = add_struc_member(id,"reserved",	0X206,	0x000400,	-1,	10);
	
	id = get_struc_id("rsa_key_modulus");
	mid = add_struc_member(id,"modulus",	0,	0x20000400,	-1,	256);
	
	id = get_struc_id("hash");
	mid = add_struc_member(id,"aes_hash",	0,	0x20000400,	-1,	16);
	
	id = get_struc_id("rsa_pss_sig");
	mid = add_struc_member(id,"modulus",	0,	0x000400,	-1,	64);
	
	id = get_struc_id("object_signature");
	mid = add_struc_member(id,"hash",	0,	0x60000400,	get_struc_id("hash"),	16);
	mid = add_struc_member(id,"rsa_pss_sig",	0X10,	0x60000400,	get_struc_id("rsa_pss_sig"),	64);
	mid = add_struc_member(id,"field_50",	0X50,	0x000400,	-1,	192);
	
	id = get_struc_id("ecid");
	mid = add_struc_member(id,"field_0",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_4",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_8",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_C",	0XC,	0x20000400,	-1,	4);
	
	id = get_struc_id("dev_params");
	mid = add_struc_member(id,"size",	0,	0x000400,	-1,	64);
	
	id = get_struc_id("nvboot_sdram_params");
	mid = add_struc_member(id,"memory_type",	0,	0x28800400,	get_enum("nvboot_memory_type"),	4);
	mid = add_struc_member(id,"pllm_input_divider",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"pllm_feedback_divider",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"pllm_stable_time",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"pllm_setup_control",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"pllm_post_divider",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"pllm_kcp",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"pllm_kvco",	0X1C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_bct_spare0",	0X20,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_bct_spare1",	0X24,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_bct_spare2",	0X28,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_bct_spare3",	0X2C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_bct_spare4",	0X30,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_bct_spare5",	0X34,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_bct_spare6",	0X38,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_bct_spare7",	0X3C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_bct_spare8",	0X40,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_bct_spare9",	0X44,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_bct_spare10",	0X48,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_bct_spare11",	0X4C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_bct_spare12",	0X50,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_bct_spare13",	0X54,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_clock_source",	0X58,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_clock_source_dll",	0X5C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"clk_rst_pllm_misc20_override",	0X60,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"clk_rst_pllm_misc20_override_enable",	0X64,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"clear_clock2_mc1",	0X68,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_auto_cal_interval",	0X6C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_auto_cal_config",	0X70,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_auto_cal_config2",	0X74,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_auto_cal_config3",	0X78,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_auto_cal_config4",	0X7C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_auto_cal_config5",	0X80,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_auto_cal_config6",	0X84,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_auto_cal_config7",	0X88,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_auto_cal_config8",	0X8C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_auto_cal_vref_sel0",	0X90,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_auto_cal_vref_sel1",	0X94,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_auto_cal_channel",	0X98,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_auto_cal_cfg0",	0X9C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_auto_cal_cfg1",	0XA0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_auto_cal_cfg2",	0XA4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_rx_term",	0XA8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_dq_tx_drive",	0XAC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_ca_tx_drive",	0XB0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_cmd_tx_drive",	0XB4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_auto_cal_common",	0XB8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_zcrtl",	0XBC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_auto_cal_wait",	0XC0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_xm2_comp_pad_ctrl",	0XC4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_xm2_comp_pad_ctrl2",	0XC8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_xm2_comp_pad_ctrl3",	0XCC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_adr_cfg",	0XD0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pin_program_wait",	0XD4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pin_extra_wait",	0XD8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pin_gpio_enable",	0XDC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pin_gpio",	0XE0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_timing_control_wait",	0XE4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_rc",	0XE8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_rfc",	0XEC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_rfc_pb",	0XF0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_ref_ctrl2",	0XF4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_rfc_slr",	0XF8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_ras",	0XFC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_rp",	0X100,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_r2r",	0X104,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_w2w",	0X108,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_r2w",	0X10C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_w2r",	0X110,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_r2p",	0X114,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_w2p",	0X118,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_tppd",	0X11C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_ccdmw",	0X120,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_rd_rcd",	0X124,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_wr_rcd",	0X128,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_rrd",	0X12C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_rext",	0X130,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_wext",	0X134,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_wdv",	0X138,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_wdv_chk",	0X13C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_wsv",	0X140,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_wev",	0X144,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_wdv_mask",	0X148,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_ws_duration",	0X14C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_we_duration",	0X150,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_quse",	0X154,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_quse_width",	0X158,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_ibdly",	0X15C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_obdly",	0X160,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_einput",	0X164,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_einput_duration",	0X168,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_puterm_extra",	0X16C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_puterm_width",	0X170,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_qrst",	0X174,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_qsafe",	0X178,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_rdv",	0X17C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_rdv_mask",	0X180,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_rdv_early",	0X184,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_rdv_early_mask",	0X188,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_qpop",	0X18C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_refresh",	0X190,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_burst_refresh_num",	0X194,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_prerefresh_req_cnt",	0X198,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pdex2wr",	0X19C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pdex2rd",	0X1A0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pchg2pden",	0X1A4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_act2pden",	0X1A8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_ar2pden",	0X1AC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_rw2pden",	0X1B0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_cke2pden",	0X1B4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pdex2che",	0X1B8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pdex2mrr",	0X1BC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_txsr",	0X1C0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_txsr_dll",	0X1C4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_tcke",	0X1C8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_tckesr",	0X1CC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_tpd",	0X1D0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_tfaw",	0X1D4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_trpab",	0X1D8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_tclkstable",	0X1DC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_tclkstop",	0X1E0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_trefbw",	0X1E4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_fbio_cfg5",	0X1E8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_fbio_cfg7",	0X1EC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_fbio_cfg8",	0X1F0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_cmd_mapping_cmd0_0",	0X1F4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_cmd_mapping_cmd0_1",	0X1F8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_cmd_mapping_cmd0_2",	0X1FC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_cmd_mapping_cmd1_0",	0X200,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_cmd_mapping_cmd1_1",	0X204,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_cmd_mapping_cmd1_2",	0X208,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_cmd_mapping_cmd2_0",	0X20C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_cmd_mapping_cmd2_1",	0X210,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_cmd_mapping_cmd2_2",	0X214,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_cmd_mapping_cmd3_0",	0X218,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_cmd_mapping_cmd3_1",	0X21C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_cmd_mapping_cmd3_2",	0X220,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_cmd_mapping_byte",	0X224,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_fbio_spare",	0X228,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_cfg_rsv",	0X22C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_mrs",	0X230,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_emrs",	0X234,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_emrs2",	0X238,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_emrs3",	0X23C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_mrw1",	0X240,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_mrw2",	0X244,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_mrw3",	0X248,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_mrw4",	0X24C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_mrw6",	0X250,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_mrw8",	0X254,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_mrw9",	0X258,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_mrw10",	0X25C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_mrw12",	0X260,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_mrw13",	0X264,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_mrw14",	0X268,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_mrw_extra",	0X26C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_warm_boot_mrw_extra",	0X270,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_warm_boot_extramode_reg_write_enable",	0X274,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_extramode_reg_write_enable",	0X278,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_mrw_reset_command",	0X27C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_mrw_reset_ninit_wait",	0X280,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_mrs_wait_cnt",	0X284,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_mrs_wait_cnt2",	0X288,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_cfg",	0X28C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_cfg2",	0X290,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_cfg_pipe",	0X294,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_cfg_pipe_clk",	0X298,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_fdpd_ctrl_cmd_no_ramp",	0X29C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_cfg_update",	0X2A0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_dbg",	0X2A4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_dbg_write_mux",	0X2A8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_cmd_q",	0X2AC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_mc2emc_q",	0X2B0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_dyn_self_ref_control",	0X2B4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"ahb_arbitration_xbar_ctrl_meminit_done",	0X2B8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_cfg_dig_dll",	0X2BC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_cfg_dig_dll_1",	0X2C0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_cfg_dig_dll_period",	0X2C4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_dev_select",	0X2C8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_sel_dpd_ctrl",	0X2CC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_fdpd_ctrl_dq",	0X2D0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_fdpd_ctrl_cmd",	0X2D4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_ib_vref_dq_0",	0X2D8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_ib_vref_dq_1",	0X2DC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_ib_vref_dqs_0",	0X2E0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_ib_vref_dqs_1",	0X2E4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_ib_rxrt",	0X2E8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_cfg_pipe1",	0X2EC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_cfg_pipe2",	0X2F0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_quse_ddll_rank0_0",	0X2F4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_quse_ddll_rank0_1",	0X2F8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_quse_ddll_rank0_2",	0X2FC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_quse_ddll_rank0_3",	0X300,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_quse_ddll_rank0_4",	0X304,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_quse_ddll_rank0_5",	0X308,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_quse_ddll_rank1_0",	0X30C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_quse_ddll_rank1_1",	0X310,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_quse_ddll_rank1_2",	0X314,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_quse_ddll_rank1_3",	0X318,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_quse_ddll_rank1_4",	0X31C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_quse_ddll_rank1_5",	0X320,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_ob_ddll_long_dq_rank0_0",	0X324,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_ob_ddll_long_dq_rank0_1",	0X328,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_ob_ddll_long_dq_rank0_2",	0X32C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_ob_ddll_long_dq_rank0_3",	0X330,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_ob_ddll_long_dq_rank0_4",	0X334,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_ob_ddll_long_dq_rank0_5",	0X338,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_ob_ddll_long_dq_rank1_0",	0X33C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_ob_ddll_long_dq_rank1_1",	0X340,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_ob_ddll_long_dq_rank1_2",	0X344,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_ob_ddll_long_dq_rank1_3",	0X348,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_ob_ddll_long_dq_rank1_4",	0X34C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_ob_ddll_long_dq_rank1_5",	0X350,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_ob_ddll_long_dqs_rank0_0",	0X354,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_ob_ddll_long_dqs_rank0_1",	0X358,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_ob_ddll_long_dqs_rank0_2",	0X35C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_ob_ddll_long_dqs_rank0_3",	0X360,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_ob_ddll_long_dqs_rank0_4",	0X364,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_ob_ddll_long_dqs_rank0_5",	0X368,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_ob_ddll_long_dqs_rank1_0",	0X36C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_ob_ddll_long_dqs_rank1_1",	0X370,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_ob_ddll_long_dqs_rank1_2",	0X374,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_ob_ddll_long_dqs_rank1_3",	0X378,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_ob_ddll_long_dqs_rank1_4",	0X37C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_ob_ddll_long_dqs_rank1_5",	0X380,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_ib_ddll_long_dqs_rank0_0",	0X384,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_ib_ddll_long_dqs_rank0_1",	0X388,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_ib_ddll_long_dqs_rank0_2",	0X38C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_ib_ddll_long_dqs_rank0_3",	0X390,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_ib_ddll_long_dqs_rank1_0",	0X394,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_ib_ddll_long_dqs_rank1_1",	0X398,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_ib_ddll_long_dqs_rank1_2",	0X39C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_ib_ddll_long_dqs_rank1_3",	0X3A0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_ddll_long_cmd_0",	0X3A4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_ddll_long_cmd_1",	0X3A8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_ddll_long_cmd_2",	0X3AC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_ddll_long_cmd_3",	0X3B0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_ddll_long_cmd_4",	0X3B4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_ddll_short_cmd_0",	0X3B8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_ddll_short_cmd_1",	0X3BC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_ddll_short_cmd_2",	0X3C0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"warm_boot_wait",	0X3C4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_odt_write",	0X3C8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_zcal_interval",	0X3CC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_zcal_wait_cnt",	0X3D0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_zcal_mrw_cmd",	0X3D4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_mrs_reset_dll",	0X3D8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_zcal_init_dev0",	0X3DC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_zcal_init_dev1",	0X3E0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_zcal_init_wait",	0X3E4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_zcal_warm_cold_boot_enables",	0X3E8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_mrw_lpddr2zcal_warm_boot",	0X3EC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_zqcal_ddr3_warm_boot",	0X3F0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_zqcal_lpddr4_warm_boot",	0X3F4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_zcal_warm_boot_wait",	0X3F8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_mrs_warm_boot_enable",	0X3FC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_mrs_reset_dll_wait",	0X400,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_mrs_extra",	0X404,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_warm_boot_mrs_extra",	0X408,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_emrs_ddr2_dll_enable",	0X40C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_mrs_ddr2_dll_reset",	0X410,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_emrs_ddr2_ocd_calib",	0X414,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_ddr2_wait",	0X418,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_clken_override",	0X41C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_extra_refresh_num",	0X420,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_clken_override_allwarm_boot",	0X424,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_clken_override_allwarm_boot",	0X428,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_cfg_dig_dll_period_warm_boot",	0X42C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"pmc_vddp_sel",	0X430,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"pmc_vddp_sel_wait",	0X434,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"pmc_ddr_pwr",	0X438,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"pmc_ddr_cfg",	0X43C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"pmc_io_dpd3_req",	0X440,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"pmc_io_dpd3_req_wait",	0X444,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"pmc_io_dpd4_req_wait",	0X448,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"pmc_reg_short",	0X44C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"pmc_no_io_power",	0X450,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"pmc_ddr_ctrl_wait",	0X454,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"pmc_ddr_ctrl",	0X458,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_acpd_control",	0X45C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_swizzle_rank0_byte0",	0X460,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_swizzle_rank0_byte1",	0X464,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_swizzle_rank0_byte2",	0X468,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_swizzle_rank0_byte3",	0X46C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_swizzle_rank1_byte0",	0X470,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_swizzle_rank1_byte1",	0X474,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_swizzle_rank1_byte2",	0X478,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_swizzle_rank1_byte3",	0X47C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_txdsrvttgen",	0X480,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_data_brlshft0",	0X484,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_data_brlshft1",	0X488,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_dqs_brlshft0",	0X48C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_dqs_brlshft1",	0X490,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_cmd_brlshft0",	0X494,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_cmd_brlshft1",	0X498,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_cmd_brlshft2",	0X49C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_cmd_brlshft3",	0X4A0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_quse_brlshft0",	0X4A4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_quse_brlshft1",	0X4A8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_quse_brlshft2",	0X4AC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_quse_brlshft3",	0X4B0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_dll_cfg0",	0X4B4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_dll_cfg1",	0X4B8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmc_scratch1",	0X4BC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmc_scratch2",	0X4C0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmc_scratch3",	0X4C4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_pad_cfg_ctrl",	0X4C8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_vttgen_ctrl0",	0X4CC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_vttgen_ctrl1",	0X4D0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_vttgen_ctrl2",	0X4D4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_brick_ctrl_rfu1",	0X4D8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_cmd_brick_ctrl_fdpd",	0X4DC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_brick_ctrl_rfu2",	0X4E0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_data_brick_ctrl_fdpd",	0X4E4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_bg_bias_ctrl0",	0X4E8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_data_pad_rx_ctrl",	0X4EC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_cmd_pad_rx_ctrl",	0X4F0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_data_rx_term_mode",	0X4F4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_cmd_rx_term_mode",	0X4F8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_data_pad_tx_ctrl",	0X4FC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_common_pad_tx_ctrl",	0X500,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_cmd_pad_tx_ctrl",	0X504,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_cfg3",	0X508,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_tx_pwrd0",	0X50C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_tx_pwrd1",	0X510,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_tx_pwrd2",	0X514,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_tx_pwrd3",	0X518,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_tx_pwrd4",	0X51C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_tx_pwrd5",	0X520,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_config_sample_delay",	0X524,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_brick_mapping0",	0X528,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_brick_mapping1",	0X52C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_brick_mapping2",	0X530,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_tx_sel_clk_src0",	0X534,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_tx_sel_clk_src1",	0X538,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_tx_sel_clk_src2",	0X53C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_tx_sel_clk_src3",	0X540,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_tx_sel_clk_src4",	0X544,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_tx_sel_clk_src5",	0X548,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_ddll_bypass",	0X54C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_ddll_pwrd0",	0X550,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_ddll_pwrd1",	0X554,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_ddll_pwrd2",	0X558,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_cmd_ctrl0",	0X55C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_cmd_ctrl1",	0X560,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_pmacro_cmd_ctrl2",	0X564,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_emem_adr_cfg",	0X568,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_emem_adr_cfg_dev0",	0X56C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_emem_adr_cfg_dev1",	0X570,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_emem_adr_cfg_channel_mask",	0X574,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_emem_adr_cfg_bank_mask0",	0X578,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_emem_adr_cfg_bank_mask1",	0X57C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_emem_adr_cfg_bank_mask2",	0X580,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_emem_cfg",	0X584,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_emem_arb_cfg",	0X588,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_emem_arb_outstanding_req",	0X58C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_emem_arb_refpb_hp_ctrl",	0X590,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_emem_arb_refpb_bank_ctrl",	0X594,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_emem_arb_timing_rcd",	0X598,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_emem_arb_timing_rp",	0X59C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_emem_arb_timing_rc",	0X5A0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_emem_arb_timing_ras",	0X5A4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_emem_arb_timing_faw",	0X5A8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_emem_arb_timing_rrd",	0X5AC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_emem_arb_timing_rap2pre",	0X5B0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_emem_arb_timing_wap2pre",	0X5B4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_emem_arb_timing_r2r",	0X5B8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_emem_arb_timing_w2w",	0X5BC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_emem_arb_timing_r2w",	0X5C0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_emem_arb_timing_w2r",	0X5C4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_emem_arb_timing_rfcpb",	0X5C8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_emem_arb_da_turns",	0X5CC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_emem_arb_da_covers",	0X5D0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_emem_arb_misc0",	0X5D4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_emem_arb_misc1",	0X5D8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_emem_arb_misc2",	0X5DC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_emem_arb_ring1_throttle",	0X5E0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_emem_arb_override",	0X5E4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_emem_arb_override1",	0X5E8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_emem_arb_rsv",	0X5EC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_da_cfg0",	0X5F0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_emem_arb_timing_ccdmw",	0X5F4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_clken_override",	0X5F8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_stat_control",	0X5FC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_video_protect_bom",	0X600,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_video_protect_bom_adr_hi",	0X604,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_video_protect_size_mb",	0X608,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_video_protect_vpr_override",	0X60C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_video_protect_vpr_override1",	0X610,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_video_protect_gpu_override0",	0X614,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_video_protect_gpu_override1",	0X618,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_sec_carveout_bom",	0X61C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_sec_carveout_adr_hi",	0X620,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_sec_carveout_size_mb",	0X624,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_video_protect_write_access",	0X628,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_sec_carveout_protect_write_access",	0X62C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_generalized_carveout1_bom",	0X630,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_generalized_carveout1_bom_hi",	0X634,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_generalized_carveout1_size_128kb",	0X638,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_generalized_carveout1_access0",	0X63C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_generalized_carveout1_access1",	0X640,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_generalized_carveout1_access2",	0X644,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_generalized_carveout1_access3",	0X648,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_generalized_carveout1_access4",	0X64C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_generalized_carveout1_force_internal_access0",	0X650,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_generalized_carveout1_force_internal_access1",	0X654,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_generalized_carveout1_force_internal_access2",	0X658,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_generalized_carveout1_force_internal_access3",	0X65C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_generalized_carveout1_force_internal_access4",	0X660,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_generalized_carveout1_cfg0",	0X664,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_generalized_carveout2_bom",	0X668,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_generalized_carveout2_bom_hi",	0X66C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_generalized_carveout2_size_128kb",	0X670,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_generalized_carveout2_access0",	0X674,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_generalized_carveout2_access1",	0X678,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_generalized_carveout2_access2",	0X67C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_generalized_carveout2_access3",	0X680,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_generalized_carveout2_access4",	0X684,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_generalized_carveout2_force_internal_access0",	0X688,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_generalized_carveout2_force_internal_access1",	0X68C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_generalized_carveout2_force_internal_access2",	0X690,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_generalized_carveout2_force_internal_access3",	0X694,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_generalized_carveout2_force_internal_access4",	0X698,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_generalized_carveout2_cfg0",	0X69C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_generalized_carveout3_bom",	0X6A0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_generalized_carveout3_bom_hi",	0X6A4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_generalized_carveout3_size_128kb",	0X6A8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_generalized_carveout3_access0",	0X6AC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_generalized_carveout3_access1",	0X6B0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_generalized_carveout3_access2",	0X6B4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_generalized_carveout3_access3",	0X6B8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_generalized_carveout3_access4",	0X6BC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_generalized_carveout3_force_internal_access0",	0X6C0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_generalized_carveout3_force_internal_access1",	0X6C4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_generalized_carveout3_force_internal_access2",	0X6C8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_generalized_carveout3_force_internal_access3",	0X6CC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_generalized_carveout3_force_internal_access4",	0X6D0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_generalized_carveout3_cfg0",	0X6D4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_generalized_carveout4_bom",	0X6D8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_generalized_carveout4_bom_hi",	0X6DC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_generalized_carveout4_size_128kb",	0X6E0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_generalized_carveout4_access0",	0X6E4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_generalized_carveout4_access1",	0X6E8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_generalized_carveout4_access2",	0X6EC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_generalized_carveout4_access3",	0X6F0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_generalized_carveout4_access4",	0X6F4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_generalized_carveout4_force_internal_access0",	0X6F8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_generalized_carveout4_force_internal_access1",	0X6FC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_generalized_carveout4_force_internal_access2",	0X700,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_generalized_carveout4_force_internal_access3",	0X704,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_generalized_carveout4_force_internal_access4",	0X708,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_generalized_carveout4_cfg0",	0X70C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_generalized_carveout5_bom",	0X710,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_generalized_carveout5_bom_hi",	0X714,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_generalized_carveout5_size_128kb",	0X718,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_generalized_carveout5_access0",	0X71C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_generalized_carveout5_access1",	0X720,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_generalized_carveout5_access2",	0X724,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_generalized_carveout5_access3",	0X728,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_generalized_carveout5_access4",	0X72C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_generalized_carveout5_force_internal_access0",	0X730,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_generalized_carveout5_force_internal_access1",	0X734,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_generalized_carveout5_force_internal_access2",	0X738,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_generalized_carveout5_force_internal_access3",	0X73C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_generalized_carveout5_force_internal_access4",	0X740,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_generalized_carveout5_cfg0",	0X744,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"emc_ca_training_enable",	0X748,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"swizzle_rank_byte_encode",	0X74C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"boot_rom_patch_control",	0X750,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"boot_rom_patch_data",	0X754,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_mts_carveout_bom",	0X758,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_mts_carveout_adr_hi",	0X75C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_mts_carveout_size_mb",	0X760,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mc_mts_carveout_reg_ctrl",	0X764,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("bootloader_info");
	mid = add_struc_member(id,"version",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"start_blk",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"start_page",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"length",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"load_addr",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"entry_point",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"attribute",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"signature",	0X1C,	0x60000400,	get_struc_id("object_signature"),	272);
	
	id = get_struc_id("boot_config_table");
	mid = add_struc_member(id,"badblock_table",	0,	0x60000400,	get_struc_id("badblock_table"),	528);
	mid = add_struc_member(id,"key",	0X210,	0x60000400,	get_struc_id("rsa_key_modulus"),	256);
	mid = add_struc_member(id,"signature",	0X310,	0x60000400,	get_struc_id("object_signature"),	272);
	mid = add_struc_member(id,"secure_provisioning_key_number_insecure",	0X420,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"aes_key",	0X424,	0x000400,	-1,	32);
	mid = add_struc_member(id,"customer_data",	0X444,	0x000400,	-1,	196);
	mid = add_struc_member(id,"odm_data",	0X508,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"reserved_1",	0X50C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"random_aes_blk",	0X510,	0x60000400,	get_struc_id("hash"),	16);
	mid = add_struc_member(id,"unique_chip_id",	0X520,	0x60000400,	get_struc_id("ecid"),	16);
	mid = add_struc_member(id,"boot_data_version",	0X530,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"block_size_log2",	0X534,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"page_size_log2",	0X538,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"partition_size",	0X53C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"num_param_set",	0X540,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dev_type",	0X544,	0x28800400,	get_enum("STORAGE_ADAPTER"),	4);
	mid = add_struc_member(id,"dev_params",	0X548,	0x60000400,	get_struc_id("dev_params"),	64);
	mid = add_struc_member(id,"num_sdram_sets",	0X588,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"sdram_params",	0X58C,	0x60000400,	get_struc_id("nvboot_sdram_params"),	7584);
	mid = add_struc_member(id,"num_bootloaders",	0X232C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"bootloader_info",	0X2330,	0x60000400,	get_struc_id("bootloader_info"),	1200);
	mid = add_struc_member(id,"enable_fail_back",	0X27E0,	0x000400,	-1,	1);
	mid = add_struc_member(id,"secure_debug_control",	0X27E1,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"secure_provisioning_key_number_secure",	0X27E5,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"hardkey_index",	0X27E8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_27EC",	0X27EC,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_27ED",	0X27ED,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_27EE",	0X27EE,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_27EF",	0X27EF,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_27F0",	0X27F0,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_27F1",	0X27F1,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_27F2",	0X27F2,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_27F3",	0X27F3,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_27F4",	0X27F4,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_27F5",	0X27F5,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_27F6",	0X27F6,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_27F7",	0X27F7,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_27F8",	0X27F8,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_27F9",	0X27F9,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_27FA",	0X27FA,	0x000400,	-1,	1);
	
	id = get_struc_id("sdmmc_params");
	mid = add_struc_member(id,"clock_divider",	0,	0x000400,	-1,	1);
	mid = add_struc_member(id,"data_width",	0X1,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"max_power_class_supported",	0X5,	0x000400,	-1,	1);
	mid = add_struc_member(id,"multi_page_support",	0X6,	0x000400,	-1,	1);
	
	id = get_struc_id("spiflash_params");
	mid = add_struc_member(id,"clock_source",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"clock_divider",	0X4,	0x000400,	-1,	1);
	mid = add_struc_member(id,"read_command_type_fast",	0X5,	0x000400,	-1,	1);
	mid = add_struc_member(id,"page_size_2k_or_16k",	0X6,	0x000400,	-1,	1);
	
	id = get_struc_id("boot_context_inner_2");
	mid = add_struc_member(id,"field_0",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_4",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_8",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_C",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_10",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_14",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"need_first_page",	0X18,	0x000400,	-1,	1);
	mid = add_struc_member(id,"production_aes",	0X19,	0x000400,	-1,	1);
	mid = add_struc_member(id,"production_no_pkc",	0X1A,	0x000400,	-1,	1);
	mid = add_struc_member(id,"perform_aes_decryption",	0X1B,	0x000400,	-1,	1);
	mid = add_struc_member(id,"pkc_disabled",	0X1C,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_1D",	0X1D,	0x000400,	-1,	1);
	mid = add_struc_member(id,"keyindex_decryption",	0X1E,	0x000400,	-1,	1);
	mid = add_struc_member(id,"keyindex_1",	0X1F,	0x000400,	-1,	1);
	
	id = get_struc_id("boot_context_inner_1");
	mid = add_struc_member(id,"desc_count",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"current_desc_id",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"cur_master_block",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"cur_master_page",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"total_pages_read",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"cur_recovery_block",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"cur_recovery_page",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk_a",	0X1C,	0x000400,	-1,	1);
	mid = add_struc_member(id,"unk_d",	0X1D,	0x000400,	-1,	1);
	mid = add_struc_member(id,"unk_b",	0X1E,	0x000400,	-1,	1);
	mid = add_struc_member(id,"unk_c",	0X1F,	0x000400,	-1,	1);
	mid = add_struc_member(id,"buffer_dst_page_num",	0X20,	0x000400,	-1,	1);
	mid = add_struc_member(id,"copy_src_pagenum",	0X21,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_22",	0X22,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_23",	0X23,	0x000400,	-1,	1);
	
	id = get_struc_id("load_context");
	mid = add_struc_member(id,"device_load_ctx",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"existing_bct",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"pagesize",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"pagesize_log2",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"pages_left_from_master",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"pages_left",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"start_pagenum_of_signed_data",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"load_descs",	0X1C,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"i",	0X20,	0x60000400,	get_struc_id("boot_context_inner_1"),	36);
	mid = add_struc_member(id,"field_44",	0X44,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_48",	0X48,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_4C",	0X4C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_50",	0X50,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_54",	0X54,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_58",	0X58,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_5C",	0X5C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_60",	0X60,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"loadaddr",	0X64,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"aes_hash",	0X68,	0x20000400,	-1,	16);
	mid = add_struc_member(id,"field_78",	0X78,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_7C",	0X7C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_80",	0X80,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_84",	0X84,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_88",	0X88,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_8C",	0X8C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_90",	0X90,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_94",	0X94,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_98",	0X98,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_9C",	0X9C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_A0",	0XA0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_A4",	0XA4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_A8",	0XA8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_AC",	0XAC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_B0",	0XB0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_B4",	0XB4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_B8",	0XB8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_BC",	0XBC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_C0",	0XC0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_C4",	0XC4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_C8",	0XC8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_CC",	0XCC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_D0",	0XD0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_D4",	0XD4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_D8",	0XD8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_DC",	0XDC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_E0",	0XE0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_E4",	0XE4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_E8",	0XE8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_EC",	0XEC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_F0",	0XF0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_F4",	0XF4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_F8",	0XF8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_FC",	0XFC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_100",	0X100,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_104",	0X104,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_108",	0X108,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_10C",	0X10C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_110",	0X110,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_114",	0X114,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_118",	0X118,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_11C",	0X11C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_120",	0X120,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_124",	0X124,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_128",	0X128,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_12C",	0X12C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_130",	0X130,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_134",	0X134,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_138",	0X138,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_13C",	0X13C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_140",	0X140,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_144",	0X144,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_148",	0X148,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_14C",	0X14C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_150",	0X150,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_154",	0X154,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_158",	0X158,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_15C",	0X15C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"j",	0X160,	0x60000400,	get_struc_id("boot_context_inner_2"),	32);
	
	id = get_struc_id("handoff_bootloader_info");
	mid = add_struc_member(id,"field_0",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"failed_at_block",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"failed_at_page",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_C",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_10",	0X10,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_11",	0X11,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_12",	0X12,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_13",	0X13,	0x000400,	-1,	1);
	mid = add_struc_member(id,"failed",	0X14,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_15",	0X15,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_16",	0X16,	0x000400,	-1,	1);
	mid = add_struc_member(id,"used_as_backup",	0X17,	0x000400,	-1,	1);
	
	id = get_struc_id("handoff");
	mid = add_struc_member(id,"version1",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"version2",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"version3",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"bootmode",	0XC,	0x28800400,	get_enum("HANDOFF_BOOTMODE"),	4);
	mid = add_struc_member(id,"field_10",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"adapter_id",	0X14,	0x28800400,	get_enum("STORAGE_ADAPTER"),	4);
	mid = add_struc_member(id,"badblocks_used",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_1C",	0X1C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"time_elapsed_a",	0X20,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"time_elapsed_b",	0X24,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"oscillator_frequency",	0X28,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"booted_from_storage",	0X2C,	0x000400,	-1,	1);
	mid = add_struc_member(id,"dram_initialized",	0X2D,	0x000400,	-1,	1);
	mid = add_struc_member(id,"recovery_from_scratch0",	0X2E,	0x000400,	-1,	1);
	mid = add_struc_member(id,"in_fail_back_mode",	0X2F,	0x000400,	-1,	1);
	mid = add_struc_member(id,"failback_and_ver_different",	0X30,	0x000400,	-1,	1);
	mid = add_struc_member(id,"patch_related",	0X31,	0x000400,	-1,	1);
	mid = add_struc_member(id,"bct_loaded",	0X32,	0x000400,	-1,	1);
	mid = add_struc_member(id,"bct_load_failures",	0X33,	0x000400,	-1,	5);
	mid = add_struc_member(id,"field_38",	0X38,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_3C",	0X3C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"bct_start_block",	0X40,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"bct_start_page",	0X44,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"bct_length",	0X48,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"bct_start",	0X4C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"bootloader_info",	0X50,	0x60000400,	get_struc_id("handoff_bootloader_info"),	96);
	mid = add_struc_member(id,"field_B4",	0XB4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_B8",	0XB8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_BC",	0XBC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_C0",	0XC0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_C4",	0XC4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_C8",	0XC8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_CC",	0XCC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_D0",	0XD0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_D4",	0XD4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_D8",	0XD8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_DC",	0XDC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_E0",	0XE0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_E4",	0XE4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_E8",	0XE8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_EC",	0XEC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"bct_end_maybe",	0XF0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_F4",	0XF4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_F8",	0XF8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_FC",	0XFC,	0x20000400,	-1,	4);
	
	id = get_struc_id("secure_load_desc");
	mid = add_struc_member(id,"bootloader_id",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"start_blk",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"start_page",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"length_bytes",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"start_of_signed_data_bytes",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"signature",	0X14,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	
	id = get_struc_id("main_selection");
	mid = add_struc_member(id,"recovery_from_scratch0",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"recovery_from_buttons",	0X4,	0x20000400,	-1,	4);
	
	id = get_struc_id("main_populated_table");
	mid = add_struc_member(id,"mode",	0,	0x000400,	-1,	1);
	mid = add_struc_member(id,"initialized",	0X1,	0x000400,	-1,	1);
	mid = add_struc_member(id,"sent_hwinfo",	0X2,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_3",	0X3,	0x000400,	-1,	1);
	mid = add_struc_member(id,"init",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"run_ep0_stuff",	0X8,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"read_ep1_out",	0XC,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"get_ep1_out_recvd_bytes",	0X10,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"read_ep1_out_sync",	0X14,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"write_ep1_in",	0X18,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"get_ep1_in_writing",	0X1C,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"write_ep1_in_sync",	0X20,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"reset_ep1",	0X24,	0x20000400,	-1,	4);
	
	id = get_struc_id("handoff_sd_info");
	mid = add_struc_member(id,"data_bus_width",	0,	0x000400,	-1,	1);
	mid = add_struc_member(id,"voltage_range",	0X1,	0x000400,	-1,	1);
	mid = add_struc_member(id,"disable_boot_mode",	0X2,	0x000400,	-1,	1);
	mid = add_struc_member(id,"ddr_mode_selection",	0X3,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_4",	0X4,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_5",	0X5,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_6",	0X6,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_7",	0X7,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_8",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"transfer_mode",	0XC,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_D",	0XD,	0x000400,	-1,	1);
	mid = add_struc_member(id,"calibrated",	0XE,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_F",	0XF,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_10",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_14",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_18",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_1C",	0X1C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_20",	0X20,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_24",	0X24,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_28",	0X28,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_29",	0X29,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_2A",	0X2A,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_2B",	0X2B,	0x000400,	-1,	1);
	
	id = get_struc_id("usb_control_setup");
	mid = add_struc_member(id,"bmRequestType",	0,	0x000400,	-1,	1);
	mid = add_struc_member(id,"bRequest",	0X1,	0x000400,	-1,	1);
	mid = add_struc_member(id,"wValue",	0X2,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"wIndex",	0X4,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"wLength",	0X6,	0x10000400,	-1,	2);
	
	id = get_struc_id("usb_request");
	mid = add_struc_member(id,"port_speed",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"hw_regs",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"control_setup",	0X8,	0x60000400,	get_struc_id("usb_control_setup"),	8);
	mid = add_struc_member(id,"field_10",	0X10,	0x000400,	-1,	1);
	mid = add_struc_member(id,"configuration",	0X12,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_13",	0X13,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_14",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_18",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_1C",	0X1C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_20",	0X20,	0x20000400,	-1,	4);
	
	id = get_struc_id("device_descriptor");
	mid = add_struc_member(id,"bLength",	0,	0x000400,	-1,	1);
	mid = add_struc_member(id,"bDescriptorType",	0X1,	0x000400,	-1,	1);
	mid = add_struc_member(id,"bcdUSB",	0X2,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"bDeviceClass",	0X4,	0x000400,	-1,	1);
	mid = add_struc_member(id,"bDeviceSubClass",	0X5,	0x000400,	-1,	1);
	mid = add_struc_member(id,"bDeviceProtocol",	0X6,	0x000400,	-1,	1);
	mid = add_struc_member(id,"bMaxPacketSize",	0X7,	0x000400,	-1,	1);
	mid = add_struc_member(id,"idVendor",	0X8,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"idProduct",	0XA,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"bcdDevice",	0XC,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"iManufacturer",	0XE,	0x000400,	-1,	1);
	mid = add_struc_member(id,"iProduct",	0XF,	0x000400,	-1,	1);
	mid = add_struc_member(id,"iSerialNumber",	0X10,	0x000400,	-1,	1);
	mid = add_struc_member(id,"bNumConfigurations",	0X11,	0x000400,	-1,	1);
	
	id = get_struc_id("rcm_msg_t");
	mid = add_struc_member(id,"len_insecure",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"keyindex",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_8",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_C",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_10",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_14",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_18",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_1C",	0X1C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_20",	0X20,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_24",	0X24,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"modulus",	0X28,	0x000400,	-1,	256);
	mid = add_struc_member(id,"something_crypt",	0X128,	0x000400,	-1,	16);
	mid = add_struc_member(id,"signature",	0X138,	0x000400,	-1,	256);
	mid = add_struc_member(id,"something",	0X238,	0x000400,	-1,	16);
	mid = add_struc_member(id,"ecid",	0X248,	0x000400,	-1,	16);
	mid = add_struc_member(id,"opcode",	0X258,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"len_secure",	0X25C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"payload_len",	0X260,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"rcm_version",	0X264,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"args",	0X268,	0x000400,	-1,	48);
	mid = add_struc_member(id,"field_298",	0X298,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"another_keyindex",	0X29C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"padding",	0X2A0,	0x000400,	-1,	8);
	
	id = get_struc_id("iostruct");
	mid = add_struc_member(id,"field_0",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_4",	0X4,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"field_6",	0X6,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_7",	0X7,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_8",	0X8,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"field_A",	0XA,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"callback",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"arg_zero",	0X10,	0x20000400,	-1,	4);
	
	id = get_struc_id("rcm_unk_state");
	mid = add_struc_member(id,"field_0",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_4",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_8",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_C",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_10",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"valid_pubkey_loaded",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_18",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"usb_buf_ix",	0X1C,	0x20000400,	-1,	4);
	
	id = get_struc_id("rsa_pubkey");
	mid = add_struc_member(id,"modulus",	0,	0x000400,	-1,	256);
	mid = add_struc_member(id,"exponent",	0X100,	0x000400,	-1,	256);
	
	id = get_struc_id("ci_ucd");
	mid = add_struc_member(id,"field_0",	0,	0x000400,	-1,	304);
	mid = add_struc_member(id,"usbcmd",	0X130,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"usbsts",	0X134,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_138",	0X138,	0x000400,	-1,	12);
	mid = add_struc_member(id,"devaddr",	0X144,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"epinitaddr",	0X148,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_14C",	0X14C,	0x20000400,	-1,	40);
	mid = add_struc_member(id,"portsc",	0X174,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_178",	0X178,	0x20000400,	-1,	60);
	mid = add_struc_member(id,"hostpc1_devlc",	0X1B4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_1B8",	0X1B8,	0x20000400,	-1,	64);
	mid = add_struc_member(id,"usbmode",	0X1F8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_1FC",	0X1FC,	0x20000400,	-1,	12);
	mid = add_struc_member(id,"epsetupstat",	0X208,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"epprime",	0X20C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"epflush",	0X210,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"epstat",	0X214,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"epcomp",	0X218,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"epctrl",	0X21C,	0x20000400,	-1,	64);
	
	id = get_struc_id("dtd");
	mid = add_struc_member(id,"next",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"info",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"page0",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"page1",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"page2",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"page3",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"page4",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"reserved",	0X1C,	0x20000400,	-1,	4);
	
	id = get_struc_id("usbd");
	mid = add_struc_member(id,"dtds",	0,	0x60000400,	get_struc_id("dtd"),	128);
	mid = add_struc_member(id,"qhs",	0X80,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"field_84",	0X84,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_88",	0X88,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_8C",	0X8C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_90",	0X90,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_94",	0X94,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_98",	0X98,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"ep1_bytes_read",	0X9C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"ep1_bytes_to_write",	0XA0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_A4",	0XA4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_A8",	0XA8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_AC",	0XAC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_B0",	0XB0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_B4",	0XB4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_B8",	0XB8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_BC",	0XBC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_C0",	0XC0,	0x20000400,	-1,	4);
	
	id = get_struc_id("some_key");
	mid = add_struc_member(id,"field_0",	0,	0x000400,	-1,	32);
	
	id = get_struc_id("se_dma_desc");
	mid = add_struc_member(id,"num_descs",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"addr",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"data_len",	0X8,	0x20000400,	-1,	4);
	
	id = get_struc_id("usb_queue_head");
	mid = add_struc_member(id,"max_pkt_length",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"curr_dtd_ptr",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"next_dtd_ptr",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"size_ioc_int_sts",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"buff_ptr0",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"buff_ptr1",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"buff_ptr2",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"buff_ptr3",	0X1C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"buff_ptr4",	0X20,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"res1",	0X24,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"setup_buffer",	0X28,	0x000400,	-1,	8);
	mid = add_struc_member(id,"res2",	0X30,	0x20000400,	-1,	16);
	
	id = get_struc_id("tegra_registers_USB");
	mid = add_struc_member(id,"field_0",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_4",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_8",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_C",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_10",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_14",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_18",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_1C",	0X1C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_20",	0X20,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_24",	0X24,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_28",	0X28,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_2C",	0X2C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_30",	0X30,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_34",	0X34,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_38",	0X38,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_3C",	0X3C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_40",	0X40,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_44",	0X44,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_48",	0X48,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_4C",	0X4C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_50",	0X50,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_54",	0X54,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_58",	0X58,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_5C",	0X5C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_60",	0X60,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_64",	0X64,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_68",	0X68,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_6C",	0X6C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_70",	0X70,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_74",	0X74,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_78",	0X78,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_7C",	0X7C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_80",	0X80,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_84",	0X84,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_88",	0X88,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_8C",	0X8C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_90",	0X90,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_94",	0X94,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_98",	0X98,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_9C",	0X9C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_A0",	0XA0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_A4",	0XA4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_A8",	0XA8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_AC",	0XAC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_B0",	0XB0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_B4",	0XB4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_B8",	0XB8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_BC",	0XBC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_C0",	0XC0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_C4",	0XC4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_C8",	0XC8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_CC",	0XCC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_D0",	0XD0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_D4",	0XD4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_D8",	0XD8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_DC",	0XDC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_E0",	0XE0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_E4",	0XE4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_E8",	0XE8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_EC",	0XEC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_F0",	0XF0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_F4",	0XF4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_F8",	0XF8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_FC",	0XFC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_100",	0X100,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_104",	0X104,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_108",	0X108,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_10C",	0X10C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_110",	0X110,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_114",	0X114,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_118",	0X118,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_11C",	0X11C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_120",	0X120,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_124",	0X124,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_128",	0X128,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_12C",	0X12C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"USB2_CONTROLLER_USB2D_USBCMD_0",	0X130,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"USB2_CONTROLLER_USB2D_USBSTS_0",	0X134,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"USB2_CONTROLLER_USB2D_USBINTR_0",	0X138,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_13C",	0X13C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_140",	0X140,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"USB2_CONTROLLER_USB2D_PERIODICLISTBASE_0",	0X144,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"USB2_CONTROLLER_USB2D_ASYNCLISTADDR_0",	0X148,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_14C",	0X14C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_150",	0X150,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_154",	0X154,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_158",	0X158,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_15C",	0X15C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_160",	0X160,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_164",	0X164,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_168",	0X168,	0x20000400,	-1,	4);
	return id;
}

static Structures_1(id) {
        auto mid;

	mid = add_struc_member(id,"field_16C",	0X16C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_170",	0X170,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_174",	0X174,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_178",	0X178,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_17C",	0X17C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_180",	0X180,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_184",	0X184,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_188",	0X188,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_18C",	0X18C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_190",	0X190,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_194",	0X194,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_198",	0X198,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_19C",	0X19C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_1A0",	0X1A0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_1A4",	0X1A4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_1A8",	0X1A8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_1AC",	0X1AC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_1B0",	0X1B0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"USB2_CONTROLLER_USB2D_HOSTPC1_DEVLC_0",	0X1B4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_1B8",	0X1B8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_1BC",	0X1BC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_1C0",	0X1C0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_1C4",	0X1C4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_1C8",	0X1C8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_1CC",	0X1CC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_1D0",	0X1D0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_1D4",	0X1D4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_1D8",	0X1D8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_1DC",	0X1DC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_1E0",	0X1E0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_1E4",	0X1E4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_1E8",	0X1E8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_1EC",	0X1EC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_1F0",	0X1F0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"USB2_CONTROLLER_USB2D_OTGSC_0",	0X1F4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"USB2_CONTROLLER_USB2D_USBMODE_0",	0X1F8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_1FC",	0X1FC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"USB2_CONTROLLER_1_USB2D_ENDPTNAK_0",	0X200,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_204",	0X204,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"USB2_CONTROLLER_USB2D_ENDPTSETUPSTAT_0",	0X208,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"USB2_CONTROLLER_USB2D_ENDPTPRIME_0",	0X20C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"USB2_CONTROLLER_USB2D_ENDPTFLUSH_0",	0X210,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"USB2_CONTROLLER_USB2D_ENDPTSTATUS_0",	0X214,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0",	0X218,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"USB2_CONTROLLER_USB2D_ENDPTCTRL0_0",	0X21C,	0x28800400,	get_enum("ENDPTCTRL"),	4);
	mid = add_struc_member(id,"USB2_CONTROLLER_USB2D_ENDPTCTRLn_0",	0X220,	0x20000400,	-1,	60);
	mid = add_struc_member(id,"pad1",	0X25C,	0x20000400,	-1,	420);
	mid = add_struc_member(id,"USB1_IF_USB_SUSP_CTRL_0",	0X400,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_404",	0X404,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_408",	0X408,	0x20000400,	-1,	3064);
	mid = add_struc_member(id,"USB2_QH_USB2D_QH",	0X1000,	0x60000400,	get_struc_id("usb_queue_head"),	2048);
	
	id = get_struc_id("tegra_registers_USB_qh_pair");
	mid = add_struc_member(id,"ep_out",	0,	0x60000400,	get_struc_id("usb_queue_head"),	64);
	mid = add_struc_member(id,"ep_in",	0X40,	0x60000400,	get_struc_id("usb_queue_head"),	64);
	return id;
}

//------------------------------------------------------------------------
// Information about structure types

static Structures(void) {
        auto id;
        begin_type_updating(UTP_STRUCT);
	id = Structures_0(id);
	id = Structures_1(id);
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_0(void) {
        auto x;
#define id x

	update_extra_cmt		(0X100000,	E_PREV + 0,	"; File Name   : C:\\Users\\User\\Desktop\\rom.bin");
	update_extra_cmt		(0X100000,	E_PREV + 1,	"; Format      : Binary file");
	update_extra_cmt		(0X100000,	E_PREV + 2,	"; Base Address: 0000h Range: 100000h - 118000h Loaded length: 18000h");
	create_insn	(0X100000);
	set_name	(0X100000,	"vec_reset");
	create_insn	(0X100004);
	set_name	(0X100004,	"vec_undefined_instruction");
	create_insn	(0X100008);
	set_name	(0X100008,	"vec_software_int");
	create_insn	(0X10000C);
	set_name	(0X10000C,	"vec_prefetch_abort");
	create_insn	(0X100010);
	set_name	(0X100010,	"vec_data_abort");
	create_insn	(0X100014);
	set_name	(0X100014,	"vec_reserved");
	create_insn	(0X100018);
	set_name	(0X100018,	"vec_irq");
	create_insn	(0X10001C);
	set_name	(0X10001C,	"vec_fiq");
	create_dword	(0X100034);
	create_dword	(0X100038);
	create_dword	(0X10003C);
	create_insn	(x=0X100040);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X100040,	"reset");
	create_insn	(x=0X100060);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X100060,	"default_int");
	create_insn	(x=0X100064);
	op_stkvar	(x,	1);
	create_insn	(x=0X10006C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X100070);
	op_stkvar	(x,	1);
	create_insn	(x=0X100084);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X100094);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X100098);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X10009C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1000A0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1000A4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1000A8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X1000AC);
	set_name	(0X1000AC,	"get_some_pointer_to_pll_params");
	create_insn	(x=0X1000B2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1000B6);
	create_insn	(0X1000BA);
	set_name	(0X1000BA,	"get_oscillator_freq");
	create_insn	(x=0X1000BC);
	op_plain_offset	(x,	1,	0X60006040);
	op_plain_offset	(x,	129,	0X60006040);
	create_insn	(0X1000D4);
	set_name	(0X1000D4,	"clock_set_enable");
	create_insn	(x=0X1000E0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1000F8);
	create_insn	(x=0X1000FE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X100100);
	op_plain_offset	(x,	1,	0X60006400);
	op_plain_offset	(x,	129,	0X60006400);
	create_insn	(x=0X10010E);
	op_plain_offset	(x,	1,	0X60006400);
	op_plain_offset	(x,	129,	0X60006400);
	set_cmt	(0X100110,	"us",	0);
	create_insn	(0X10011C);
	set_name	(0X10011C,	"set_oscillator_freq");
	create_insn	(x=0X10011E);
	op_plain_offset	(x,	1,	0X60006040);
	op_plain_offset	(x,	129,	0X60006040);
	create_insn	(x=0X100128);
	op_plain_offset	(x,	1,	0X60006040);
	op_plain_offset	(x,	129,	0X60006040);
	create_insn	(x=0X10012C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X10012C,	"pllc4_wait_for_lock");
	create_insn	(x=0X100130);
	op_plain_offset	(x,	1,	0X60005000);
	op_plain_offset	(x,	129,	0X60005000);
	create_insn	(x=0X100132);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X100134);
	op_plain_offset	(x,	1,	0X60006580);
	op_plain_offset	(x,	129,	0X60006580);
	set_cmt	(0X100144,	"us",	0);
	create_insn	(0X100144);
	create_insn	(0X10014E);
	create_insn	(0X100152);
	set_name	(0X100152,	"configure_pll");
	create_insn	(x=0X100158);
	op_plain_offset	(x,	1,	0X60006580);
	op_plain_offset	(x,	129,	0X60006580);
	create_insn	(x=0X100164);
	op_plain_offset	(x,	1,	0X60006580);
	op_plain_offset	(x,	129,	0X60006580);
	create_insn	(x=0X100166);
	op_plain_offset	(x,	1,	0X60006580);
	op_plain_offset	(x,	129,	0X60006580);
	create_insn	(x=0X10016A);
	op_plain_offset	(x,	1,	0X60006580);
	op_plain_offset	(x,	129,	0X60006580);
	create_insn	(x=0X10016C);
	op_plain_offset	(x,	1,	0X60006580);
	op_plain_offset	(x,	129,	0X60006580);
	create_insn	(x=0X100172);
	op_plain_offset	(x,	1,	0X60006580);
	op_plain_offset	(x,	129,	0X60006580);
	set_cmt	(0X100174,	"result",	0);
	create_insn	(x=0X10017A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10017E);
	op_plain_offset	(x,	1,	0X60006580);
	op_plain_offset	(x,	129,	0X60006580);
	create_insn	(x=0X100180);
	op_plain_offset	(x,	1,	0X60006580);
	op_plain_offset	(x,	129,	0X60006580);
	create_insn	(x=0X10019E);
	op_stkvar	(x,	1);
	create_insn	(x=0X1001A6);
	op_plain_offset	(x,	1,	0X60006580);
	op_plain_offset	(x,	129,	0X60006580);
	create_insn	(x=0X1001AA);
	op_plain_offset	(x,	1,	0X60006580);
	op_plain_offset	(x,	129,	0X60006580);
	create_insn	(x=0X1001AE);
	op_plain_offset	(x,	1,	0X60005000);
	op_plain_offset	(x,	129,	0X60005000);
	create_insn	(x=0X1001B0);
	op_stkvar	(x,	1);
	create_insn	(0X1001C0);
	set_name	(0X1001C0,	"clock_detect_oscillator_frequency");
	create_insn	(x=0X1001C6);
	op_plain_offset	(x,	1,	0X60006040);
	op_plain_offset	(x,	129,	0X60006040);
	create_insn	(x=0X1001C8);
	op_plain_offset	(x,	1,	0X60006040);
	op_plain_offset	(x,	129,	0X60006040);
	create_insn	(0X1001E0);
	create_insn	(0X1001EE);
	create_insn	(0X1001FC);
	create_insn	(0X10020A);
	create_insn	(0X10021A);
	create_insn	(0X10022A);
	create_insn	(0X100236);
	create_insn	(0X10023A);
	set_name	(0X10023A,	"set_us_timer_config");
	create_insn	(0X100242);
	create_insn	(x=0X10024A);
	op_plain_offset	(x,	1,	0X60005000);
	op_plain_offset	(x,	129,	0X60005000);
	create_dword	(0X100250);
	create_dword	(x=0X100254);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X100258);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X10025C);
	create_dword	(x=0X100260);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X100264);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X100268);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X10026C);
	create_dword	(0X100270);
	create_dword	(0X100274);
	create_dword	(0X100278);
	create_dword	(0X10027C);
	create_insn	(0X100286);
	set_name	(0X100286,	"get_fusebit_aec_2");
	create_insn	(x=0X100288);
	op_plain_offset	(x,	1,	0X7000FAC0);
	op_plain_offset	(x,	129,	0X7000FAC0);
	create_insn	(0X100294);
	set_name	(0X100294,	"fuse_is_fa");
	create_insn	(x=0X100296);
	op_plain_offset	(x,	1,	0X7000F940);
	op_plain_offset	(x,	129,	0X7000F940);
	create_insn	(0X1002A0);
	set_name	(0X1002A0,	"fuse_is_preprod");
	create_insn	(0X1002C2);
	create_insn	(0X1002C6);
	set_name	(0X1002C6,	"get_hw_info");
	create_insn	(x=0X1002CA);
	op_plain_offset	(x,	1,	0X60006040);
	op_plain_offset	(x,	129,	0X60006040);
	create_insn	(x=0X1002D0);
	op_plain_offset	(x,	1,	0X60006040);
	op_plain_offset	(x,	129,	0X60006040);
	create_insn	(x=0X1002DE);
	op_plain_offset	(x,	1,	0X7000FA00);
	op_plain_offset	(x,	129,	0X7000FA00);
	create_insn	(x=0X1002E2);
	op_plain_offset	(x,	1,	0X7000FA00);
	op_plain_offset	(x,	129,	0X7000FA00);
	create_insn	(x=0X1002E4);
	op_plain_offset	(x,	1,	0X7000FA00);
	op_plain_offset	(x,	129,	0X7000FA00);
	create_insn	(x=0X1002EA);
	op_plain_offset	(x,	1,	0X7000FA00);
	op_plain_offset	(x,	129,	0X7000FA00);
	create_insn	(x=0X1002F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X1002F2);
	op_plain_offset	(x,	1,	0X7000FA00);
	op_plain_offset	(x,	129,	0X7000FA00);
	create_insn	(x=0X1002F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X1002FA);
	op_plain_offset	(x,	1,	0X7000FA00);
	op_plain_offset	(x,	129,	0X7000FA00);
	create_insn	(x=0X1002FC);
	op_plain_offset	(x,	1,	0X7000FA00);
	op_plain_offset	(x,	129,	0X7000FA00);
	create_insn	(x=0X100306);
	op_plain_offset	(x,	1,	0X60006040);
	op_plain_offset	(x,	129,	0X60006040);
	create_insn	(x=0X10030A);
	op_stkvar	(x,	1);
	create_insn	(x=0X100310);
	op_stkvar	(x,	1);
	create_insn	(0X10033A);
	set_name	(0X10033A,	"fuse_is_odm");
	create_insn	(x=0X100340);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X100344);
	op_plain_offset	(x,	1,	0X7000F980);
	op_plain_offset	(x,	129,	0X7000F980);
	create_insn	(0X100354);
	create_insn	(0X100358);
	set_name	(0X100358,	"fuse_is_devel");
	create_insn	(x=0X10035E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X100370);
	create_dword	(x=0X100374);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X100378);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X10037C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X100380);
	create_insn	(0X100388);
	create_insn	(0X1003C0);
	create_insn	(x=0X1003C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X1003DE);
	op_stkvar	(x,	1);
	create_insn	(x=0X1003E8);
	op_stkvar	(x,	1);
	create_insn	(0X1003F2);
	create_insn	(x=0X100414);
	op_stkvar	(x,	1);
	create_insn	(x=0X10041E);
	op_stkvar	(x,	1);
	create_insn	(x=0X100420);
	op_stkvar	(x,	1);
	create_insn	(0X10043E);
	create_insn	(x=0X100446);
	op_stkvar	(x,	1);
	create_insn	(0X10046A);
	create_insn	(0X10046E);
	create_insn	(0X100480);
	create_insn	(0X100492);
	set_name	(0X100492,	"apply_patchset_maybe");
	create_insn	(x=0X100496);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1004A4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1004AA);
	create_insn	(x=0X1004B8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1004DE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1004E0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1004E6);
	create_insn	(0X100508);
	create_insn	(0X10051A);
	create_insn	(x=0X100522);
	op_stkvar	(x,	1);
	create_insn	(x=0X100526);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X10052C);
	op_stkvar	(x,	1);
	create_insn	(x=0X100530);
	op_stkvar	(x,	1);
	create_insn	(x=0X100534);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X100542);
	op_stkvar	(x,	1);
	create_insn	(x=0X10055E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X100560);
	op_stkvar	(x,	1);
	create_insn	(x=0X100562);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X100586);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X100590);
	set_name	(0X100590,	"apply_bootrom_patches_thumb");
	create_insn	(x=0X100596);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X100598);
	op_stkvar	(x,	1);
	create_insn	(x=0X10059A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10059C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10059E);
	op_stkvar	(x,	1);
	create_insn	(x=0X1005A0);
	op_plain_offset	(x,	1,	0X40000020);
	op_plain_offset	(x,	129,	0X40000020);
	create_insn	(x=0X1005A2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1005A4);
	op_plain_offset	(x,	1,	0X7000F980);
	op_plain_offset	(x,	129,	0X7000F980);
	create_insn	(x=0X1005AE);
	op_stkvar	(x,	1);
	create_insn	(x=0X1005B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X1005B8);
	op_plain_offset	(x,	1,	0X40000020);
	op_plain_offset	(x,	129,	0X40000020);
	create_insn	(x=0X1005BE);
	op_plain_offset	(x,	1,	0X40000020);
	op_plain_offset	(x,	129,	0X40000020);
	create_insn	(x=0X1005C6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1005CC);
	create_insn	(x=0X1005D0);
	op_plain_offset	(x,	1,	0X7000F800);
	op_plain_offset	(x,	129,	0X7000F800);
	create_insn	(x=0X1005E6);
	op_plain_offset	(x,	1,	0X7000F800);
	op_plain_offset	(x,	129,	0X7000F800);
	create_insn	(x=0X1005EA);
	op_stkvar	(x,	1);
	create_insn	(x=0X1005FA);
	op_stkvar	(x,	1);
	create_insn	(x=0X1005FE);
	op_stkvar	(x,	1);
	create_insn	(x=0X100600);
	op_stkvar	(x,	1);
	create_insn	(x=0X100606);
	op_plain_offset	(x,	1,	0X40000020);
	op_plain_offset	(x,	129,	0X40000020);
	create_insn	(x=0X10060C);
	op_plain_offset	(x,	1,	0X40000020);
	op_plain_offset	(x,	129,	0X40000020);
	create_insn	(x=0X100610);
	op_stkvar	(x,	1);
	create_insn	(x=0X100620);
	op_stkvar	(x,	1);
	create_insn	(x=0X10062A);
	op_stkvar	(x,	1);
	set_cmt	(0X100630,	"src",	0);
	create_insn	(x=0X100630);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X100632);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X100634);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X100636,	"len",	0);
	create_insn	(x=0X100638);
	op_stkvar	(x,	1);
	set_cmt	(0X10063A,	"dst",	0);
	create_insn	(x=0X10063A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10063C);
	op_stkvar	(x,	1);
	create_insn	(x=0X100642);
	op_stkvar	(x,	1);
	create_insn	(x=0X100644);
	op_stkvar	(x,	1);
	create_insn	(x=0X100646);
	op_stkvar	(x,	1);
	create_insn	(x=0X10064A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10064E);
	op_stkvar	(x,	1);
	set_cmt	(0X100656,	"dst",	0);
	create_insn	(x=0X100656);
	op_stkvar	(x,	1);
	set_cmt	(0X100658,	"len",	0);
	set_cmt	(0X10065A,	"src",	0);
	create_insn	(x=0X100660);
	op_stkvar	(x,	1);
	create_insn	(x=0X100662);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X100666);
	op_stkvar	(x,	1);
	create_insn	(x=0X100668);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X10066A);
	op_plain_offset	(x,	1,	0X6000F200);
	op_plain_offset	(x,	129,	0X6000F200);
	create_insn	(0X10066E);
	create_insn	(x=0X100670);
	op_stkvar	(x,	1);
	set_cmt	(0X100676,	"dst",	0);
	create_insn	(x=0X100676);
	op_stkvar	(x,	1);
	set_cmt	(0X100678,	"len",	0);
	set_cmt	(0X10067A,	"src",	0);
	create_insn	(x=0X100680);
	op_stkvar	(x,	1);
	create_insn	(x=0X100684);
	op_stkvar	(x,	1);
	create_insn	(x=0X100686);
	op_stkvar	(x,	1);
	create_insn	(x=0X100688);
	op_stkvar	(x,	1);
	set_cmt	(0X10068E,	"a1",	0);
	create_insn	(x=0X10068E);
	op_stkvar	(x,	1);
	create_insn	(x=0X100698);
	op_plain_offset	(x,	1,	0X40000020);
	op_plain_offset	(x,	129,	0X40000020);
	create_insn	(x=0X10069C);
	op_plain_offset	(x,	1,	0X40000020);
	op_plain_offset	(x,	129,	0X40000020);
	create_insn	(x=0X1006A2);
	op_stkvar	(x,	1);
	create_insn	(0X1006AC);
	create_insn	(x=0X1006B6);
	op_plain_offset	(x,	1,	0X6000F200);
	op_plain_offset	(x,	129,	0X6000F200);
	create_insn	(x=0X1006C8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X1006C8,	"return_zero");
	create_insn	(0X1006CE);
	create_insn	(x=0X1006D0);
	op_plain_offset	(x,	1,	0X60006040);
	op_plain_offset	(x,	129,	0X60006040);
	create_insn	(x=0X1006DC);
	op_plain_offset	(x,	1,	0X60006040);
	op_plain_offset	(x,	129,	0X60006040);
	create_insn	(0X1006E0);
	create_insn	(x=0X1006FA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X100732);
	create_insn	(0X100746);
	create_insn	(0X100750);
	create_insn	(0X100760);
	set_name	(0X100760,	"bootrom_patches_memcpy");
	create_insn	(0X100768);
	create_dword	(x=0X100774);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X100778);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X10077C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X100780);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X100784);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X100788);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X100788,	"src");
	create_dword	(x=0X10078C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X100790);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X100794);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X100798);
	create_dword	(x=0X10079C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1007A0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1007A4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X1007B0);
	set_name	(0X1007B0,	"software_interrupt_handler");
	create_insn	(x=0X1007C0);
	op_hex		(x,	1);
	create_insn	(x=0X1007C8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1007CC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1007E0);
	op_hex		(x,	1);
	create_dword	(x=0X1007EC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1007F0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1007F4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X1007F8);
	create_dword	(0X1007FC);
	create_insn	(x=0X100800);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X100800,	"maybe_boot_factory_mode");
	create_insn	(0X100808);
	set_name	(0X100808,	"nullsub_2");
	create_insn	(0X10080A);
	set_name	(0X10080A,	"maybe_boot_factory_mode_0");
	set_cmt	(0X10080C,	"a2",	0);
	set_cmt	(0X10080E,	"a1",	0);
	create_insn	(0X100824);
	set_cmt	(0X100838,	"a1",	0);
	set_cmt	(0X10083E,	"oscillator_freq",	0);
	set_cmt	(0X10084C,	"a2",	0);
	set_cmt	(0X10084E,	"a1",	0);
	create_insn	(x=0X100856);
	op_plain_offset	(x,	1,	0X7000E440);
	op_plain_offset	(x,	129,	0X7000E440);
	create_insn	(x=0X100878);
	op_plain_offset	(x,	1,	0X7000E440);
	op_plain_offset	(x,	129,	0X7000E440);
	create_insn	(x=0X100882);
	op_plain_offset	(x,	1,	0X70000000);
	op_plain_offset	(x,	129,	0X70000000);
	set_cmt	(0X1008A2,	"a1",	0);
	create_insn	(0X1008AC);
	create_dword	(x=0X1008B4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1008B8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X1008BC);
	create_insn	(x=0X1008C2);
	op_plain_offset	(x,	1,	0X7000E400);
	op_plain_offset	(x,	129,	0X7000E400);
	create_insn	(x=0X1008C8);
	op_plain_offset	(x,	1,	0X7000E400);
	op_plain_offset	(x,	129,	0X7000E400);
	create_insn	(x=0X1008CA);
	op_plain_offset	(x,	1,	0X7000E400);
	op_plain_offset	(x,	129,	0X7000E400);
	create_insn	(x=0X1008D0);
	op_plain_offset	(x,	1,	0X7000E400);
	op_plain_offset	(x,	129,	0X7000E400);
	create_dword	(x=0X1008D4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X1008D8);
	set_name	(0X1008D8,	"wb0_pllp_override_enabled");
	create_insn	(x=0X1008DA);
	op_plain_offset	(x,	1,	0X7000E4C0);
	op_plain_offset	(x,	129,	0X7000E4C0);
	create_insn	(0X1008EC);
	set_name	(0X1008EC,	"wb0_get_oscillator_frequency");
	create_insn	(x=0X1008EE);
	op_plain_offset	(x,	1,	0X7000E4C0);
	op_plain_offset	(x,	129,	0X7000E4C0);
	create_insn	(0X1008F6);
	create_insn	(x=0X1008FC);
	op_plain_offset	(x,	1,	0X7000E4C0);
	op_plain_offset	(x,	129,	0X7000E4C0);
	create_insn	(x=0X10091E);
	op_plain_offset	(x,	1,	0X7000E4C0);
	op_plain_offset	(x,	129,	0X7000E4C0);
	create_insn	(0X100926);
	set_name	(0X100926,	"wb0_pllu_override_enabled");
	create_insn	(x=0X100928);
	op_plain_offset	(x,	1,	0X7000E4C0);
	op_plain_offset	(x,	129,	0X7000E4C0);
	create_insn	(0X10093C);
	create_insn	(x=0X10093E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X100942);
	op_plain_offset	(x,	1,	0X7000E4C0);
	op_plain_offset	(x,	129,	0X7000E4C0);
	create_insn	(x=0X100968);
	op_plain_offset	(x,	1,	0X7000E4C0);
	op_plain_offset	(x,	129,	0X7000E4C0);
	create_insn	(0X10096C);
	set_name	(0X10096C,	"wb0_pllm_override_enabled");
	create_insn	(x=0X10096E);
	op_plain_offset	(x,	1,	0X7000E4C0);
	op_plain_offset	(x,	129,	0X7000E4C0);
	create_insn	(0X100982);
	create_insn	(x=0X100986);
	op_plain_offset	(x,	1,	0X7000E4C0);
	op_plain_offset	(x,	129,	0X7000E4C0);
	create_insn	(x=0X100994);
	op_plain_offset	(x,	1,	0X7000E4C0);
	op_plain_offset	(x,	129,	0X7000E4C0);
	create_insn	(x=0X100998);
	op_plain_offset	(x,	1,	0X7000E680);
	op_plain_offset	(x,	129,	0X7000E680);
	create_insn	(x=0X1009C2);
	op_plain_offset	(x,	1,	0X7000E680);
	op_plain_offset	(x,	129,	0X7000E680);
	create_insn	(x=0X1009C8);
	op_plain_offset	(x,	1,	0X7000E5C0);
	op_plain_offset	(x,	129,	0X7000E5C0);
	create_insn	(x=0X1009E4);
	op_plain_offset	(x,	1,	0X7000E5C0);
	op_plain_offset	(x,	129,	0X7000E5C0);
	create_insn	(x=0X1009E6);
	op_plain_offset	(x,	1,	0X7000E680);
	op_plain_offset	(x,	129,	0X7000E680);
	create_insn	(x=0X1009F2);
	op_plain_offset	(x,	1,	0X7000E680);
	op_plain_offset	(x,	129,	0X7000E680);
	create_insn	(x=0X1009FC);
	op_plain_offset	(x,	1,	0X7000E4C0);
	op_plain_offset	(x,	129,	0X7000E4C0);
	create_insn	(x=0X100A04);
	op_plain_offset	(x,	1,	0X7000E4C0);
	op_plain_offset	(x,	129,	0X7000E4C0);
	create_dword	(x=0X100A08);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X100A0C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X100A10);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X100A10,	"reset_assert");
	set_cmt	(0X100A2A,	"us",	0);
	create_insn	(0X100A36);
	set_name	(0X100A36,	"assert_main_reset");
	set_cmt	(0X100A42,	"result",	0);
	create_dword	(x=0X100A4C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X100A50);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X100A54);
	create_insn	(x=0X100A58);
	op_plain_offset	(x,	1,	0X70006000);
	op_plain_offset	(x,	129,	0X70006000);
	create_insn	(x=0X100A5E);
	op_plain_offset	(x,	1,	0X70006000);
	op_plain_offset	(x,	129,	0X70006000);
	set_cmt	(0X100A60,	"result",	0);
	create_insn	(x=0X100A66);
	op_plain_offset	(x,	1,	0X70006000);
	op_plain_offset	(x,	129,	0X70006000);
	create_insn	(x=0X100A6E);
	op_plain_offset	(x,	1,	0X70006000);
	op_plain_offset	(x,	129,	0X70006000);
	set_cmt	(0X100A70,	"result",	0);
	set_cmt	(0X100A78,	"result",	0);
	create_insn	(x=0X100A7E);
	op_plain_offset	(x,	1,	0X70006000);
	op_plain_offset	(x,	129,	0X70006000);
	set_cmt	(0X100A8C,	"result",	0);
	create_insn	(x=0X100A92);
	op_plain_offset	(x,	1,	0X70006000);
	op_plain_offset	(x,	129,	0X70006000);
	create_insn	(0X100AA4);
	set_name	(0X100AA4,	"uarta_setup");
	create_insn	(x=0X100AAE);
	op_stkvar	(x,	1);
	create_insn	(x=0X100AB4);
	op_plain_offset	(x,	1,	0X60006080);
	op_plain_offset	(x,	129,	0X60006080);
	create_insn	(x=0X100ABA);
	op_plain_offset	(x,	1,	0X60006080);
	op_plain_offset	(x,	129,	0X60006080);
	create_insn	(x=0X100ABC);
	op_plain_offset	(x,	1,	0X60006080);
	op_plain_offset	(x,	129,	0X60006080);
	create_insn	(x=0X100AC2);
	op_plain_offset	(x,	1,	0X60006080);
	op_plain_offset	(x,	129,	0X60006080);
	create_insn	(x=0X100AC8);
	op_plain_offset	(x,	1,	0X70000000);
	op_plain_offset	(x,	129,	0X70000000);
	set_cmt	(0X100AD2,	"a1",	0);
	create_insn	(x=0X100AD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X100ADA);
	op_stkvar	(x,	1);
	create_insn	(x=0X100AE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X100AF4);
	op_plain_offset	(x,	1,	0X700030C0);
	op_plain_offset	(x,	129,	0X700030C0);
	create_insn	(x=0X100AFA);
	op_plain_offset	(x,	1,	0X700030C0);
	op_plain_offset	(x,	129,	0X700030C0);
	create_insn	(x=0X100AFC);
	op_plain_offset	(x,	1,	0X700030C0);
	op_plain_offset	(x,	129,	0X700030C0);
	create_insn	(x=0X100B02);
	op_plain_offset	(x,	1,	0X700030C0);
	op_plain_offset	(x,	129,	0X700030C0);
	create_insn	(x=0X100B04);
	op_plain_offset	(x,	1,	0X700030C0);
	op_plain_offset	(x,	129,	0X700030C0);
	create_insn	(x=0X100B0A);
	op_plain_offset	(x,	1,	0X700030C0);
	op_plain_offset	(x,	129,	0X700030C0);
	create_insn	(x=0X100B0C);
	op_plain_offset	(x,	1,	0X700030C0);
	op_plain_offset	(x,	129,	0X700030C0);
	create_insn	(x=0X100B10);
	op_plain_offset	(x,	1,	0X700030C0);
	op_plain_offset	(x,	129,	0X700030C0);
	create_insn	(x=0X100B12);
	op_plain_offset	(x,	1,	0X700030C0);
	op_plain_offset	(x,	129,	0X700030C0);
	create_insn	(x=0X100B1A);
	op_plain_offset	(x,	1,	0X700030C0);
	op_plain_offset	(x,	129,	0X700030C0);
	create_insn	(x=0X100B1C);
	op_plain_offset	(x,	1,	0X700030C0);
	op_plain_offset	(x,	129,	0X700030C0);
	create_insn	(x=0X100B22);
	op_plain_offset	(x,	1,	0X700030C0);
	op_plain_offset	(x,	129,	0X700030C0);
	create_insn	(x=0X100B24);
	op_plain_offset	(x,	1,	0X700030C0);
	op_plain_offset	(x,	129,	0X700030C0);
	create_insn	(x=0X100B2A);
	op_plain_offset	(x,	1,	0X700030C0);
	op_plain_offset	(x,	129,	0X700030C0);
	create_insn	(x=0X100B2C);
	op_plain_offset	(x,	1,	0X700030C0);
	op_plain_offset	(x,	129,	0X700030C0);
	create_insn	(x=0X100B30);
	op_plain_offset	(x,	1,	0X700030C0);
	op_plain_offset	(x,	129,	0X700030C0);
	set_cmt	(0X100B32,	"rst_state",	0);
	set_cmt	(0X100B34,	"reg_offset_and_bit",	0);
	create_insn	(x=0X100B4C);
	op_plain_offset	(x,	1,	0X60006000);
	op_plain_offset	(x,	129,	0X60006000);
	create_insn	(x=0X100B52);
	op_plain_offset	(x,	1,	0X60006140);
	op_plain_offset	(x,	129,	0X60006140);
	set_cmt	(0X100B54,	"result",	0);
	set_cmt	(0X100B5A,	"a1",	0);
	set_cmt	(0X100B5C,	"a2",	0);
	set_cmt	(0X100B62,	"rst_state",	0);
	set_cmt	(0X100B64,	"reg_offset_and_bit",	0);
	create_insn	(x=0X100B6E);
	op_plain_offset	(x,	1,	0X70006000);
	op_plain_offset	(x,	129,	0X70006000);
	create_insn	(x=0X100B70);
	op_plain_offset	(x,	1,	0X70006000);
	op_plain_offset	(x,	129,	0X70006000);
	create_insn	(x=0X100B72);
	op_plain_offset	(x,	1,	0X70006000);
	op_plain_offset	(x,	129,	0X70006000);
	create_insn	(x=0X100B76);
	op_plain_offset	(x,	1,	0X70006000);
	op_plain_offset	(x,	129,	0X70006000);
	set_cmt	(0X100B78,	"result",	0);
	create_insn	(x=0X100B88);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X100B94);
	set_name	(0X100B94,	"uarta_print");
	create_insn	(x=0X100BA4);
	op_plain_offset	(x,	1,	0X70006000);
	op_plain_offset	(x,	129,	0X70006000);
	create_insn	(0X100BB6);
	create_insn	(x=0X100BCA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X100BD0);
	op_plain_offset	(x,	1,	0X70006000);
	op_plain_offset	(x,	129,	0X70006000);
	create_insn	(0X100BDE);
	create_insn	(0X100BEC);
	set_name	(0X100BEC,	"uarta_read");
	create_insn	(0X100C02);
	create_insn	(x=0X100C06);
	op_plain_offset	(x,	1,	0X70006000);
	op_plain_offset	(x,	129,	0X70006000);
	create_insn	(0X100C14);
	create_insn	(0X100C1A);
	create_insn	(x=0X100C28);
	op_plain_offset	(x,	1,	0X70006000);
	op_plain_offset	(x,	129,	0X70006000);
	create_insn	(0X100C40);
	create_insn	(0X100C48);
	set_name	(0X100C48,	"factory_boot_from_uart");
	create_insn	(x=0X100C4A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X100C5E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X100C6C);
	create_insn	(x=0X100C70);
	op_stkvar	(x,	1);
	create_insn	(0X100C7E);
	create_insn	(x=0X100C82);
	op_stkvar	(x,	1);
	create_insn	(0X100C90);
	create_insn	(x=0X100C94);
	op_stkvar	(x,	1);
	create_insn	(0X100CA2);
	create_insn	(x=0X100CA6);
	op_stkvar	(x,	1);
	create_insn	(0X100CB4);
	create_insn	(x=0X100CB8);
	op_stkvar	(x,	1);
	create_insn	(0X100CC6);
	create_insn	(x=0X100CCA);
	op_stkvar	(x,	1);
	create_insn	(0X100CD8);
	create_insn	(x=0X100CE2);
	op_stkvar	(x,	1);
	create_insn	(0X100CEA);
	create_insn	(x=0X100CEE);
	op_stkvar	(x,	1);
	create_insn	(x=0X100CF0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X100CF2);
	op_stkvar	(x,	1);
	set_cmt	(0X100CF4,	"a1",	0);
	create_insn	(x=0X100CF4);
	op_stkvar	(x,	1);
	set_cmt	(0X100CF6,	"a2",	0);
	set_cmt	(0X100CFE,	"len",	0);
	set_cmt	(0X100D00,	"a3",	0);
	create_insn	(x=0X100D00);
	op_stkvar	(x,	1);
	set_cmt	(0X100D02,	"a1",	0);
	create_insn	(x=0X100D08);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X100D12);
	op_stkvar	(x,	1);
	create_insn	(x=0X100D18);
	op_plain_offset	(x,	1,	0X40000100);
	op_plain_offset	(x,	129,	0X40000100);
	create_insn	(x=0X100D1A);
	op_stkvar	(x,	1);
	create_insn	(x=0X100D1E);
	op_stkvar	(x,	1);
	create_insn	(0X100D2E);
	create_insn	(x=0X100D54);
	op_stkvar	(x,	1);
	create_insn	(x=0X100D60);
	op_plain_offset	(x,	1,	0X40000100);
	op_plain_offset	(x,	129,	0X40000100);
	create_insn	(x=0X100D62);
	op_stkvar	(x,	1);
	create_insn	(x=0X100D70);
	op_plain_offset	(x,	1,	0X40000100);
	op_plain_offset	(x,	129,	0X40000100);
	create_insn	(x=0X100D72);
	op_stkvar	(x,	1);
	create_insn	(x=0X100D82);
	op_plain_offset	(x,	1,	0X40000100);
	op_plain_offset	(x,	129,	0X40000100);
	create_insn	(x=0X100D84);
	op_stkvar	(x,	1);
	create_insn	(x=0X100D90);
	op_plain_offset	(x,	1,	0X40000100);
	op_plain_offset	(x,	129,	0X40000100);
	create_insn	(x=0X100D92);
	op_stkvar	(x,	1);
	set_cmt	(0X100D9C,	"a3",	0);
	create_insn	(x=0X100D9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X100DA0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X100DA2,	"len",	0);
	set_cmt	(0X100DA4,	"a1",	0);
	create_insn	(x=0X100DAC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X100DAE,	"len",	0);
	set_cmt	(0X100DB0,	"a1",	0);
	create_insn	(x=0X100DB6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X100DB8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X100DBE);
	op_plain_offset	(x,	1,	0X100034);
	op_plain_offset	(x,	129,	0X100034);
	create_insn	(x=0X100DC0);
	op_plain_offset	(x,	1,	0X40000000);
	op_plain_offset	(x,	129,	0X40000000);
	create_insn	(x=0X100DC2);
	op_plain_offset	(x,	1,	0X100034);
	op_plain_offset	(x,	129,	0X100034);
	create_insn	(x=0X100DC4);
	op_plain_offset	(x,	1,	0X40000000);
	op_plain_offset	(x,	129,	0X40000000);
	create_insn	(x=0X100DC8);
	op_plain_offset	(x,	1,	0X40000000);
	op_plain_offset	(x,	129,	0X40000000);
	create_insn	(x=0X100DCC);
	op_plain_offset	(x,	1,	0X40000000);
	op_plain_offset	(x,	129,	0X40000000);
	create_insn	(x=0X100DD0);
	op_plain_offset	(x,	1,	0X40000000);
	op_plain_offset	(x,	129,	0X40000000);
	create_insn	(x=0X100DD2);
	op_stkvar	(x,	1);
	create_insn	(x=0X100DD4);
	op_plain_offset	(x,	1,	0X40000000);
	op_plain_offset	(x,	129,	0X40000000);
	create_insn	(x=0X100DDA);
	op_plain_offset	(x,	1,	0X40000020);
	op_plain_offset	(x,	129,	0X40000020);
	create_insn	(x=0X100DDC);
	op_plain_offset	(x,	1,	0X40000020);
	op_plain_offset	(x,	129,	0X40000020);
	create_insn	(x=0X100DDE);
	op_plain_offset	(x,	1,	0X40000020);
	op_plain_offset	(x,	129,	0X40000020);
	create_insn	(x=0X100DE0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X100DE6);
	op_plain_offset	(x,	1,	0X400000C0);
	op_plain_offset	(x,	129,	0X400000C0);
	set_cmt	(0X100DE8,	"a1",	0);
	create_dword	(x=0X100DF8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X100DFC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X100E00);
	set_name	(0X100E00,	"a1");
	create_dword	(x=0X100E04);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X100E08);
	create_dword	(0X100E0C);
	create_dword	(x=0X100E10);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X100E14);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X100E18);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X100E1C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X100E20);
	set_name	(0X100E20,	"factory_boot_from_uart_and_spin_0");
	make_array	(0X100E22,	0X2);
	create_insn	(0X100E24);
	set_name	(0X100E24,	"factory_boot_from_uart_and_spin");
	create_dword	(0X100E30);
	create_insn	(0X100E42);
	set_name	(0X100E42,	"tmrus_get");
	create_insn	(x=0X100E44);
	op_plain_offset	(x,	1,	0X60005000);
	op_plain_offset	(x,	129,	0X60005000);
	create_insn	(0X100E48);
	set_name	(0X100E48,	"tmrus_get_time_passed");
	create_insn	(x=0X100E4A);
	op_plain_offset	(x,	1,	0X60005000);
	op_plain_offset	(x,	129,	0X60005000);
	create_insn	(0X100E50);
	set_name	(0X100E50,	"delay_us");
	create_insn	(x=0X100E52);
	op_plain_offset	(x,	1,	0X60005000);
	op_plain_offset	(x,	129,	0X60005000);
	create_insn	(x=0X100E58);
	op_plain_offset	(x,	1,	0X60005000);
	op_plain_offset	(x,	129,	0X60005000);
	create_dword	(x=0X100E68);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X100E6C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X100E6C,	"apply_bootrom_patches");
	create_dword	(x=0X100E74);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X100E78);
	set_name	(0X100E78,	"spinamathing");
	make_array	(0X100E7A,	0X2);
	create_insn	(0X100E7C);
	create_insn	(x=0X100E80);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X100E80,	"factory_boot_from_uart_0");
	create_dword	(x=0X100E88);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_byte	(0X100E8C);
	make_array	(0X100E8C,	0XC);
	set_name	(0X100E8C,	"pll_params");
	create_dword	(x=0X100E98);
	make_array	(x,	0X7);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X100E98,	"clk_register_table");
	create_dword	(0X100EE8);
	make_array	(0X100EE8,	0XC);
	create_dword	(x=0X100F18);
	make_array	(x,	0X7);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X100F18,	"rst_register_table");
	create_strlit	(0X100F34,	0X100F3B);
	set_name	(0X100F34,	"aFail");
	create_strlit	(0X100F3B,	0X100F42);
	set_name	(0X100F3B,	"aBoot");
	create_strlit	(0X100F42,	0X100F5C);
	set_name	(0X100F42,	"aNvBootT210Wxyz");
	create_byte	(0X100F5C);
	make_array	(0X100F5C,	0X24);
	create_insn	(0X100F80);
	set_name	(0X100F80,	"jump_into_nvtboot2");
	create_insn	(x=0X100FAC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(0X100FFC);
	create_dword	(x=0X101000);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X101004);
	create_dword	(x=0X101008);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X10100C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X101010);
	create_insn	(x=0X101018);
	op_hex		(x,	1);
	create_dword	(x=0X10102C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X101030);
	create_insn	(0X101034);
	create_insn	(x=0X101038);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X101040,	"R10 = 0x101068 + 0x14B2C = 0x115B94 = start of data copy table",	0);
	set_cmt	(0X101044,	"R11 = 0x101068 + 0x14B7C = 0x115BE4 = end of data copy table",	0);
	set_cmt	(0X10104C,	"at the end of table?",	0);
	set_cmt	(0X101054,	"load the 4 members of current table entry",	0);
	set_cmt	(0X101058,	"fake return pointer for next loop iteration after copy function is done",	0);
	create_insn	(x=0X101058);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X10105C,	"something, something, thumb? I don't get it",	0);
	create_insn	(x=0X10105C);
	op_hex		(x,	1);
	set_cmt	(0X101064,	"call copy function",	0);
	create_dword	(0X101068);
	create_dword	(0X10106C);
	create_insn	(x=0X101070);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X101070,	"meminit_memunpack");
	create_insn	(0X101078);
	create_insn	(0X1010B2);
	set_cmt	(0X1010CC,	"len",	0);
	create_insn	(0X1010CC);
	set_name	(0X1010CC,	"meminit_memcpy");
	create_insn	(0X1010F4);
	set_name	(0X1010F4,	"meminit_memzero");
	create_insn	(0X101120);
	set_name	(0X101120,	"does_nothing");
	make_array	(0X101122,	0X2);
	create_insn	(0X101124);
	create_dword	(x=0X101130);
	op_plain_offset	(x,	0,	0X101130);
	op_plain_offset	(x,	128,	0X101130);
	create_insn	(0X101134);
	set_name	(0X101134,	"normal_boot");
	create_insn	(0X101148);
	create_insn	(x=0X101152);
	op_stkvar	(x,	1);
	create_insn	(x=0X10115E);
	op_stkvar	(x,	1);
	create_insn	(x=0X101172);
	op_stkvar	(x,	1);
	create_insn	(0X101190);
	create_insn	(x=0X1011A0);
	op_stkvar	(x,	1);
	create_insn	(0X1011BC);
	set_cmt	(0X1011C2,	"type",	0);
	set_cmt	(0X1011C4,	"a2",	0);
	set_cmt	(0X1011C6,	"key_index",	0);
	set_cmt	(0X1011C8,	"key",	0);
	set_cmt	(0X1011CE,	"a2",	0);
	set_cmt	(0X1011D0,	"type",	0);
	set_cmt	(0X1011D2,	"key_index",	0);
	set_cmt	(0X1011D4,	"key",	0);
	set_cmt	(0X1011DA,	"a2",	0);
	set_cmt	(0X1011DC,	"type",	0);
	set_cmt	(0X1011DE,	"key_index",	0);
	set_cmt	(0X1011E0,	"key",	0);
	set_cmt	(0X1011E8,	"key",	0);
	create_insn	(0X1011E8);
	set_cmt	(0X1011EE,	"type",	0);
	set_cmt	(0X1011F0,	"a2",	0);
	set_cmt	(0X1011F2,	"key_index",	0);
	set_cmt	(0X1011F4,	"key",	0);
	set_cmt	(0X1011FA,	"a2",	0);
	set_cmt	(0X1011FC,	"type",	0);
	set_cmt	(0X1011FE,	"key_index",	0);
	set_cmt	(0X101200,	"key",	0);
	set_cmt	(0X101206,	"a2",	0);
	set_cmt	(0X101208,	"type",	0);
	set_cmt	(0X10120A,	"key_index",	0);
	set_cmt	(0X10120C,	"key",	0);
	create_insn	(0X101224);
	set_cmt	(0X10122C,	"type",	0);
	set_cmt	(0X10122E,	"a2",	0);
	set_cmt	(0X101230,	"key_index",	0);
	set_cmt	(0X101232,	"key",	0);
	set_cmt	(0X101238,	"a2",	0);
	set_cmt	(0X10123A,	"type",	0);
	set_cmt	(0X10123C,	"key_index",	0);
	set_cmt	(0X10123E,	"key",	0);
	set_cmt	(0X101244,	"a2",	0);
	set_cmt	(0X101246,	"type",	0);
	set_cmt	(0X101248,	"key_index",	0);
	set_cmt	(0X10124A,	"key",	0);
	set_cmt	(0X10125C,	"a1",	0);
	create_insn	(0X101282);
	create_insn	(0X1012A6);
	create_insn	(x=0X1012AC);
	op_stkvar	(x,	1);
	create_insn	(0X1012C2);
	create_insn	(x=0X1012DA);
	op_stkvar	(x,	1);
	create_insn	(0X101328);
	set_name	(0X101328,	"prepare_nvtboot_launch");
	create_insn	(0X101338);
	set_cmt	(0X10135E,	"result",	0);
	create_insn	(x=0X101364);
	op_stkvar	(x,	1);
	create_insn	(x=0X1013B4);
	op_plain_offset	(x,	1,	0X6000C100);
	op_plain_offset	(x,	129,	0X6000C100);
	create_insn	(x=0X1013B8);
	op_plain_offset	(x,	1,	0X7000E640);
	op_plain_offset	(x,	129,	0X7000E640);
	create_insn	(0X1013D6);
	create_insn	(x=0X1013E4);
	op_plain_offset	(x,	1,	0X7000E640);
	op_plain_offset	(x,	129,	0X7000E640);
	create_insn	(x=0X1013E8);
	op_plain_offset	(x,	1,	0X6000C100);
	op_plain_offset	(x,	129,	0X6000C100);
	create_insn	(x=0X101408);
	op_plain_offset	(x,	1,	0X40000000);
	op_plain_offset	(x,	129,	0X40000000);
	create_insn	(x=0X10140A);
	op_stkvar	(x,	1);
	set_cmt	(0X101416,	"a3",	0);
	set_cmt	(0X101418,	"a2",	0);
	set_cmt	(0X10141A,	"a1",	0);
	create_insn	(x=0X10141A);
	op_stkvar	(x,	1);
	set_cmt	(0X10141C,	"a4",	0);
	create_insn	(0X10142A);
	set_name	(0X10142A,	"main");
	set_cmt	(0X101432,	"a1",	0);
	create_insn	(x=0X101434);
	op_stkvar	(x,	1);
	create_insn	(x=0X101436);
	op_stkvar	(x,	1);
	create_insn	(x=0X101438);
	op_stkvar	(x,	1);
	create_insn	(x=0X10143A);
	op_stkvar	(x,	1);
	set_cmt	(0X101458,	"SCRATCH0",	0);
	create_insn	(x=0X101460);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X101464);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X101466);
	op_plain_offset	(x,	1,	0X40000000);
	op_plain_offset	(x,	129,	0X40000000);
	create_insn	(x=0X10146C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X101474,	"SCRATCH0",	0);
	set_cmt	(0X101486,	"flag",	0);
	set_cmt	(0X101488,	"bit",	0);
	set_cmt	(0X101492,	"a1",	0);
	create_insn	(x=0X101492);
	op_stkvar	(x,	1);
	create_insn	(0X1014A2);
	create_insn	(0X1014AA);
	create_insn	(x=0X1014AC);
	op_plain_offset	(x,	1,	0X40000020);
	op_plain_offset	(x,	129,	0X40000020);
	create_insn	(x=0X1014BC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1014C0);
	op_plain_offset	(x,	1,	0X40000000);
	op_plain_offset	(x,	129,	0X40000000);
	create_insn	(x=0X1014C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X1014DA);
	op_plain_offset	(x,	1,	0X40000020);
	op_plain_offset	(x,	129,	0X40000020);
	create_insn	(x=0X1014E4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1014E6);
	op_plain_offset	(x,	1,	0X400028C0);
	op_plain_offset	(x,	129,	0X400028C0);
	create_insn	(x=0X1014E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X1014EA);
	op_plain_offset	(x,	1,	0X400028C0);
	op_plain_offset	(x,	129,	0X400028C0);
	create_insn	(x=0X1014F6);
	op_stkvar	(x,	1);
	create_insn	(x=0X1014F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X1014FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X101500);
	op_stkvar	(x,	1);
	set_cmt	(0X101506,	"ecid",	0);
	create_insn	(x=0X101506);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X101508,	"warmboot",	0);
	set_cmt	(0X10150A,	"hwinfo",	0);
	create_insn	(x=0X10150A);
	op_stkvar	(x,	1);
	set_cmt	(0X10150C,	"a1",	0);
	create_insn	(x=0X10150C);
	op_stkvar	(x,	1);
	set_cmt	(0X10150E,	"a6",	0);
	create_insn	(x=0X10150E);
	op_stkvar	(x,	1);
	set_cmt	(0X101510,	"a5",	0);
	create_insn	(x=0X101510);
	op_stkvar	(x,	1);
	set_cmt	(0X101516,	"a4",	0);
	create_insn	(x=0X101516);
	op_stkvar	(x,	1);
	set_cmt	(0X101518,	"a1",	0);
	create_insn	(x=0X101518);
	op_stkvar	(x,	1);
	set_cmt	(0X10151A,	"warmboot_failed_maybe",	0);
	set_cmt	(0X10151C,	"a1",	0);
	create_insn	(x=0X10152A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X10152C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X101532);
	op_plain_offset	(x,	1,	0X100034);
	op_plain_offset	(x,	129,	0X100034);
	create_insn	(x=0X101534);
	op_plain_offset	(x,	1,	0X40000000);
	op_plain_offset	(x,	129,	0X40000000);
	create_insn	(x=0X101536);
	op_plain_offset	(x,	1,	0X100034);
	op_plain_offset	(x,	129,	0X100034);
	create_insn	(x=0X101538);
	op_plain_offset	(x,	1,	0X40000000);
	op_plain_offset	(x,	129,	0X40000000);
	create_insn	(x=0X10153C);
	op_plain_offset	(x,	1,	0X40000000);
	op_plain_offset	(x,	129,	0X40000000);
	create_insn	(x=0X101542);
	op_plain_offset	(x,	1,	0X40000000);
	op_plain_offset	(x,	129,	0X40000000);
	create_insn	(x=0X10154C);
	op_plain_offset	(x,	1,	0X400000C0);
	op_plain_offset	(x,	129,	0X400000C0);
	create_dword	(x=0X101550);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X101554);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X101558);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X10155C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X101560);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X101564);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X101564,	"a2");
	create_dword	(x=0X101568);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X10156C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X101570);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X101574);
	create_dword	(0X101578);
	create_dword	(0X10157C);
	create_dword	(0X101580);
	set_name	(0X101580,	"a3");
	create_dword	(0X101584);
	create_dword	(x=0X101588);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X10158C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X101590);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X101594);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X101598);
	create_insn	(x=0X10159C);
	op_stkvar	(x,	1);
	set_cmt	(0X10159E,	"SCRATCH0",	0);
	create_insn	(x=0X1015A4);
	op_stkvar	(x,	1);
	set_cmt	(0X1015A6,	"result",	0);
	create_insn	(x=0X1015A6);
	op_stkvar	(x,	1);
	set_cmt	(0X1015AE,	"controller_mode",	0);
	create_insn	(x=0X1015AE);
	op_stkvar	(x,	1);
	create_insn	(x=0X1015B4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1015BA);
	op_stkvar	(x,	1);
	create_insn	(x=0X1015C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X1015CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X1015D6);
	op_stkvar	(x,	1);
	create_insn	(x=0X1015D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X1015E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X1015E2);
	op_stkvar	(x,	1);
	set_cmt	(0X1015E8,	"flag",	0);
	set_cmt	(0X1015EA,	"bit",	0);
	create_insn	(x=0X1015F2);
	op_plain_offset	(x,	1,	0X40000020);
	op_plain_offset	(x,	129,	0X40000020);
	create_insn	(x=0X1015F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X10160A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X10160E);
	op_stkvar	(x,	1);
	create_insn	(x=0X101610);
	op_plain_offset	(x,	1,	0X40000000);
	op_plain_offset	(x,	129,	0X40000000);
	create_insn	(0X101614);
	create_insn	(x=0X101616);
	op_stkvar	(x,	1);
	create_insn	(x=0X101618);
	op_stkvar	(x,	1);
	create_insn	(x=0X10161C);
	op_stkvar	(x,	1);
	set_cmt	(0X101620,	"out_entrypoint",	0);
	create_insn	(x=0X101620);
	op_stkvar	(x,	1);
	set_cmt	(0X10162A,	"do_recovery_maybe",	0);
	set_cmt	(0X10162C,	"a3",	0);
	create_insn	(x=0X10162C);
	op_stkvar	(x,	1);
	set_cmt	(0X10162E,	"r1_0",	0);
	create_insn	(x=0X10162E);
	op_stkvar	(x,	1);
	set_cmt	(0X101630,	"handoff_address",	0);
	create_insn	(x=0X101630);
	op_stkvar	(x,	1);
	create_insn	(0X10163C);
	set_name	(0X10163C,	"more_pll");
	set_cmt	(0X101640,	"a2",	0);
	set_cmt	(0X101642,	"a1",	0);
	create_insn	(x=0X10165A);
	op_plain_offset	(x,	1,	0X60006080);
	op_plain_offset	(x,	129,	0X60006080);
	create_insn	(x=0X101662);
	op_plain_offset	(x,	1,	0X60006080);
	op_plain_offset	(x,	129,	0X60006080);
	create_insn	(x=0X101666);
	op_plain_offset	(x,	1,	0X60005000);
	op_plain_offset	(x,	129,	0X60005000);
	set_cmt	(0X10166C,	"a2",	0);
	set_cmt	(0X10166E,	"a1",	0);
	create_insn	(0X101682);
	set_name	(0X101682,	"se_nomnomnom_privkey");
	set_cmt	(0X101686,	"a1",	0);
	set_cmt	(0X10168C,	"key",	0);
	create_insn	(x=0X10168C);
	op_stkvar	(x,	1);
	create_insn	(x=0X101692);
	op_stkvar	(x,	1);
	set_cmt	(0X10169C,	"len",	0);
	set_cmt	(0X10169E,	"c",	0);
	set_cmt	(0X1016A0,	"a1",	0);
	create_insn	(x=0X1016A0);
	op_stkvar	(x,	1);
	set_cmt	(0X1016AA,	"type",	0);
	set_cmt	(0X1016AC,	"a2",	0);
	set_cmt	(0X1016AE,	"IPATCH HERE <- SVC #00",	0);
	set_cmt	(0X1016B0,	"key",	0);
	create_insn	(x=0X1016B0);
	op_stkvar	(x,	1);
	set_cmt	(0X1016B6,	"a2",	0);
	set_cmt	(0X1016B8,	"type",	0);
	set_cmt	(0X1016BA,	"key_index",	0);
	set_cmt	(0X1016BC,	"key",	0);
	set_cmt	(0X1016C2,	"a2",	0);
	set_cmt	(0X1016C4,	"type",	0);
	set_cmt	(0X1016C6,	"key_index",	0);
	set_cmt	(0X1016C8,	"key",	0);
	set_cmt	(0X1016CE,	"type",	0);
	set_cmt	(0X1016D0,	"a2",	0);
	set_cmt	(0X1016D2,	"key_index",	0);
	set_cmt	(0X1016D4,	"key",	0);
	create_insn	(x=0X1016D4);
	op_stkvar	(x,	1);
	set_cmt	(0X1016DA,	"a2",	0);
	set_cmt	(0X1016DC,	"type",	0);
	set_cmt	(0X1016DE,	"key_index",	0);
	set_cmt	(0X1016E0,	"key",	0);
	set_cmt	(0X1016E6,	"a2",	0);
	set_cmt	(0X1016E8,	"type",	0);
	set_cmt	(0X1016EA,	"key_index",	0);
	set_cmt	(0X1016EC,	"key",	0);
	set_cmt	(0X1016F2,	"len",	0);
	set_cmt	(0X1016F4,	"c",	0);
	set_cmt	(0X1016F6,	"a1",	0);
	create_insn	(x=0X1016F6);
	op_stkvar	(x,	1);
	create_dword	(x=0X101704);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X101708);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X10170C);
	create_dword	(x=0X101710);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X101714);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X101718);
	set_name	(0X101718,	"mem_enable_controller_maybe");
	create_insn	(x=0X10171A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X101722,	"a2",	0);
	set_cmt	(0X101724,	"a1",	0);
	set_cmt	(0X10172A,	"a2",	0);
	set_cmt	(0X10172C,	"a1",	0);
	set_cmt	(0X101732,	"rst_state",	0);
	set_cmt	(0X101734,	"reg_offset_and_bit",	0);
	set_cmt	(0X10173A,	"rst_state",	0);
	set_cmt	(0X10173C,	"reg_offset_and_bit",	0);
	create_insn	(x=0X101742);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X101744);
	op_plain_offset	(x,	1,	0X60006180);
	op_plain_offset	(x,	129,	0X60006180);
	create_insn	(x=0X101750);
	op_plain_offset	(x,	1,	0X60006180);
	op_plain_offset	(x,	129,	0X60006180);
	set_cmt	(0X101752,	"us",	0);
	create_insn	(x=0X101758);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X10175A);
	op_plain_offset	(x,	1,	0X60006380);
	op_plain_offset	(x,	129,	0X60006380);
	create_insn	(x=0X101760);
	op_plain_offset	(x,	1,	0X60006380);
	op_plain_offset	(x,	129,	0X60006380);
	create_insn	(x=0X101764);
	op_plain_offset	(x,	1,	0X70019940);
	op_plain_offset	(x,	129,	0X70019940);
	create_insn	(x=0X101768);
	op_plain_offset	(x,	1,	0X70019640);
	op_plain_offset	(x,	129,	0X70019640);
	create_insn	(x=0X10176A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X10176C);
	op_plain_offset	(x,	1,	0X70019640);
	op_plain_offset	(x,	129,	0X70019640);
	create_insn	(x=0X10176E);
	op_plain_offset	(x,	1,	0X70019940);
	op_plain_offset	(x,	129,	0X70019940);
	create_insn	(0X10177A);
	create_insn	(x=0X10177C);
	op_plain_offset	(x,	1,	0X40000020);
	op_plain_offset	(x,	129,	0X40000020);
	create_insn	(x=0X101784);
	op_plain_offset	(x,	1,	0X70019940);
	op_plain_offset	(x,	129,	0X70019940);
	create_insn	(x=0X101798);
	op_plain_offset	(x,	1,	0X70019640);
	op_plain_offset	(x,	129,	0X70019640);
	create_insn	(x=0X10179C);
	op_plain_offset	(x,	1,	0X70019640);
	op_plain_offset	(x,	129,	0X70019640);
	create_insn	(x=0X1017A0);
	op_plain_offset	(x,	1,	0X70019940);
	op_plain_offset	(x,	129,	0X70019940);
	create_insn	(x=0X1017A4);
	op_plain_offset	(x,	1,	0X60006380);
	op_plain_offset	(x,	129,	0X60006380);
	create_insn	(x=0X1017AC);
	op_plain_offset	(x,	1,	0X60006380);
	op_plain_offset	(x,	129,	0X60006380);
	create_dword	(x=0X1017B0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1017B4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1017B8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1017BC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1017C0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1017C4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1017C8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X1017DE);
	create_insn	(x=0X101804);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X101806);
	op_plain_offset	(x,	1,	0X600064C0);
	op_plain_offset	(x,	129,	0X600064C0);
	create_insn	(x=0X10180E);
	op_plain_offset	(x,	1,	0X600064C0);
	op_plain_offset	(x,	129,	0X600064C0);
	create_insn	(x=0X101816);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X10181A);
	op_plain_offset	(x,	1,	0X60006080);
	op_plain_offset	(x,	129,	0X60006080);
	create_insn	(x=0X101822);
	op_plain_offset	(x,	1,	0X60006080);
	op_plain_offset	(x,	129,	0X60006080);
	create_insn	(x=0X101824);
	op_plain_offset	(x,	1,	0X60006080);
	op_plain_offset	(x,	129,	0X60006080);
	create_insn	(x=0X101836);
	op_plain_offset	(x,	1,	0X60006080);
	op_plain_offset	(x,	129,	0X60006080);
	create_insn	(x=0X101838);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X10183A);
	op_plain_offset	(x,	1,	0X60006640);
	op_plain_offset	(x,	129,	0X60006640);
	create_insn	(x=0X101840);
	op_plain_offset	(x,	1,	0X60006640);
	op_plain_offset	(x,	129,	0X60006640);
	create_insn	(0X101844);
	create_insn	(x=0X101848);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X10184A);
	op_plain_offset	(x,	1,	0X60005000);
	op_plain_offset	(x,	129,	0X60005000);
	create_insn	(x=0X101850);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X101866);
	create_insn	(0X10186C);
	create_insn	(0X10187A);
	set_cmt	(0X101880,	"us",	0);
	create_insn	(0X101880);
	set_cmt	(0X101886,	"a2",	0);
	set_cmt	(0X101888,	"some_id",	0);
	create_insn	(0X101892);
	create_insn	(0X1018A2);
	set_name	(0X1018A2,	"set_clk_rst_controller");
	create_insn	(x=0X1018A6);
	op_dec		(x,	1);
	create_insn	(0X1018BA);
	create_insn	(x=0X1018D0);
	op_plain_offset	(x,	1,	0X60006000);
	op_plain_offset	(x,	129,	0X60006000);
	create_insn	(0X1018DC);
	create_insn	(x=0X1018EA);
	op_plain_offset	(x,	1,	0X60006180);
	op_plain_offset	(x,	129,	0X60006180);
	create_insn	(x=0X1018F8);
	op_plain_offset	(x,	1,	0X60006180);
	op_plain_offset	(x,	129,	0X60006180);
	set_cmt	(0X1018FA,	"result",	0);
	create_insn	(0X101902);
	create_insn	(x=0X101908);
	op_plain_offset	(x,	1,	0X60006000);
	op_plain_offset	(x,	129,	0X60006000);
	create_insn	(x=0X10190E);
	op_plain_offset	(x,	1,	0X60006080);
	op_plain_offset	(x,	129,	0X60006080);
	create_insn	(x=0X10191E);
	op_plain_offset	(x,	1,	0X60006080);
	op_plain_offset	(x,	129,	0X60006080);
	create_insn	(0X101922);
	create_insn	(x=0X101928);
	op_plain_offset	(x,	1,	0X60006000);
	op_plain_offset	(x,	129,	0X60006000);
	create_insn	(x=0X101930);
	op_plain_offset	(x,	1,	0X60006000);
	op_plain_offset	(x,	129,	0X60006000);
	create_insn	(x=0X101934);
	op_plain_offset	(x,	1,	0X60006000);
	op_plain_offset	(x,	129,	0X60006000);
	create_insn	(x=0X10193C);
	op_plain_offset	(x,	1,	0X60006000);
	op_plain_offset	(x,	129,	0X60006000);
	create_insn	(0X101940);
	create_insn	(x=0X101946);
	op_plain_offset	(x,	1,	0X7000E580);
	op_plain_offset	(x,	129,	0X7000E580);
	set_cmt	(0X101966,	"result",	0);
	create_insn	(x=0X101972);
	op_plain_offset	(x,	1,	0X60006000);
	op_plain_offset	(x,	129,	0X60006000);
	create_insn	(0X10197A);
	set_name	(0X10197A,	"pllp_enable");
	create_insn	(x=0X10197E);
	op_plain_offset	(x,	1,	0X60006080);
	op_plain_offset	(x,	129,	0X60006080);
	create_insn	(x=0X101984);
	op_plain_offset	(x,	1,	0X60006080);
	op_plain_offset	(x,	129,	0X60006080);
	create_insn	(0X101988);
	create_insn	(x=0X101996);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X10199A);
	op_plain_offset	(x,	1,	0X60006480);
	op_plain_offset	(x,	129,	0X60006480);
	create_insn	(x=0X1019B4);
	op_plain_offset	(x,	1,	0X60006480);
	op_plain_offset	(x,	129,	0X60006480);
	create_insn	(x=0X1019B6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1019D8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1019E0);
	op_plain_offset	(x,	1,	0X600060C0);
	op_plain_offset	(x,	129,	0X600060C0);
	create_insn	(x=0X1019EA);
	op_plain_offset	(x,	1,	0X600060C0);
	op_plain_offset	(x,	129,	0X600060C0);
	create_insn	(x=0X1019EC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1019F0);
	op_plain_offset	(x,	1,	0X60006040);
	op_plain_offset	(x,	129,	0X60006040);
	create_insn	(x=0X1019F8);
	op_plain_offset	(x,	1,	0X60006040);
	op_plain_offset	(x,	129,	0X60006040);
	create_insn	(x=0X1019FA);
	op_plain_offset	(x,	1,	0X60006040);
	op_plain_offset	(x,	129,	0X60006040);
	create_insn	(x=0X101A00);
	op_plain_offset	(x,	1,	0X60006040);
	op_plain_offset	(x,	129,	0X60006040);
	create_insn	(x=0X101A12);
	op_plain_offset	(x,	1,	0X60006480);
	op_plain_offset	(x,	129,	0X60006480);
	create_insn	(x=0X101A2A);
	op_plain_offset	(x,	1,	0X60006480);
	op_plain_offset	(x,	129,	0X60006480);
	set_cmt	(0X101A34,	"a2",	0);
	set_cmt	(0X101A36,	"a1",	0);
	create_insn	(x=0X101A40);
	op_plain_offset	(x,	1,	0X60006040);
	op_plain_offset	(x,	129,	0X60006040);
	create_insn	(x=0X101A46);
	op_plain_offset	(x,	1,	0X60006040);
	op_plain_offset	(x,	129,	0X60006040);
	create_insn	(x=0X101A4E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X101A52);
	op_plain_offset	(x,	1,	0X60006040);
	op_plain_offset	(x,	129,	0X60006040);
	create_insn	(x=0X101AA4);
	op_plain_offset	(x,	1,	0X60006040);
	op_plain_offset	(x,	129,	0X60006040);
	set_cmt	(0X101AA6,	"us",	0);
	create_insn	(x=0X101AB2);
	op_plain_offset	(x,	1,	0X60006040);
	op_plain_offset	(x,	129,	0X60006040);
	create_insn	(0X101AB6);
	create_insn	(x=0X101AC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X101AC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X101ACC);
	op_stkvar	(x,	1);
	create_insn	(x=0X101AD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X101AD2);
	op_stkvar	(x,	1);
	create_insn	(x=0X101ADC);
	op_stkvar	(x,	1);
	create_insn	(x=0X101ADE);
	op_stkvar	(x,	1);
	create_insn	(x=0X101AE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X101AE6);
	op_stkvar	(x,	1);
	create_insn	(x=0X101B06);
	op_stkvar	(x,	1);
	create_insn	(x=0X101B16);
	op_stkvar	(x,	1);
	create_insn	(x=0X101B2A);
	op_plain_offset	(x,	1,	0X60006500);
	op_plain_offset	(x,	129,	0X60006500);
	create_insn	(x=0X101B34);
	op_plain_offset	(x,	1,	0X60006500);
	op_plain_offset	(x,	129,	0X60006500);
	set_cmt	(0X101B36,	"result",	0);
	create_insn	(x=0X101B44);
	op_plain_offset	(x,	1,	0X600060C0);
	op_plain_offset	(x,	129,	0X600060C0);
	create_insn	(x=0X101B4E);
	op_plain_offset	(x,	1,	0X60006500);
	op_plain_offset	(x,	129,	0X60006500);
	create_insn	(x=0X101B52);
	op_plain_offset	(x,	1,	0X60006500);
	op_plain_offset	(x,	129,	0X60006500);
	create_insn	(x=0X101B54);
	op_stkvar	(x,	1);
	create_insn	(x=0X101B66);
	op_plain_offset	(x,	1,	0X60006500);
	op_plain_offset	(x,	129,	0X60006500);
	create_insn	(x=0X101B76);
	op_stkvar	(x,	1);
	create_insn	(x=0X101B80);
	op_stkvar	(x,	1);
	create_insn	(0X101B84);
	set_cmt	(0X101BA6,	"result",	0);
	create_insn	(x=0X101BC2);
	op_stkvar	(x,	1);
	create_insn	(0X101BCA);
	create_dword	(x=0X101BCC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X101BD0);
	create_dword	(0X101BD4);
	create_dword	(0X101BD8);
	create_dword	(x=0X101BDC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X101BE0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X101BE4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X101BE8);
	create_dword	(0X101BEC);
	create_dword	(x=0X101BF0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X101BF4);
	create_dword	(x=0X101BF8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X101BFC);
	create_dword	(0X101C00);
	create_dword	(0X101C04);
	create_insn	(0X101C08);
	create_insn	(0X101C0C);
	create_insn	(0X101C0E);
	create_insn	(x=0X101C12);
	op_stkvar	(x,	1);
	create_insn	(0X101C20);
	create_insn	(x=0X101C22);
	op_plain_offset	(x,	1,	0X600060C0);
	op_plain_offset	(x,	129,	0X600060C0);
	create_insn	(x=0X101C2A);
	op_plain_offset	(x,	1,	0X600060C0);
	op_plain_offset	(x,	129,	0X600060C0);
	create_insn	(x=0X101C3A);
	op_stkvar	(x,	1);
	create_insn	(x=0X101C44);
	op_stkvar	(x,	1);
	create_insn	(x=0X101C58);
	op_plain_offset	(x,	1,	0X60005000);
	op_plain_offset	(x,	129,	0X60005000);
	create_insn	(x=0X101C5E);
	op_stkvar	(x,	1);
	create_insn	(x=0X101C62);
	op_stkvar	(x,	1);
	set_cmt	(0X101C64,	"a2",	0);
	set_cmt	(0X101C66,	"a1",	0);
	create_insn	(x=0X101C66);
	op_stkvar	(x,	1);
	create_insn	(0X101C82);
	set_cmt	(0X101C84,	"a1",	0);
	create_insn	(x=0X101C84);
	op_stkvar	(x,	1);
	set_cmt	(0X101C86,	"a2",	0);
	create_insn	(x=0X101C90);
	op_plain_offset	(x,	1,	0X60006080);
	op_plain_offset	(x,	129,	0X60006080);
	create_insn	(x=0X101C96);
	op_plain_offset	(x,	1,	0X60006080);
	op_plain_offset	(x,	129,	0X60006080);
	create_insn	(x=0X101C98);
	op_plain_offset	(x,	1,	0X60006080);
	op_plain_offset	(x,	129,	0X60006080);
	create_insn	(x=0X101C9E);
	op_plain_offset	(x,	1,	0X60006080);
	op_plain_offset	(x,	129,	0X60006080);
	create_insn	(x=0X101CA4);
	op_plain_offset	(x,	1,	0X60006080);
	op_plain_offset	(x,	129,	0X60006080);
	create_insn	(x=0X101CA6);
	op_plain_offset	(x,	1,	0X60006080);
	op_plain_offset	(x,	129,	0X60006080);
	create_insn	(x=0X101CA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X101CB6);
	op_plain_offset	(x,	1,	0X60006080);
	op_plain_offset	(x,	129,	0X60006080);
	create_insn	(x=0X101CC6);
	op_stkvar	(x,	1);
	create_insn	(x=0X101CD0);
	op_stkvar	(x,	1);
	create_insn	(0X101CDA);
	set_cmt	(0X101CE8,	"result",	0);
	create_insn	(x=0X101D06);
	op_stkvar	(x,	1);
	create_insn	(x=0X101D10);
	op_stkvar	(x,	1);
	create_insn	(0X101D20);
	create_insn	(x=0X101D30);
	op_plain_offset	(x,	1,	0X60006480);
	op_plain_offset	(x,	129,	0X60006480);
	create_insn	(x=0X101D3E);
	op_stkvar	(x,	1);
	create_insn	(x=0X101D4E);
	op_stkvar	(x,	1);
	create_insn	(x=0X101D50);
	op_plain_offset	(x,	1,	0X60006480);
	op_plain_offset	(x,	129,	0X60006480);
	create_insn	(x=0X101D64);
	op_stkvar	(x,	1);
	set_cmt	(0X101D6E,	"result",	0);
	create_insn	(x=0X101D74);
	op_stkvar	(x,	1);
	create_insn	(x=0X101D82);
	op_stkvar	(x,	1);
	create_insn	(x=0X101D8C);
	op_stkvar	(x,	1);
	create_insn	(x=0X101DDC);
	op_stkvar	(x,	1);
	create_insn	(x=0X101DE2);
	op_stkvar	(x,	1);
	create_insn	(x=0X101DEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X101DF6);
	op_plain_offset	(x,	1,	0X60006480);
	op_plain_offset	(x,	129,	0X60006480);
	create_insn	(x=0X101DFA);
	op_plain_offset	(x,	1,	0X60005000);
	op_plain_offset	(x,	129,	0X60005000);
	create_insn	(x=0X101DFC);
	op_stkvar	(x,	1);
	create_dword	(x=0X101E0C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X101E10);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X101E14);
	create_dword	(x=0X101E18);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X101E1C);
	set_name	(0X101E1C,	"try_load_from_storage");
	create_insn	(x=0X101E1E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X101E24);
	op_plain_offset	(x,	1,	0X40000000);
	op_plain_offset	(x,	129,	0X40000000);
	set_cmt	(0X101E26,	"SCRATCH0",	0);
	create_insn	(x=0X101E2C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X101E2E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X101E34);
	op_plain_offset	(x,	1,	0X40002CF0);
	op_plain_offset	(x,	129,	0X40002CF0);
	set_cmt	(0X101E38,	"flag",	0);
	set_cmt	(0X101E3A,	"bit",	0);
	create_insn	(x=0X101E40);
	op_plain_offset	(x,	1,	0X40000020);
	op_plain_offset	(x,	129,	0X40000020);
	set_cmt	(0X101E42,	"a1",	0);
	create_insn	(x=0X101E42);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X101E4C,	"a1",	0);
	create_insn	(x=0X101E4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X101E4E);
	op_plain_offset	(x,	1,	0X40000020);
	op_plain_offset	(x,	129,	0X40000020);
	create_insn	(x=0X101E56);
	op_plain_offset	(x,	1,	0X40002CF0);
	op_plain_offset	(x,	129,	0X40002CF0);
	create_insn	(x=0X101E58);
	op_stkvar	(x,	1);
	create_insn	(x=0X101E5E);
	op_plain_offset	(x,	1,	0X40002CF0);
	op_plain_offset	(x,	129,	0X40002CF0);
	create_insn	(0X101E62);
	create_insn	(x=0X101E64);
	op_plain_offset	(x,	1,	0X40002CF0);
	op_plain_offset	(x,	129,	0X40002CF0);
	create_insn	(x=0X101E68);
	op_plain_offset	(x,	1,	0X40002CF0);
	op_plain_offset	(x,	129,	0X40002CF0);
	set_cmt	(0X101E70,	"a1",	0);
	create_insn	(x=0X101E70);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X101E7A,	"old_time",	0);
	create_insn	(x=0X101E80);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X101E82);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X101E84);
	op_plain_offset	(x,	1,	0X40000000);
	op_plain_offset	(x,	129,	0X40000000);
	create_insn	(x=0X101E86);
	op_plain_offset	(x,	1,	0X40002CF0);
	op_plain_offset	(x,	129,	0X40002CF0);
	create_insn	(x=0X101E8E);
	op_plain_offset	(x,	1,	0X40002CF0);
	op_plain_offset	(x,	129,	0X40002CF0);
	set_cmt	(0X101E96,	"a1",	0);
	create_insn	(x=0X101E96);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X101EA0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X101EA8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X101EBE);
	op_plain_offset	(x,	1,	0X40000000);
	op_plain_offset	(x,	129,	0X40000000);
	create_insn	(0X101EC8);
	create_insn	(x=0X101ECA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X101ECE,	"a4",	0);
	set_cmt	(0X101ED0,	"a2",	0);
	set_cmt	(0X101ED2,	"struct boot_device_load_context_maybe *",	0);
	set_cmt	(0X101EE2,	"ctx",	0);
	create_insn	(x=0X101EE2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X101EE4,	"entrypoint",	0);
	create_insn	(x=0X101EE4);
	op_stkvar	(x,	1);
	set_cmt	(0X101EEE,	"old_time",	0);
	create_insn	(x=0X101EF4);
	op_plain_offset	(x,	1,	0X40000000);
	op_plain_offset	(x,	129,	0X40000000);
	create_insn	(0X101EFE);
	set_name	(0X101EFE,	"storage_ctx::storage_ctx");
	set_cmt	(0X101F02,	"result",	0);
	create_insn	(x=0X101F02);
	op_stkvar	(x,	1);
	set_cmt	(0X101F08,	"result",	0);
	create_insn	(x=0X101F08);
	op_stkvar	(x,	1);
	create_insn	(x=0X101F26);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X101F2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X101F2E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X101F34);
	op_stkvar	(x,	1);
	set_cmt	(0X101F36,	"a1",	0);
	create_insn	(x=0X101F44);
	op_stkvar	(x,	1);
	create_insn	(x=0X101F4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X101F4E);
	op_stkvar	(x,	1);
	create_insn	(x=0X101F50);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X101F56,	"boot_selector_c",	0);
	create_insn	(x=0X101F58);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X101F5A);
	op_plain_offset	(x,	1,	0X40000000);
	op_plain_offset	(x,	129,	0X40000000);
	set_cmt	(0X101F5C,	"bootdev_info",	0);
	create_insn	(x=0X101F5C);
	op_stkvar	(x,	1);
	set_cmt	(0X101F5E,	"ctx",	0);
	create_insn	(0X101F6C);
	set_name	(0X101F6C,	"configure_sdram");
	create_insn	(x=0X101F72);
	op_plain_offset	(x,	1,	0X40000680);
	op_plain_offset	(x,	129,	0X40000680);
	create_insn	(0X101F82);
	create_insn	(x=0X101F86);
	op_plain_offset	(x,	1,	0X40000680);
	op_plain_offset	(x,	129,	0X40000680);
	create_insn	(0X101F90);
	create_insn	(x=0X101FCE);
	op_stkvar	(x,	1);
	set_cmt	(0X101FE2,	"a2",	0);
	create_insn	(x=0X101FE2);
	op_stkvar	(x,	1);
	set_cmt	(0X101FE4,	"a1",	0);
	create_insn	(x=0X101FFA);
	op_plain_offset	(x,	1,	0X40000020);
	op_plain_offset	(x,	129,	0X40000020);
	create_dword	(x=0X102000);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X102004);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X102004,	"ctx");
	create_dword	(x=0X102008);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X10200C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X102010);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X102014);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X102018);
	create_dword	(0X10201C);
	create_insn	(0X102020);
	set_name	(0X102020,	"fuse_is_public_key_crypto_enabled");
	create_insn	(x=0X102022);
	op_plain_offset	(x,	1,	0X7000FA40);
	op_plain_offset	(x,	129,	0X7000FA40);
	create_insn	(0X10202C);
	create_insn	(0X102030);
	set_name	(0X102030,	"get_security_operation_mode");
	create_insn	(0X102040);
	create_insn	(0X102054);
	create_insn	(0X102066);
	create_insn	(0X10206A);
	create_insn	(0X102076);
	create_insn	(0X10207A);
	set_name	(0X10207A,	"fuse_is_odm_and_not_fa");
	create_insn	(0X102090);
	create_insn	(0X102094);
	set_name	(0X102094,	"fuse_is_odm_and_aes");
	create_insn	(0X1020AA);
	create_insn	(0X1020C8);
	set_name	(0X1020C8,	"fuse_is_this_a_devboard");
	create_insn	(0X1020E6);
	set_cmt	(0X1020EA,	"out",	0);
	create_insn	(0X1020EA);
	set_name	(0X1020EA,	"fuse_get_private_key");
	set_cmt	(0X1020F0,	"len",	0);
	set_cmt	(0X1020F2,	"in",	0);
	set_cmt	(0X1020FA,	"out",	0);
	create_insn	(0X1020FA);
	set_name	(0X1020FA,	"fuse_get_device_key");
	set_cmt	(0X102100,	"len",	0);
	set_cmt	(0X102102,	"in",	0);
	create_insn	(0X10210A);
	set_name	(0X10210A,	"fuse_disable_privatekey");
	create_insn	(x=0X10210E);
	op_plain_offset	(x,	1,	0X7000F800);
	op_plain_offset	(x,	129,	0X7000F800);
	set_cmt	(0X102112,	"out",	0);
	create_insn	(0X102112);
	set_name	(0X102112,	"fuse_get_public_key_hash");
	set_cmt	(0X102118,	"len",	0);
	set_cmt	(0X10211A,	"in",	0);
	create_insn	(0X102122);
	set_name	(0X102122,	"fuse_skip_device_selection_straps");
	create_insn	(x=0X102132);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X102132,	"fuse_get_boot_device");
	create_insn	(0X102146);
	set_name	(0X102146,	"fuse_get_charger_detect");
	create_insn	(0X102156);
	set_name	(0X102156,	"fuse_get_boot_device_info");
	create_insn	(x=0X10215A);
	op_plain_offset	(x,	1,	0X7000F980);
	op_plain_offset	(x,	129,	0X7000F980);
	create_insn	(0X102164);
	set_name	(0X102164,	"fuse_is_force_rcm_in_two_button_mode");
	create_insn	(x=0X102172);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X102172,	"fuse_get_sku_info");
	create_insn	(x=0X102174);
	op_plain_offset	(x,	1,	0X7000F900);
	op_plain_offset	(x,	129,	0X7000F900);
	create_insn	(0X10217A);
	set_name	(0X10217A,	"fuse_get_sku_info_lowermost_3_bits");
	create_insn	(x=0X10217C);
	op_plain_offset	(x,	1,	0X7000F900);
	op_plain_offset	(x,	129,	0X7000F900);
	create_insn	(x=0X102186);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X102186,	"fuse_get_some_sata_calib_val");
	create_insn	(x=0X10218A);
	op_plain_offset	(x,	1,	0X7000FA00);
	op_plain_offset	(x,	129,	0X7000FA00);
	create_insn	(0X1021A2);
	set_name	(0X1021A2,	"fuse_get_watchdog_enable");
	create_insn	(0X1021B2);
	set_name	(0X1021B2,	"fuse_get_rcm_controller_mode");
	create_insn	(0X1021C0);
	set_name	(0X1021C0,	"fuse_get_hardkey");
	create_insn	(x=0X1021C4);
	op_plain_offset	(x,	1,	0X7000FAC0);
	op_plain_offset	(x,	129,	0X7000FAC0);
	create_insn	(0X1021C8);
	set_name	(0X1021C8,	"fuse_get_aec_bit1");
	create_insn	(x=0X1021CC);
	op_plain_offset	(x,	1,	0X7000FAC0);
	op_plain_offset	(x,	129,	0X7000FAC0);
	create_insn	(0X1021D8);
	set_name	(0X1021D8,	"fuse_get_hardkey_status");
	create_insn	(x=0X1021DC);
	op_plain_offset	(x,	1,	0X7000FAC0);
	op_plain_offset	(x,	129,	0X7000FAC0);
	create_insn	(0X1021E6);
	create_insn	(0X1021F0);
	create_insn	(0X1021F4);
	set_name	(0X1021F4,	"should_use_hardkey");
	create_insn	(0X102216);
	create_insn	(0X102224);
	create_insn	(0X10222C);
	create_insn	(0X102230);
	set_name	(0X102230,	"fuse_is_private_aes_key_set");
	create_insn	(x=0X102234);
	op_plain_offset	(x,	1,	0X7000F980);
	op_plain_offset	(x,	129,	0X7000F980);
	create_insn	(x=0X102236);
	op_plain_offset	(x,	1,	0X7000F980);
	op_plain_offset	(x,	129,	0X7000F980);
	create_insn	(x=0X102238);
	op_plain_offset	(x,	1,	0X7000F980);
	op_plain_offset	(x,	129,	0X7000F980);
	create_insn	(x=0X10223A);
	op_plain_offset	(x,	1,	0X7000F980);
	op_plain_offset	(x,	129,	0X7000F980);
	create_insn	(0X102248);
	set_name	(0X102248,	"le_words_to_bytes");
	create_insn	(0X102250);
	create_dword	(x=0X102264);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X102268);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X10226C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X102270);
	set_name	(0X102270,	"unused_print_callback");
	create_insn	(x=0X10227A);
	op_stkvar	(x,	1);
	create_insn	(0X10228A);
	create_insn	(x=0X10228E);
	op_stkvar	(x,	1);
	create_insn	(0X102296);
	set_name	(0X102296,	"setup_debug_string_table");
	create_insn	(x=0X102298);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X10229A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1022A0);
	op_plain_offset	(x,	1,	0X40002970);
	op_plain_offset	(x,	129,	0X40002970);
	create_insn	(x=0X1022BE);
	op_plain_offset	(x,	1,	0X40038000);
	op_plain_offset	(x,	129,	0X40038000);
	create_insn	(0X1022C4);
	create_insn	(0X1022EA);
	set_name	(0X1022EA,	"debug_output");
	create_insn	(x=0X1022F0);
	op_plain_offset	(x,	1,	0X40002970);
	op_plain_offset	(x,	129,	0X40002970);
	create_insn	(x=0X1022F8);
	op_stkvar	(x,	1);
	create_insn	(0X102302);
	create_insn	(0X102308);
	set_cmt	(0X102310,	"a3",	0);
	set_cmt	(0X102316,	"a1",	0);
	set_cmt	(0X102318,	"a2",	0);
	set_cmt	(0X10231A,	"a4",	0);
	create_insn	(x=0X10231A);
	op_stkvar	(x,	1);
	create_dword	(x=0X102328);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X10232C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X102330);
	op_chr		(x,	0);
	create_dword	(x=0X102334);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X102338);
	create_insn	(x=0X10233C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X10236C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X1023BE);
	set_name	(0X1023BE,	"pmc_scratch0_bittest");
	create_insn	(x=0X1023C2);
	op_plain_offset	(x,	1,	0X7000E440);
	op_plain_offset	(x,	129,	0X7000E440);
	create_insn	(0X1023CC);
	create_insn	(0X1023D0);
	set_name	(0X1023D0,	"pmc_scratch0_bitset");
	create_insn	(x=0X1023D4);
	op_plain_offset	(x,	1,	0X7000E440);
	op_plain_offset	(x,	129,	0X7000E440);
	create_insn	(0X1023DE);
	create_insn	(x=0X1023E0);
	op_plain_offset	(x,	1,	0X7000E440);
	op_plain_offset	(x,	129,	0X7000E440);
	create_insn	(0X1023E4);
	create_insn	(x=0X1023E8);
	op_plain_offset	(x,	1,	0X7000E4C0);
	op_plain_offset	(x,	129,	0X7000E4C0);
	create_insn	(0X1023F0);
	create_insn	(x=0X1023F4);
	op_plain_offset	(x,	1,	0X7000E4C0);
	op_plain_offset	(x,	129,	0X7000E4C0);
	create_dword	(0X1023F8);
	create_insn	(0X1023FC);
	set_name	(0X1023FC,	"rcm_prot_send_errorcode");
	create_insn	(x=0X10240A);
	op_plain_offset	(x,	1,	0X40002E30);
	op_plain_offset	(x,	129,	0X40002E30);
	create_insn	(0X102436);
	set_name	(0X102436,	"rcm_receive_message_check_len_insecure");
	create_insn	(x=0X102438);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X102446);
	op_stkvar	(x,	1);
	create_insn	(x=0X102448);
	op_stkvar	(x,	1);
	create_insn	(x=0X10244E);
	op_stkvar	(x,	1);
	create_insn	(x=0X102450);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X102452);
	op_stkvar	(x,	1);
	create_insn	(x=0X102456);
	op_stkvar	(x,	1);
	create_insn	(x=0X10245E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10246A);
	op_stkvar	(x,	1);
	create_insn	(x=0X102470);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X102472,	"a1",	0);
	create_insn	(x=0X102474);
	op_stkvar	(x,	1);
	set_cmt	(0X102476,	"function",	0);
	set_cmt	(0X102478,	"a2",	0);
	create_insn	(x=0X102480);
	op_stkvar	(x,	1);
	create_insn	(x=0X102482);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X10248C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10248E);
	op_stkvar	(x,	1);
	set_cmt	(0X1024A4,	"src",	0);
	create_insn	(x=0X1024A4);
	op_stkvar	(x,	1);
	set_cmt	(0X1024A6,	"n",	0);
	set_cmt	(0X1024A8,	"dst",	0);
	create_insn	(x=0X1024AE);
	op_stkvar	(x,	1);
	create_insn	(x=0X1024B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X1024B6);
	op_stkvar	(x,	1);
	create_insn	(x=0X1024BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X1024C8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1024CA);
	op_stkvar	(x,	1);
	create_insn	(x=0X1024D4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1024F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X1024F6);
	op_stkvar	(x,	1);
	set_cmt	(0X102500,	"src",	0);
	create_insn	(x=0X102500);
	op_stkvar	(x,	1);
	set_cmt	(0X102502,	"n",	0);
	set_cmt	(0X102504,	"dst",	0);
	create_insn	(x=0X10250A);
	op_stkvar	(x,	1);
	create_insn	(x=0X102514);
	op_stkvar	(x,	1);
	create_insn	(0X102528);
	create_insn	(x=0X10252C);
	op_stkvar	(x,	1);
	create_insn	(x=0X102532);
	op_stkvar	(x,	1);
	create_insn	(x=0X102534);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X10253C);
	op_stkvar	(x,	1);
	create_insn	(x=0X102544);
	op_stkvar	(x,	1);
	create_insn	(0X102554);
	create_insn	(0X102560);
	create_insn	(x=0X102564);
	op_stkvar	(x,	1);
	create_insn	(0X102568);
	create_insn	(0X10256C);
	create_insn	(x=0X102572);
	op_stkvar	(x,	1);
	create_insn	(x=0X102576);
	op_stkvar	(x,	1);
	create_insn	(x=0X10257C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10259A);
	op_plain_offset	(x,	1,	0X40002E50);
	op_plain_offset	(x,	129,	0X40002E50);
	create_insn	(x=0X10259E);
	op_plain_offset	(x,	1,	0X40002E50);
	op_plain_offset	(x,	129,	0X40002E50);
	create_insn	(x=0X1025AA);
	op_stkvar	(x,	1);
	create_insn	(x=0X1025AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X1025AE);
	op_stkvar	(x,	1);
	create_insn	(x=0X1025B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X1025B4);
	op_plain_offset	(x,	1,	0X40002E50);
	op_plain_offset	(x,	129,	0X40002E50);
	create_insn	(x=0X1025B6);
	op_plain_offset	(x,	1,	0X40002E50);
	op_plain_offset	(x,	129,	0X40002E50);
	create_insn	(x=0X1025C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X1025DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X1025E0);
	op_plain_offset	(x,	1,	0X40002E50);
	op_plain_offset	(x,	129,	0X40002E50);
	create_insn	(x=0X1025E2);
	op_plain_offset	(x,	1,	0X40002E50);
	op_plain_offset	(x,	129,	0X40002E50);
	create_insn	(0X102604);
	set_name	(0X102604,	"rcm_msg_validate");
	create_insn	(x=0X102612);
	op_plain_offset	(x,	1,	0X40002E50);
	op_plain_offset	(x,	129,	0X40002E50);
	create_insn	(x=0X102616);
	op_plain_offset	(x,	1,	0X400030D8);
	op_plain_offset	(x,	129,	0X400030D8);
	create_insn	(0X10262A);
	create_insn	(x=0X10263A);
	op_plain_offset	(x,	1,	0X40002E30);
	op_plain_offset	(x,	129,	0X40002E30);
	create_insn	(0X102644);
	create_insn	(0X10265C);
	create_insn	(x=0X102668);
	op_plain_offset	(x,	1,	0X40003098);
	op_plain_offset	(x,	129,	0X40003098);
	create_insn	(0X102672);
	create_insn	(x=0X102674);
	op_plain_offset	(x,	1,	0X40003098);
	op_plain_offset	(x,	129,	0X40003098);
	create_insn	(0X102682);
	set_cmt	(0X102684,	"len",	0);
	set_cmt	(0X102686,	"data",	0);
	create_insn	(0X102694);
	create_insn	(x=0X102696);
	op_plain_offset	(x,	1,	0X40003098);
	op_plain_offset	(x,	129,	0X40003098);
	create_insn	(x=0X102698);
	op_plain_offset	(x,	1,	0X40003098);
	op_plain_offset	(x,	129,	0X40003098);
	set_cmt	(0X10269A,	"data",	0);
	set_cmt	(0X10269E,	"len",	0);
	create_insn	(x=0X1026AC);
	op_plain_offset	(x,	1,	0X40003098);
	op_plain_offset	(x,	129,	0X40003098);
	set_cmt	(0X1026AE,	"switch 13 cases ",	0);
	set_cmt	(0X1026B3,	"jump table for switch statement",	0);
	create_byte	(0X1026B3);
	make_array	(0X1026B3,	0XD);
	set_cmt	(0X1026C0,	"jumptable 001026AE cases 1,5-7,11",	1);
	create_insn	(x=0X1026C0);
	op_plain_offset	(x,	1,	0X40003098);
	op_plain_offset	(x,	129,	0X40003098);
	set_cmt	(0X1026C8,	"jumptable 001026AE cases 2,3,8-10",	1);
	create_insn	(0X1026C8);
	set_cmt	(0X1026D0,	"jumptable 001026AE case 4",	1);
	create_insn	(x=0X1026D0);
	op_plain_offset	(x,	1,	0X40003098);
	op_plain_offset	(x,	129,	0X40003098);
	create_insn	(x=0X1026D6);
	op_plain_offset	(x,	1,	0X40003098);
	op_plain_offset	(x,	129,	0X40003098);
	set_cmt	(0X1026E8,	"jumptable 001026AE default case",	1);
	create_insn	(0X1026E8);
	create_insn	(0X1026EC);
	create_insn	(0X1026F0);
	set_name	(0X1026F0,	"rcm_prot_handle_message");
	create_insn	(x=0X1026F4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1026FC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1026FE);
	op_plain_offset	(x,	1,	0X40003098);
	op_plain_offset	(x,	129,	0X40003098);
	set_cmt	(0X102700,	"switch 13 cases ",	0);
	set_cmt	(0X102705,	"jump table for switch statement",	0);
	create_byte	(0X102705);
	make_array	(0X102705,	0XD);
	set_cmt	(0X102712,	"jumptable 00102700 case 1",	1);
	create_insn	(0X102712);
	set_cmt	(0X102716,	"jumptable 00102700 case 4",	1);
	create_insn	(0X102716);
	set_cmt	(0X102726,	"jumptable 00102700 case 5",	1);
	create_insn	(0X102726);
	set_cmt	(0X10272A,	"jumptable 00102700 case 6",	1);
	create_insn	(0X10272A);
	set_cmt	(0X10272E,	"jumptable 00102700 case 7",	1);
	create_insn	(0X10272E);
	set_cmt	(0X102732,	"jumptable 00102700 case 11",	1);
	create_insn	(0X102732);
	create_insn	(x=0X102738);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X10273A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10273C);
	op_plain_offset	(x,	1,	0X40003098);
	op_plain_offset	(x,	129,	0X40003098);
	create_insn	(x=0X10273E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X102746);
	op_stkvar	(x,	1);
	create_insn	(x=0X102748);
	op_plain_offset	(x,	1,	0X40003098);
	op_plain_offset	(x,	129,	0X40003098);
	create_insn	(x=0X10274E);
	op_stkvar	(x,	1);
	create_insn	(x=0X102750);
	op_plain_offset	(x,	1,	0X40003098);
	op_plain_offset	(x,	129,	0X40003098);
	create_insn	(x=0X102756);
	op_stkvar	(x,	1);
	create_insn	(x=0X102758);
	op_plain_offset	(x,	1,	0X40003098);
	op_plain_offset	(x,	129,	0X40003098);
	create_insn	(x=0X10275E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X10276A);
	op_plain_offset	(x,	1,	0X400030D8);
	op_plain_offset	(x,	129,	0X400030D8);
	create_insn	(x=0X10276C);
	op_plain_offset	(x,	1,	0X40002E30);
	op_plain_offset	(x,	129,	0X40002E30);
	set_cmt	(0X102770,	"errorcode",	0);
	create_insn	(0X102770);
	set_cmt	(0X10277A,	"jumptable 00102700 cases 2,3,8-10",	1);
	set_cmt	(0X102780,	"jumptable 00102700 default case",	1);
	create_insn	(0X102780);
	create_insn	(0X10278A);
	set_name	(0X10278A,	"load_rcm_aes_key");
	create_insn	(x=0X10278C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X102792);
	op_plain_offset	(x,	1,	0X40002E58);
	op_plain_offset	(x,	129,	0X40002E58);
	create_insn	(x=0X1027A6);
	op_plain_offset	(x,	1,	0X40002E50);
	op_plain_offset	(x,	129,	0X40002E50);
	create_insn	(x=0X1027AA);
	op_plain_offset	(x,	1,	0X40002E50);
	op_plain_offset	(x,	129,	0X40002E50);
	create_insn	(x=0X1027AE);
	op_plain_offset	(x,	1,	0X40002E50);
	op_plain_offset	(x,	129,	0X40002E50);
	create_insn	(x=0X1027BE);
	op_plain_offset	(x,	1,	0X40002E58);
	op_plain_offset	(x,	129,	0X40002E58);
	create_insn	(x=0X1027C0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1027C2);
	op_plain_offset	(x,	1,	0X40002E50);
	op_plain_offset	(x,	129,	0X40002E50);
	create_insn	(x=0X1027C4);
	op_plain_offset	(x,	1,	0X40002E50);
	op_plain_offset	(x,	129,	0X40002E50);
	set_cmt	(0X1027C6,	"n",	0);
	set_cmt	(0X1027CA,	"src",	0);
	set_cmt	(0X1027CC,	"dst",	0);
	create_insn	(x=0X1027D2);
	op_plain_offset	(x,	1,	0X40002E50);
	op_plain_offset	(x,	129,	0X40002E50);
	set_cmt	(0X1027D8,	"key",	0);
	set_cmt	(0X1027DA,	"type",	0);
	set_cmt	(0X1027DC,	"a2",	0);
	set_cmt	(0X1027DE,	"key_index",	0);
	set_cmt	(0X1027E4,	"a2",	0);
	set_cmt	(0X1027E6,	"type",	0);
	set_cmt	(0X1027E8,	"key_index",	0);
	set_cmt	(0X1027EA,	"key",	0);
	set_cmt	(0X1027F0,	"a2",	0);
	set_cmt	(0X1027F2,	"type",	0);
	set_cmt	(0X1027F4,	"key_index",	0);
	set_cmt	(0X1027F6,	"key",	0);
	create_insn	(x=0X1027FC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X102804);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X102808);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X10280C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X102810);
	create_dword	(x=0X102814);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X102818);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X10281C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X102820);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X102824);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X102828,	"a2",	0);
	create_insn	(0X102828);
	set_cmt	(0X10282A,	"unused",	0);
	create_insn	(x=0X10282A);
	op_stkvar	(x,	1);
	set_cmt	(0X10282C,	"dst_key_index",	0);
	set_cmt	(0X10282E,	"src_key_index",	0);
	set_cmt	(0X102830,	"a4",	0);
	set_cmt	(0X102836,	"a2",	0);
	set_cmt	(0X102838,	"dst_key_index",	0);
	set_cmt	(0X10283A,	"src_key_index",	0);
	set_cmt	(0X10283C,	"a4",	0);
	set_cmt	(0X10283E,	"unused",	0);
	create_insn	(x=0X10283E);
	op_stkvar	(x,	1);
	set_cmt	(0X102846,	"key",	0);
	create_insn	(0X102846);
	set_cmt	(0X102848,	"type",	0);
	set_cmt	(0X10284A,	"a2",	0);
	set_cmt	(0X10284C,	"key_index",	0);
	set_cmt	(0X102852,	"key",	0);
	set_cmt	(0X102854,	"type",	0);
	set_cmt	(0X102856,	"a2",	0);
	set_cmt	(0X102858,	"key_index",	0);
	set_cmt	(0X10285E,	"a2",	0);
	set_cmt	(0X102860,	"type",	0);
	set_cmt	(0X102862,	"key_index",	0);
	set_cmt	(0X102864,	"key",	0);
	set_cmt	(0X10286A,	"a2",	0);
	set_cmt	(0X10286C,	"type",	0);
	set_cmt	(0X10286E,	"key_index",	0);
	set_cmt	(0X102870,	"key",	0);
	set_cmt	(0X102876,	"a2",	0);
	set_cmt	(0X102878,	"type",	0);
	set_cmt	(0X10287A,	"key_index",	0);
	set_cmt	(0X10287C,	"key",	0);
	set_cmt	(0X102882,	"a2",	0);
	set_cmt	(0X102884,	"type",	0);
	set_cmt	(0X102886,	"key_index",	0);
	set_cmt	(0X102888,	"key",	0);
	create_insn	(0X102896);
	set_name	(0X102896,	"try_load_from_rcm");
	create_insn	(x=0X10289E);
	op_stkvar	(x,	1);
	create_insn	(x=0X1028A4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1028A8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1028AC);
	op_plain_offset	(x,	1,	0X40000000);
	op_plain_offset	(x,	129,	0X40000000);
	create_insn	(x=0X1028B4);
	op_plain_offset	(x,	1,	0X40002E50);
	op_plain_offset	(x,	129,	0X40002E50);
	create_insn	(x=0X1028B6);
	op_plain_offset	(x,	1,	0X40002E30);
	op_plain_offset	(x,	129,	0X40002E30);
	create_insn	(x=0X1028B8);
	op_plain_offset	(x,	1,	0X40002E30);
	op_plain_offset	(x,	129,	0X40002E30);
	create_insn	(x=0X1028BC);
	op_plain_offset	(x,	1,	0X40002E50);
	op_plain_offset	(x,	129,	0X40002E50);
	create_insn	(x=0X1028BE);
	op_plain_offset	(x,	1,	0X40002E50);
	op_plain_offset	(x,	129,	0X40002E50);
	create_insn	(x=0X1028C2);
	op_plain_offset	(x,	1,	0X40002E50);
	op_plain_offset	(x,	129,	0X40002E50);
	create_insn	(x=0X1028C6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1028C8);
	op_plain_offset	(x,	1,	0X40002E50);
	op_plain_offset	(x,	129,	0X40002E50);
	create_insn	(x=0X1028D2);
	op_stkvar	(x,	1);
	create_insn	(x=0X1028D4);
	op_plain_offset	(x,	1,	0X40003100);
	op_plain_offset	(x,	129,	0X40003100);
	create_insn	(x=0X1028D8);
	op_plain_offset	(x,	1,	0X40003100);
	op_plain_offset	(x,	129,	0X40003100);
	create_insn	(x=0X1028DA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1028DE);
	op_plain_offset	(x,	1,	0X40003100);
	op_plain_offset	(x,	129,	0X40003100);
	set_cmt	(0X1028E4,	"a1",	0);
	create_insn	(x=0X1028F8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1028FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X102904);
	op_plain_offset	(x,	1,	0X40002E30);
	op_plain_offset	(x,	129,	0X40002E30);
	set_cmt	(0X102906,	"timer_value",	0);
	create_insn	(x=0X10290C);
	op_plain_offset	(x,	1,	0X40002E30);
	op_plain_offset	(x,	129,	0X40002E30);
	create_insn	(x=0X10290E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X102932);
	create_insn	(0X102944);
	create_insn	(x=0X102948);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X102950);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X102956);
	op_plain_offset	(x,	1,	0X40003100);
	op_plain_offset	(x,	129,	0X40003100);
	create_insn	(x=0X102958);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X102960);
	op_plain_offset	(x,	1,	0X40002E30);
	op_plain_offset	(x,	129,	0X40002E30);
	set_cmt	(0X10296A,	"hash_method",	0);
	create_insn	(x=0X10296A);
	op_stkvar	(x,	1);
	set_cmt	(0X10296C,	"data",	0);
	create_insn	(x=0X10296C);
	op_stkvar	(x,	1);
	set_cmt	(0X10296E,	"buffer",	0);
	set_cmt	(0X102970,	"data_size",	0);
	set_cmt	(0X102972,	"hash_out",	0);
	create_insn	(x=0X102972);
	op_stkvar	(x,	1);
	set_cmt	(0X102978,	"a1",	0);
	create_insn	(x=0X102978);
	op_stkvar	(x,	1);
	set_cmt	(0X10297E,	"len",	0);
	set_cmt	(0X102980,	"a2",	0);
	create_insn	(x=0X102980);
	op_stkvar	(x,	1);
	set_cmt	(0X102982,	"a1",	0);
	create_insn	(x=0X102982);
	op_stkvar	(x,	1);
	create_insn	(x=0X10298C);
	op_plain_offset	(x,	1,	0X40002E30);
	op_plain_offset	(x,	129,	0X40002E30);
	set_cmt	(0X102990,	"src",	0);
	create_insn	(x=0X102990);
	op_stkvar	(x,	1);
	set_cmt	(0X102992,	"dst",	0);
	create_insn	(x=0X102992);
	op_stkvar	(x,	1);
	set_cmt	(0X102998,	"len",	0);
	set_cmt	(0X10299C,	"c",	0);
	set_cmt	(0X10299E,	"a1",	0);
	create_insn	(x=0X10299E);
	op_stkvar	(x,	1);
	set_cmt	(0X1029A6,	"index",	0);
	create_insn	(x=0X1029AA);
	op_stkvar	(x,	1);
	set_cmt	(0X1029AC,	"exponent_size",	0);
	set_cmt	(0X1029AE,	"pubkey",	0);
	create_insn	(x=0X1029AE);
	op_stkvar	(x,	1);
	create_insn	(x=0X1029B4);
	op_plain_offset	(x,	1,	0X40002E30);
	op_plain_offset	(x,	129,	0X40002E30);
	create_insn	(x=0X1029BA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1029C0,	"hash_method",	0);
	create_insn	(x=0X1029C0);
	op_stkvar	(x,	1);
	set_cmt	(0X1029C4,	"buffer",	0);
	create_insn	(x=0X1029C4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1029C6,	"data_size",	0);
	set_cmt	(0X1029C8,	"data",	0);
	create_insn	(x=0X1029C8);
	op_stkvar	(x,	1);
	set_cmt	(0X1029CA,	"hash_out",	0);
	create_insn	(x=0X1029CA);
	op_stkvar	(x,	1);
	create_insn	(x=0X1029D0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1029D6);
	op_stkvar	(x,	1);
	set_cmt	(0X1029E4,	"data_len",	0);
	create_insn	(x=0X1029E4);
	op_stkvar	(x,	1);
	set_cmt	(0X1029E6,	"data",	0);
	create_insn	(x=0X1029E6);
	op_stkvar	(x,	1);
	set_cmt	(0X1029EA,	"se_rsa_keyslot",	0);
	set_cmt	(0X1029EC,	"pubkey_hash",	0);
	create_insn	(x=0X1029EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X102A00);
	op_plain_offset	(x,	1,	0X40002E50);
	op_plain_offset	(x,	129,	0X40002E50);
	set_cmt	(0X102A06,	"a1",	0);
	create_insn	(x=0X102A06);
	op_stkvar	(x,	1);
	create_insn	(x=0X102A0E);
	op_stkvar	(x,	1);
	create_insn	(x=0X102A18);
	op_stkvar	(x,	1);
	create_insn	(0X102A1C);
	create_insn	(x=0X102A20);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X102A40);
	set_cmt	(0X102A44,	"a1",	0);
	create_insn	(x=0X102A44);
	op_stkvar	(x,	1);
	create_insn	(0X102A54);
	create_insn	(x=0X102A58);
	op_stkvar	(x,	1);
	create_insn	(x=0X102A60);
	op_plain_offset	(x,	1,	0X40002E30);
	op_plain_offset	(x,	129,	0X40002E30);
	create_insn	(x=0X102A62);
	op_stkvar	(x,	1);
	create_insn	(x=0X102A68);
	op_stkvar	(x,	1);
	create_insn	(x=0X102A6C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X102A70);
	op_plain_offset	(x,	1,	0X40003098);
	op_plain_offset	(x,	129,	0X40003098);
	create_insn	(x=0X102A72);
	op_stkvar	(x,	1);
	create_insn	(0X102A7A);
	create_insn	(x=0X102A7C);
	op_plain_offset	(x,	1,	0X40002E50);
	op_plain_offset	(x,	129,	0X40002E50);
	create_insn	(0X102A80);
	set_name	(0X102A80,	"rcm_send_initial_hwinfo_after_connection");
	create_insn	(x=0X102A86);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X102A8C);
	op_plain_offset	(x,	1,	0X40002E30);
	op_plain_offset	(x,	129,	0X40002E30);
	create_insn	(x=0X102A8E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X102A9A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X102AAA);
	op_stkvar	(x,	1);
	set_cmt	(0X102AB2,	"function",	0);
	set_cmt	(0X102AB4,	"a2",	0);
	set_cmt	(0X102AB6,	"a1",	0);
	create_insn	(x=0X102ABC);
	op_plain_offset	(x,	1,	0X40002E30);
	op_plain_offset	(x,	129,	0X40002E30);
	create_insn	(0X102AD6);
	set_name	(0X102AD6,	"rcm_error_and_reset_ep1");
	set_cmt	(0X102AE0,	"errorcode",	0);
	create_insn	(0X102AEE);
	create_insn	(x=0X102AF0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X102AFC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X102B02,	"a2",	0);
	create_insn	(x=0X102B02);
	op_plain_offset	(x,	1,	0X40002E50);
	op_plain_offset	(x,	129,	0X40002E50);
	set_cmt	(0X102B04,	"key_index",	0);
	create_insn	(x=0X102B04);
	op_plain_offset	(x,	1,	0X40002E50);
	op_plain_offset	(x,	129,	0X40002E50);
	set_cmt	(0X102B08,	"type",	0);
	set_cmt	(0X102B0A,	"key",	0);
	set_cmt	(0X102B10,	"a5",	0);
	create_insn	(x=0X102B10);
	op_stkvar	(x,	1);
	set_cmt	(0X102B12,	"a6",	0);
	create_insn	(x=0X102B12);
	op_stkvar	(x,	1);
	set_cmt	(0X102B14,	"a2",	0);
	create_insn	(x=0X102B14);
	op_plain_offset	(x,	1,	0X40002E50);
	op_plain_offset	(x,	129,	0X40002E50);
	set_cmt	(0X102B16,	"a1",	0);
	create_insn	(x=0X102B16);
	op_plain_offset	(x,	1,	0X40002E50);
	op_plain_offset	(x,	129,	0X40002E50);
	set_cmt	(0X102B18,	"a4",	0);
	set_cmt	(0X102B1A,	"a3",	0);
	set_cmt	(0X102B28,	"a4",	0);
	create_insn	(x=0X102B2C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X102B2E,	"a3",	0);
	set_cmt	(0X102B30,	"a5",	0);
	create_insn	(x=0X102B30);
	op_stkvar	(x,	1);
	set_cmt	(0X102B32,	"a6",	0);
	create_insn	(x=0X102B32);
	op_stkvar	(x,	1);
	set_cmt	(0X102B34,	"a2",	0);
	create_insn	(x=0X102B34);
	op_plain_offset	(x,	1,	0X40002E50);
	op_plain_offset	(x,	129,	0X40002E50);
	set_cmt	(0X102B36,	"a1",	0);
	create_insn	(x=0X102B36);
	op_plain_offset	(x,	1,	0X40002E50);
	op_plain_offset	(x,	129,	0X40002E50);
	create_dword	(x=0X102B48);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X102B4C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X102B50);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X102B50,	"buffer");
	create_dword	(x=0X102B54);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X102B54,	"a5");
	create_dword	(0X102B58);
	set_name	(0X102B58,	"timer_value");
	create_dword	(x=0X102B5C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X102B60);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X102B64);
	create_dword	(x=0X102B68);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X102B6C);
	create_dword	(0X102B70);
	create_insn	(0X102B74);
	set_name	(0X102B74,	"usb_populate_callback_table");
	create_insn	(x=0X102B7E);
	op_plain_offset	(x,	1,	0X40003114);
	op_plain_offset	(x,	129,	0X40003114);
	create_insn	(x=0X102B82);
	op_plain_offset	(x,	1,	0X40003114);
	op_plain_offset	(x,	129,	0X40003114);
	create_insn	(x=0X102B86);
	op_plain_offset	(x,	1,	0X40003114);
	op_plain_offset	(x,	129,	0X40003114);
	create_insn	(x=0X102B8A);
	op_plain_offset	(x,	1,	0X40003114);
	op_plain_offset	(x,	129,	0X40003114);
	create_insn	(x=0X102B8E);
	op_plain_offset	(x,	1,	0X40003114);
	op_plain_offset	(x,	129,	0X40003114);
	create_insn	(x=0X102B92);
	op_plain_offset	(x,	1,	0X40003114);
	op_plain_offset	(x,	129,	0X40003114);
	create_insn	(x=0X102B96);
	op_plain_offset	(x,	1,	0X40003114);
	op_plain_offset	(x,	129,	0X40003114);
	create_insn	(x=0X102B9A);
	op_plain_offset	(x,	1,	0X40003114);
	op_plain_offset	(x,	129,	0X40003114);
	create_insn	(0X102BA0);
	create_insn	(x=0X102BA8);
	op_plain_offset	(x,	1,	0X40003114);
	op_plain_offset	(x,	129,	0X40003114);
	create_insn	(x=0X102BAC);
	op_plain_offset	(x,	1,	0X40003114);
	op_plain_offset	(x,	129,	0X40003114);
	create_insn	(x=0X102BB0);
	op_plain_offset	(x,	1,	0X40003114);
	op_plain_offset	(x,	129,	0X40003114);
	create_insn	(x=0X102BB4);
	op_plain_offset	(x,	1,	0X40003114);
	op_plain_offset	(x,	129,	0X40003114);
	create_insn	(x=0X102BB8);
	op_plain_offset	(x,	1,	0X40003114);
	op_plain_offset	(x,	129,	0X40003114);
	create_insn	(x=0X102BBC);
	op_plain_offset	(x,	1,	0X40003114);
	op_plain_offset	(x,	129,	0X40003114);
	create_insn	(x=0X102BC0);
	op_plain_offset	(x,	1,	0X40003114);
	op_plain_offset	(x,	129,	0X40003114);
	create_insn	(x=0X102BC4);
	op_plain_offset	(x,	1,	0X40003114);
	op_plain_offset	(x,	129,	0X40003114);
	create_insn	(x=0X102BC8);
	op_plain_offset	(x,	1,	0X40003114);
	op_plain_offset	(x,	129,	0X40003114);
	create_insn	(0X102BCE);
	create_insn	(0X102BD2);
	set_name	(0X102BD2,	"usb_get_callback_table");
	create_dword	(x=0X102BD8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X102BDC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X102BE0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X102BE4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X102BE8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X102BEC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X102BF0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X102BF4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X102BF8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X102BFC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X102C00);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X102C04);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X102C08);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X102C0C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X102C10);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X102C14);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X102C18);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X102C1C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X102C20);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X102C24);
	set_name	(0X102C24,	"is_hardware_magical");
	create_insn	(0X102C58);
	create_dword	(0X102C5C);
	create_dword	(0X102C60);
	create_dword	(0X102C64);
	create_dword	(0X102C68);
	create_insn	(0X102C6C);
	create_insn	(x=0X102C78);
	op_plain_offset	(x,	1,	0X7000D000);
	op_plain_offset	(x,	129,	0X7000D000);
	create_insn	(x=0X102C7C);
	op_plain_offset	(x,	1,	0X7000D000);
	op_plain_offset	(x,	129,	0X7000D000);
	create_insn	(x=0X102C92);
	op_plain_offset	(x,	1,	0X7000D080);
	op_plain_offset	(x,	129,	0X7000D080);
	create_insn	(x=0X102C98);
	op_stkvar	(x,	1);
	create_insn	(x=0X102C9C);
	op_plain_offset	(x,	1,	0X7000D080);
	op_plain_offset	(x,	129,	0X7000D080);
	create_insn	(x=0X102CA2);
	op_stkvar	(x,	1);
	create_insn	(x=0X102CBE);
	op_plain_offset	(x,	1,	0X7000D000);
	op_plain_offset	(x,	129,	0X7000D000);
	create_insn	(0X102CD6);
	create_insn	(x=0X102CE2);
	op_plain_offset	(x,	1,	0X7000D000);
	op_plain_offset	(x,	129,	0X7000D000);
	create_insn	(0X102CEE);
	create_insn	(0X102D1E);
	create_insn	(x=0X102D24);
	op_stkvar	(x,	1);
	create_insn	(x=0X102D26);
	op_stkvar	(x,	1);
	create_insn	(x=0X102D2C);
	op_plain_offset	(x,	1,	0X7000E580);
	op_plain_offset	(x,	129,	0X7000E580);
	create_insn	(x=0X102D34);
	op_plain_offset	(x,	1,	0X7000E580);
	op_plain_offset	(x,	129,	0X7000E580);
	create_insn	(x=0X102D5A);
	op_plain_offset	(x,	1,	0X7000E640);
	op_plain_offset	(x,	129,	0X7000E640);
	create_insn	(x=0X102D62);
	op_plain_offset	(x,	1,	0X7000E640);
	op_plain_offset	(x,	129,	0X7000E640);
	create_insn	(x=0X102D74);
	op_plain_offset	(x,	1,	0X7000E640);
	op_plain_offset	(x,	129,	0X7000E640);
	create_insn	(x=0X102D7A);
	op_plain_offset	(x,	1,	0X7000E640);
	op_plain_offset	(x,	129,	0X7000E640);
	create_insn	(x=0X102D86);
	op_stkvar	(x,	1);
	create_insn	(x=0X102D8E);
	op_stkvar	(x,	1);
	create_insn	(x=0X102D96);
	op_stkvar	(x,	1);
	create_insn	(x=0X102D9E);
	op_stkvar	(x,	1);
	create_insn	(x=0X102DA0);
	op_stkvar	(x,	1);
	create_insn	(0X102DA8);
	create_insn	(x=0X102DAE);
	op_stkvar	(x,	1);
	create_insn	(x=0X102DB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X102DBA);
	op_stkvar	(x,	1);
	create_insn	(x=0X102DC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X102DE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X102DE2);
	op_stkvar	(x,	1);
	create_insn	(x=0X102DE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X102DF2);
	op_stkvar	(x,	1);
	create_insn	(x=0X102DF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X102DF6);
	op_stkvar	(x,	1);
	create_insn	(x=0X102E04);
	op_stkvar	(x,	1);
	create_insn	(x=0X102E06);
	op_stkvar	(x,	1);
	create_insn	(x=0X102E08);
	op_stkvar	(x,	1);
	create_insn	(0X102E16);
	create_insn	(0X102E1E);
	set_name	(0X102E1E,	"i2c_disable");
	set_cmt	(0X102E22,	"us",	0);
	create_insn	(0X102E3C);
	set_cmt	(0X102E42,	"old_time",	0);
	create_insn	(0X102E5E);
	set_cmt	(0X102E64,	"old_time",	0);
	create_insn	(0X102E76);
	create_insn	(x=0X102E7E);
	op_stkvar	(x,	1);
	create_insn	(x=0X102E80);
	op_stkvar	(x,	1);
	create_insn	(x=0X102E8E);
	op_stkvar	(x,	1);
	create_insn	(x=0X102E90);
	op_stkvar	(x,	1);
	create_insn	(0X102E94);
	create_insn	(x=0X102E9E);
	op_stkvar	(x,	1);
	create_insn	(x=0X102EA6);
	op_stkvar	(x,	1);
	create_insn	(x=0X102EAA);
	op_stkvar	(x,	1);
	create_insn	(x=0X102EB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X102ECA);
	op_stkvar	(x,	1);
	create_insn	(x=0X102ED4);
	op_stkvar	(x,	1);
	create_insn	(0X102EDE);
	create_insn	(x=0X102F02);
	op_stkvar	(x,	1);
	create_insn	(x=0X102F08);
	op_stkvar	(x,	1);
	create_insn	(x=0X102F10);
	op_stkvar	(x,	1);
	create_insn	(x=0X102F1A);
	op_stkvar	(x,	1);
	create_insn	(x=0X102F20);
	op_stkvar	(x,	1);
	create_insn	(x=0X102F30);
	op_stkvar	(x,	1);
	create_insn	(0X102F36);
	create_insn	(x=0X102F4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X102F56);
	op_stkvar	(x,	1);
	create_insn	(x=0X102F5C);
	op_stkvar	(x,	1);
	set_cmt	(0X102F5E,	"result",	0);
	create_insn	(x=0X102F5E);
	op_stkvar	(x,	1);
	create_insn	(x=0X102F64);
	op_stkvar	(x,	1);
	create_insn	(x=0X102F6E);
	op_stkvar	(x,	1);
	set_cmt	(0X102F74,	"reg_offset_and_bit",	0);
	create_insn	(x=0X102F74);
	op_stkvar	(x,	1);
	set_cmt	(0X102F76,	"rst_state",	0);
	set_cmt	(0X102F7C,	"reg_offset_and_bit",	0);
	create_insn	(x=0X102F7C);
	op_stkvar	(x,	1);
	set_cmt	(0X102F7E,	"rst_state",	0);
	create_insn	(x=0X102F86);
	op_stkvar	(x,	1);
	create_insn	(0X102F92);
	create_insn	(0X102F9A);
	create_insn	(x=0X102F9C);
	op_stkvar	(x,	1);
	create_insn	(0X102FA6);
	create_insn	(x=0X102FA8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X102FB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X102FB6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X102FBA);
	op_plain_offset	(x,	1,	0X7000E580);
	op_plain_offset	(x,	129,	0X7000E580);
	create_insn	(0X102FCC);
	create_insn	(0X102FD6);
	create_insn	(x=0X102FD8);
	op_plain_offset	(x,	1,	0X7000E580);
	op_plain_offset	(x,	129,	0X7000E580);
	create_insn	(0X102FE6);
	create_insn	(x=0X102FF0);
	op_plain_offset	(x,	1,	0X7000E580);
	op_plain_offset	(x,	129,	0X7000E580);
	create_insn	(0X102FFE);
	create_insn	(x=0X103008);
	op_plain_offset	(x,	1,	0X7000E580);
	op_plain_offset	(x,	129,	0X7000E580);
	create_insn	(0X103016);
	create_insn	(0X103020);
	create_insn	(x=0X103026);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X103028);
	op_plain_offset	(x,	1,	0X7000ED00);
	op_plain_offset	(x,	129,	0X7000ED00);
	create_insn	(x=0X10302A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X10302C);
	op_plain_offset	(x,	1,	0X7000E640);
	op_plain_offset	(x,	129,	0X7000E640);
	create_insn	(x=0X10302E);
	op_plain_offset	(x,	1,	0X7000E640);
	op_plain_offset	(x,	129,	0X7000E640);
	create_insn	(x=0X103030);
	op_plain_offset	(x,	1,	0X7000E640);
	op_plain_offset	(x,	129,	0X7000E640);
	create_insn	(x=0X103032);
	op_plain_offset	(x,	1,	0X7000E640);
	op_plain_offset	(x,	129,	0X7000E640);
	create_insn	(x=0X103034);
	op_plain_offset	(x,	1,	0X7000E580);
	op_plain_offset	(x,	129,	0X7000E580);
	create_insn	(x=0X10303E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X103042);
	op_plain_offset	(x,	1,	0X7000EC00);
	op_plain_offset	(x,	129,	0X7000EC00);
	create_insn	(0X103048);
	create_insn	(x=0X103050);
	op_stkvar	(x,	1);
	set_cmt	(0X103068,	"reg_offset_and_bit",	0);
	set_cmt	(0X10306A,	"rst_state",	0);
	create_dword	(x=0X103074);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X103078);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X10307C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X103080);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X103084);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X103088);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X10308C);
	create_dword	(x=0X103090);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X103094);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X103098);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X10309C);
	set_cmt	(0X1030A4,	"reg_offset_and_bit",	0);
	set_cmt	(0X1030A6,	"enable",	0);
	set_cmt	(0X1030AC,	"reg_offset_and_bit",	0);
	set_cmt	(0X1030AE,	"rst_state",	0);
	create_insn	(x=0X1030B4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1030B6);
	op_plain_offset	(x,	1,	0X7000D040);
	op_plain_offset	(x,	129,	0X7000D040);
	create_insn	(x=0X1030BA);
	op_plain_offset	(x,	1,	0X7000D040);
	op_plain_offset	(x,	129,	0X7000D040);
	set_cmt	(0X1030BC,	"us",	0);
	create_insn	(x=0X1030C2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1030C4);
	op_plain_offset	(x,	1,	0X7000EC00);
	op_plain_offset	(x,	129,	0X7000EC00);
	create_insn	(x=0X1030C8);
	op_plain_offset	(x,	1,	0X7000EC00);
	op_plain_offset	(x,	129,	0X7000EC00);
	create_insn	(x=0X1030D0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1030D2);
	op_plain_offset	(x,	1,	0X7000ED00);
	op_plain_offset	(x,	129,	0X7000ED00);
	create_insn	(x=0X1030DE);
	op_stkvar	(x,	1);
	create_insn	(x=0X1030EE);
	op_stkvar	(x,	1);
	create_insn	(x=0X1030F2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1030F4,	"a2",	0);
	create_insn	(x=0X1030F4);
	op_stkvar	(x,	1);
	set_cmt	(0X1030F6,	"i2c_baseaddr",	0);
	create_insn	(x=0X103100);
	op_stkvar	(x,	1);
	create_insn	(x=0X103102);
	op_stkvar	(x,	1);
	create_insn	(x=0X103108);
	op_stkvar	(x,	1);
	create_insn	(x=0X103112);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X103114,	"a2",	0);
	create_insn	(x=0X103114);
	op_stkvar	(x,	1);
	set_cmt	(0X103116,	"i2c_baseaddr",	0);
	create_dword	(x=0X103124);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X103128);
	set_name	(0X103128,	"result");
	create_dword	(x=0X10312C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X103130);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X103134);
	create_insn	(0X103140);
	create_insn	(0X10315C);
	create_insn	(0X103164);
	set_name	(0X103164,	"se_write_key_table");
	set_cmt	(0X103186,	"a1",	0);
	set_cmt	(0X103188,	"key_index",	0);
	create_insn	(x=0X103188);
	op_stkvar	(x,	1);
	set_cmt	(0X10318A,	"quad",	0);
	set_cmt	(0X10318C,	"a2",	0);
	set_cmt	(0X10318E,	"a5",	0);
	create_insn	(x=0X10318E);
	op_stkvar	(x,	1);
	create_insn	(x=0X103194);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1031A0);
	create_insn	(0X1031A4);
	create_insn	(x=0X1031A6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1031AC,	"a1",	0);
	set_cmt	(0X1031AE,	"key_index",	0);
	create_insn	(x=0X1031AE);
	op_stkvar	(x,	1);
	set_cmt	(0X1031B0,	"quad",	0);
	set_cmt	(0X1031B2,	"a2",	0);
	set_cmt	(0X1031B4,	"a5",	0);
	create_insn	(x=0X1031B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X1031BA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1031C6);
	create_insn	(x=0X1031C8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1031CE,	"a1",	0);
	set_cmt	(0X1031D0,	"key_index",	0);
	create_insn	(x=0X1031D0);
	op_stkvar	(x,	1);
	set_cmt	(0X1031D2,	"quad",	0);
	set_cmt	(0X1031D4,	"a2",	0);
	set_cmt	(0X1031D6,	"a5",	0);
	create_insn	(x=0X1031D6);
	op_stkvar	(x,	1);
	create_insn	(x=0X1031DC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1031E8);
	create_insn	(x=0X1031EA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1031F0,	"a1",	0);
	set_cmt	(0X1031F2,	"key_index",	0);
	create_insn	(x=0X1031F2);
	op_stkvar	(x,	1);
	set_cmt	(0X1031F4,	"quad",	0);
	set_cmt	(0X1031F6,	"a2",	0);
	set_cmt	(0X1031F8,	"a5",	0);
	create_insn	(x=0X1031F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X1031FE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X10320A);
	create_insn	(x=0X10320C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X103218,	"a5",	0);
	create_insn	(x=0X103218);
	op_stkvar	(x,	1);
	set_cmt	(0X10321A,	"key_index",	0);
	create_insn	(x=0X10321A);
	op_stkvar	(x,	1);
	set_cmt	(0X10321C,	"quad",	0);
	set_cmt	(0X10321E,	"a1",	0);
	set_cmt	(0X103220,	"a2",	0);
	create_insn	(x=0X103226);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X103232);
	create_insn	(x=0X103234);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X10323C,	"a5",	0);
	create_insn	(x=0X10323C);
	op_stkvar	(x,	1);
	set_cmt	(0X10323E,	"key_index",	0);
	create_insn	(x=0X10323E);
	op_stkvar	(x,	1);
	set_cmt	(0X103240,	"quad",	0);
	set_cmt	(0X103242,	"a1",	0);
	set_cmt	(0X103244,	"a2",	0);
	create_insn	(x=0X10324A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X103256);
	create_insn	(x=0X103258);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X103264,	"a5",	0);
	create_insn	(x=0X103264);
	op_stkvar	(x,	1);
	set_cmt	(0X103266,	"key_index",	0);
	create_insn	(x=0X103266);
	op_stkvar	(x,	1);
	set_cmt	(0X103268,	"quad",	0);
	set_cmt	(0X10326A,	"a1",	0);
	set_cmt	(0X10326C,	"a2",	0);
	create_insn	(x=0X103272);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X10327E);
	create_insn	(x=0X103280);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X103288,	"a5",	0);
	create_insn	(x=0X103288);
	op_stkvar	(x,	1);
	set_cmt	(0X10328A,	"key_index",	0);
	create_insn	(x=0X10328A);
	op_stkvar	(x,	1);
	set_cmt	(0X10328C,	"quad",	0);
	set_cmt	(0X10328E,	"a1",	0);
	set_cmt	(0X103290,	"a2",	0);
	create_insn	(0X1032A2);
	create_insn	(0X1032AE);
	create_insn	(0X1032D2);
	create_insn	(0X1032D6);
	create_insn	(0X1032DA);
	create_insn	(0X1032FE);
	create_insn	(0X103302);
	create_insn	(0X10330E);
	set_name	(0X10330E,	"security_engine_busy");
	create_insn	(0X10331C);
	set_name	(0X10331C,	"sha256_one_round");
	set_cmt	(0X103328,	"a2",	0);
	set_cmt	(0X10332A,	"a1",	0);
	create_insn	(0X103338);
	create_insn	(0X103360);
	set_name	(0X103360,	"security_engine_hash");
	create_insn	(x=0X10336A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10336E);
	op_stkvar	(x,	1);
	create_insn	(x=0X103370);
	op_stkvar	(x,	1);
	set_cmt	(0X103372,	"a2",	0);
	create_insn	(x=0X103374);
	op_stkvar	(x,	1);
	create_insn	(x=0X103376);
	op_stkvar	(x,	1);
	set_cmt	(0X10337A,	"a1",	0);
	create_insn	(x=0X103382);
	op_stkvar	(x,	1);
	create_insn	(x=0X103398);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1033A0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1033A2);
	op_stkvar	(x,	1);
	create_insn	(x=0X1033B2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1033BE);
	create_insn	(0X1033C8);
	create_insn	(x=0X1033CA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1033DA);
	op_stkvar	(x,	1);
	create_insn	(x=0X1033E8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1033EA);
	op_stkvar	(x,	1);
	create_insn	(x=0X1033F0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1033F2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1033FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X103400);
	op_stkvar	(x,	1);
	create_insn	(x=0X103402);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X10340A);
	op_stkvar	(x,	1);
	create_insn	(x=0X103416);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X10341E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10342C);
	op_stkvar	(x,	1);
	create_insn	(x=0X103430);
	op_stkvar	(x,	1);
	create_insn	(x=0X103432);
	op_stkvar	(x,	1);
	create_insn	(x=0X103436);
	op_stkvar	(x,	1);
	create_insn	(x=0X103438);
	op_stkvar	(x,	1);
	set_cmt	(0X10343C,	"switch 9 cases ",	0);
	set_cmt	(0X103441,	"jump table for switch statement",	0);
	create_byte	(0X103441);
	make_array	(0X103441,	0X9);
	set_cmt	(0X10344A,	"jumptable 0010343C case 0",	1);
	create_insn	(0X10344A);
	set_cmt	(0X10344C,	"jumptable 0010343C case 4",	1);
	create_insn	(x=0X10344C);
	op_stkvar	(x,	1);
	set_cmt	(0X10344E,	"jumptable 0010343C default case",	1);
	create_insn	(x=0X10344E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X103450);
	op_stkvar	(x,	1);
	create_insn	(x=0X103462);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X10346C,	"jumptable 0010343C case 5",	1);
	create_insn	(0X10346C);
	set_cmt	(0X103470,	"jumptable 0010343C case 6",	1);
	create_insn	(0X103470);
	set_cmt	(0X103474,	"jumptable 0010343C case 7",	1);
	create_insn	(0X103474);
	create_insn	(0X103478);
	create_insn	(0X103488);
	set_name	(0X103488,	"clk_enable_se_maybe");
	create_insn	(x=0X10348C);
	op_plain_offset	(x,	1,	0X60006000);
	op_plain_offset	(x,	129,	0X60006000);
	set_cmt	(0X10349A,	"a2",	0);
	set_cmt	(0X10349C,	"a1",	0);
	set_cmt	(0X1034A2,	"rst_state",	0);
	set_cmt	(0X1034A4,	"reg_offset_and_bit",	0);
	set_cmt	(0X1034AA,	"rst_state",	0);
	set_cmt	(0X1034AC,	"reg_offset_and_bit",	0);
	create_insn	(0X1034B8);
	create_insn	(0X1034C8);
	create_insn	(x=0X1034CA);
	op_stkvar	(x,	1);
	create_insn	(0X1034EC);
	create_insn	(0X10350C);
	create_insn	(0X103518);
	create_insn	(x=0X103520);
	op_stkvar	(x,	1);
	create_dword	(x=0X103550);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X103554);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X103558);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X10355C);
	create_dword	(0X103560);
	create_dword	(x=0X103564);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X103568);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X10356C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X103570);
	create_dword	(0X103574);
	create_insn	(0X10359A);
	set_name	(0X10359A,	"se_load_rsa_pubkey_into_index");
	create_insn	(x=0X1035A6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1035B4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1035B6);
	op_stkvar	(x,	1);
	create_insn	(x=0X1035BE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1035C8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1035D6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1035EA);
	set_name	(0X1035EA,	"se_clear_rsa_pubkey_at_index");
	set_cmt	(0X1035F6,	"len",	0);
	set_cmt	(0X1035F8,	"c",	0);
	set_cmt	(0X1035FA,	"a1",	0);
	create_insn	(x=0X1035FA);
	op_stkvar	(x,	1);
	set_cmt	(0X103600,	"len",	0);
	set_cmt	(0X103602,	"c",	0);
	set_cmt	(0X103604,	"a1",	0);
	create_insn	(x=0X103604);
	op_stkvar	(x,	1);
	set_cmt	(0X10360C,	"a4",	0);
	set_cmt	(0X10360E,	"exponent_size",	0);
	set_cmt	(0X103610,	"pubkey",	0);
	create_insn	(x=0X103610);
	op_stkvar	(x,	1);
	create_insn	(0X103620);
	set_name	(0X103620,	"se_rsa_encrypt");
	create_insn	(x=0X103624);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X10362A);
	op_stkvar	(x,	1);
	create_insn	(x=0X103638);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X10363E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X103640);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X10364A);
	op_plain_offset	(x,	1,	0X4000313C);
	op_plain_offset	(x,	129,	0X4000313C);
	create_insn	(x=0X103656);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X10365E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X103660);
	op_plain_offset	(x,	1,	0X40003148);
	op_plain_offset	(x,	129,	0X40003148);
	create_insn	(x=0X103678);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X103680);
	op_stkvar	(x,	1);
	create_insn	(x=0X103682);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X10368C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X103698);
	set_name	(0X103698,	"se_check_signature");
	set_cmt	(0X1036AE,	"switch 9 cases ",	0);
	set_cmt	(0X1036B3,	"jump table for switch statement",	0);
	create_byte	(0X1036B3);
	make_array	(0X1036B3,	0X9);
	set_cmt	(0X1036BC,	"jumptable 001036AE case 0",	1);
	create_insn	(0X1036BC);
	set_cmt	(0X1036C0,	"jumptable 001036AE case 4",	1);
	create_insn	(0X1036C0);
	set_cmt	(0X1036C4,	"jumptable 001036AE case 5",	1);
	create_insn	(0X1036C4);
	set_cmt	(0X1036C8,	"jumptable 001036AE case 6",	1);
	create_insn	(0X1036C8);
	set_cmt	(0X1036CC,	"jumptable 001036AE case 7",	1);
	create_insn	(0X1036CC);
	set_cmt	(0X1036CE,	"jumptable 001036AE default case",	1);
	set_cmt	(0X1036D6,	"addr_out",	0);
	create_insn	(x=0X1036D6);
	op_stkvar	(x,	1);
	set_cmt	(0X1036D8,	"keysize",	0);
	set_cmt	(0X1036DE,	"addr_in",	0);
	create_insn	(0X1036F0);
	set_cmt	(0X103714,	"hash_method",	0);
	create_insn	(x=0X103714);
	op_stkvar	(x,	1);
	set_cmt	(0X103716,	"data_size",	0);
	set_cmt	(0X103718,	"data",	0);
	set_cmt	(0X10371C,	"buffer",	0);
	set_cmt	(0X10371E,	"hash_out",	0);
	create_insn	(0X103726);
	set_cmt	(0X103728,	"n",	0);
	set_cmt	(0X103730,	"src",	0);
	set_cmt	(0X103732,	"dst",	0);
	set_cmt	(0X103780,	"a1",	0);
	set_cmt	(0X103782,	"a2",	0);
	create_insn	(0X103792);
	set_cmt	(0X103794,	"n",	0);
	set_cmt	(0X103798,	"src",	0);
	set_cmt	(0X10379A,	"dst",	0);
	create_insn	(x=0X10379A);
	op_stkvar	(x,	1);
	create_insn	(x=0X1037AA);
	op_stkvar	(x,	1);
	set_cmt	(0X1037B4,	"data_size",	0);
	set_cmt	(0X1037B6,	"hash_method",	0);
	create_insn	(x=0X1037B6);
	op_stkvar	(x,	1);
	set_cmt	(0X1037B8,	"buffer",	0);
	set_cmt	(0X1037BA,	"data",	0);
	create_insn	(x=0X1037BA);
	op_stkvar	(x,	1);
	set_cmt	(0X1037BC,	"hash_out",	0);
	create_insn	(x=0X1037BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X1037CE);
	op_stkvar	(x,	1);
	set_cmt	(0X1037D2,	"dst",	0);
	set_cmt	(0X1037D4,	"n",	0);
	set_cmt	(0X1037D6,	"src",	0);
	create_insn	(x=0X1037D6);
	op_stkvar	(x,	1);
	create_insn	(x=0X1037EA);
	op_stkvar	(x,	1);
	create_insn	(x=0X1037EE);
	op_stkvar	(x,	1);
	create_insn	(0X1037F2);
	create_insn	(x=0X103800);
	op_stkvar	(x,	1);
	create_insn	(x=0X10380A);
	op_stkvar	(x,	1);
	create_insn	(0X103820);
	set_cmt	(0X10383C,	"len",	0);
	create_insn	(0X103840);
	create_insn	(0X103842);
	set_cmt	(0X103844,	"c",	0);
	set_cmt	(0X103848,	"a1",	0);
	set_cmt	(0X103850,	"src",	0);
	set_cmt	(0X103854,	"n",	0);
	set_cmt	(0X103856,	"dst",	0);
	set_cmt	(0X10385E,	"src",	0);
	set_cmt	(0X103860,	"dst",	0);
	set_cmt	(0X103862,	"n",	0);
	set_cmt	(0X103872,	"hash_method",	0);
	create_insn	(x=0X103872);
	op_stkvar	(x,	1);
	set_cmt	(0X10387A,	"data_size",	0);
	set_cmt	(0X10387C,	"buffer",	0);
	set_cmt	(0X10387E,	"data",	0);
	set_cmt	(0X103880,	"hash_out",	0);
	create_insn	(0X103898);
	create_insn	(0X1038AE);
	create_insn	(0X1038B8);
	create_insn	(0X1038C2);
	create_insn	(x=0X1038CA);
	op_plain_offset	(x,	1,	0X7000E4C0);
	op_plain_offset	(x,	129,	0X7000E4C0);
	create_insn	(x=0X1038D2);
	op_plain_offset	(x,	1,	0X7000E600);
	op_plain_offset	(x,	129,	0X7000E600);
	create_insn	(x=0X1038D6);
	op_plain_offset	(x,	1,	0X7000E600);
	op_plain_offset	(x,	129,	0X7000E600);
	create_dword	(x=0X1039A4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1039A8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1039AC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X1039B0);
	create_dword	(0X1039B4);
	create_dword	(0X1039B8);
	create_dword	(0X1039BC);
	create_dword	(0X1039C0);
	create_dword	(0X1039C4);
	create_dword	(x=0X1039C8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1039CC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X103A0E);
	create_insn	(0X103A1C);
	create_insn	(0X103A32);
	create_insn	(0X103A3C);
	create_insn	(0X103B0E);
	set_cmt	(0X103B10,	"key_index",	0);
	create_insn	(x=0X103B14);
	op_stkvar	(x,	1);
	create_insn	(x=0X103B16);
	op_stkvar	(x,	1);
	set_cmt	(0X103B1C,	"a2",	0);
	set_cmt	(0X103B1E,	"hash_enable",	0);
	set_cmt	(0X103B20,	"a4",	0);
	create_insn	(x=0X103B28);
	op_stkvar	(x,	1);
	create_insn	(x=0X103B2C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X103B30);
	op_stkvar	(x,	1);
	create_insn	(x=0X103B32);
	op_stkvar	(x,	1);
	create_insn	(x=0X103B36);
	op_stkvar	(x,	1);
	create_insn	(x=0X103B3A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X103B3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X103B40);
	op_stkvar	(x,	1);
	create_insn	(x=0X103B44);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X103B4C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X103B64,	"a5",	0);
	create_insn	(0X103B64);
	set_cmt	(0X103B6A,	"a2",	0);
	set_cmt	(0X103B6C,	"a3",	0);
	set_cmt	(0X103B6E,	"a1",	0);
	set_cmt	(0X103B70,	"a4",	0);
	create_insn	(0X103B86);
	create_insn	(x=0X103B8E);
	op_stkvar	(x,	1);
	set_cmt	(0X103B94,	"type",	0);
	set_cmt	(0X103B96,	"a2",	0);
	set_cmt	(0X103B98,	"key_index",	0);
	set_cmt	(0X103B9A,	"key",	0);
	create_insn	(x=0X103B9A);
	op_stkvar	(x,	1);
	set_cmt	(0X103BA0,	"a2",	0);
	set_cmt	(0X103BA2,	"type",	0);
	set_cmt	(0X103BA4,	"key_index",	0);
	set_cmt	(0X103BA6,	"key",	0);
	set_cmt	(0X103BAC,	"a2",	0);
	set_cmt	(0X103BAE,	"type",	0);
	set_cmt	(0X103BB0,	"key_index",	0);
	set_cmt	(0X103BB2,	"key",	0);
	create_insn	(x=0X103BBA);
	op_plain_offset	(x,	1,	0X7000E600);
	op_plain_offset	(x,	129,	0X7000E600);
	set_cmt	(0X103BDE,	"type",	0);
	set_cmt	(0X103BE0,	"a2",	0);
	set_cmt	(0X103BE2,	"key_index",	0);
	set_cmt	(0X103BE4,	"key",	0);
	set_cmt	(0X103BEA,	"a2",	0);
	set_cmt	(0X103BEC,	"type",	0);
	set_cmt	(0X103BEE,	"key_index",	0);
	set_cmt	(0X103BF0,	"key",	0);
	set_cmt	(0X103BF6,	"a2",	0);
	set_cmt	(0X103BF8,	"type",	0);
	set_cmt	(0X103BFA,	"key_index",	0);
	set_cmt	(0X103BFC,	"key",	0);
	create_insn	(0X103C64);
	set_cmt	(0X103C6C,	"key",	0);
	set_cmt	(0X103C70,	"type",	0);
	set_cmt	(0X103C72,	"a2",	0);
	set_cmt	(0X103C88,	"key",	0);
	set_cmt	(0X103C8E,	"type",	0);
	set_cmt	(0X103C90,	"a2",	0);
	set_cmt	(0X103CA6,	"key",	0);
	set_cmt	(0X103CAC,	"type",	0);
	set_cmt	(0X103CAE,	"a2",	0);
	set_cmt	(0X103CCC,	"pubkey",	0);
	set_cmt	(0X103CCE,	"exponent_size",	0);
	create_insn	(x=0X103D1E);
	op_stkvar	(x,	1);
	create_insn	(x=0X103D22);
	op_stkvar	(x,	1);
	create_insn	(x=0X103D2A);
	op_stkvar	(x,	1);
	create_insn	(x=0X103D32);
	op_stkvar	(x,	1);
	create_insn	(x=0X103D46);
	op_plain_offset	(x,	1,	0X7000E4C0);
	op_plain_offset	(x,	129,	0X7000E4C0);
	create_insn	(x=0X103D4A);
	op_plain_offset	(x,	1,	0X7000E600);
	op_plain_offset	(x,	129,	0X7000E600);
	create_insn	(x=0X103D4C);
	op_plain_offset	(x,	1,	0X7000E600);
	op_plain_offset	(x,	129,	0X7000E600);
	create_insn	(0X103D52);
	set_name	(0X103D52,	"se_compute_aes_cmac_maybe");
	create_insn	(x=0X103D62);
	op_stkvar	(x,	1);
	set_cmt	(0X103D68,	"a3",	0);
	set_cmt	(0X103D6A,	"result",	0);
	set_cmt	(0X103D6C,	"a2",	0);
	set_cmt	(0X103D6E,	"a4",	0);
	set_cmt	(0X103D70,	"a6",	0);
	create_insn	(x=0X103D70);
	op_stkvar	(x,	1);
	set_cmt	(0X103D72,	"a5",	0);
	create_insn	(x=0X103D72);
	op_stkvar	(x,	1);
	create_insn	(x=0X103D7A);
	op_stkvar	(x,	1);
	create_insn	(x=0X103D7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X103D82);
	op_stkvar	(x,	1);
	create_insn	(x=0X103D84);
	op_stkvar	(x,	1);
	create_insn	(x=0X103D86);
	op_stkvar	(x,	1);
	create_insn	(x=0X103D8C);
	op_stkvar	(x,	1);
	create_insn	(x=0X103D8E);
	op_stkvar	(x,	1);
	create_insn	(x=0X103D94);
	op_stkvar	(x,	1);
	set_cmt	(0X103DA0,	"type",	0);
	set_cmt	(0X103DA2,	"a2",	0);
	set_cmt	(0X103DA4,	"key_index",	0);
	set_cmt	(0X103DA6,	"key",	0);
	set_cmt	(0X103DAC,	"type",	0);
	set_cmt	(0X103DAE,	"a2",	0);
	set_cmt	(0X103DB0,	"key_index",	0);
	set_cmt	(0X103DB2,	"key",	0);
	create_insn	(x=0X103DC8);
	op_stkvar	(x,	1);
	set_cmt	(0X103DCA,	"n",	0);
	set_cmt	(0X103DD0,	"dst",	0);
	set_cmt	(0X103DD2,	"src",	0);
	create_insn	(x=0X103DD2);
	op_stkvar	(x,	1);
	create_dword	(x=0X103DE4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X103DE8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X103DEC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X103DF0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X103DF4);
	create_dword	(x=0X103DF8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X103DFC);
	set_cmt	(0X103E06,	"n",	0);
	set_cmt	(0X103E08,	"src",	0);
	set_cmt	(0X103E0A,	"dst",	0);
	create_insn	(0X103E2C);
	set_name	(0X103E2C,	"calculate_hash_maybe");
	set_cmt	(0X103E2E,	"a5",	0);
	create_insn	(x=0X103E30);
	op_stkvar	(x,	1);
	create_insn	(x=0X103E34);
	op_stkvar	(x,	1);
	create_insn	(x=0X103E36);
	op_stkvar	(x,	1);
	create_insn	(x=0X103E38);
	op_stkvar	(x,	1);
	create_insn	(x=0X103E40);
	op_stkvar	(x,	1);
	create_insn	(x=0X103E4C);
	op_stkvar	(x,	1);
	set_cmt	(0X103E50,	"type",	0);
	set_cmt	(0X103E52,	"key",	0);
	create_insn	(x=0X103E58);
	op_stkvar	(x,	1);
	set_cmt	(0X103E5C,	"type",	0);
	set_cmt	(0X103E5E,	"key",	0);
	create_insn	(x=0X103E6A);
	op_stkvar	(x,	1);
	create_insn	(x=0X103E7A);
	op_stkvar	(x,	1);
	set_cmt	(0X103E82,	"a3",	0);
	set_cmt	(0X103E84,	"a2",	0);
	set_cmt	(0X103E86,	"result",	0);
	set_cmt	(0X103E88,	"a4",	0);
	create_insn	(x=0X103E8E);
	op_stkvar	(x,	1);
	create_insn	(x=0X103E90);
	op_stkvar	(x,	1);
	create_insn	(x=0X103E92);
	op_stkvar	(x,	1);
	create_insn	(x=0X103EAE);
	op_stkvar	(x,	1);
	create_insn	(x=0X103EB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X103EB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X103EC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X103ECC);
	op_stkvar	(x,	1);
	set_cmt	(0X103ED4,	"a3",	0);
	set_cmt	(0X103ED6,	"a2",	0);
	set_cmt	(0X103ED8,	"result",	0);
	set_cmt	(0X103EDA,	"a4",	0);
	create_insn	(x=0X103EE2);
	op_stkvar	(x,	1);
	create_insn	(x=0X103EE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X103EF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X103EF2);
	op_stkvar	(x,	1);
	create_insn	(x=0X103EF6);
	op_stkvar	(x,	1);
	create_insn	(x=0X103EFA);
	op_stkvar	(x,	1);
	create_insn	(x=0X103EFE);
	op_stkvar	(x,	1);
	set_cmt	(0X103F14,	"a5",	0);
	create_insn	(0X103F16);
	create_insn	(x=0X103F1E);
	op_stkvar	(x,	1);
	set_cmt	(0X103F26,	"a3",	0);
	set_cmt	(0X103F28,	"a2",	0);
	set_cmt	(0X103F2A,	"result",	0);
	set_cmt	(0X103F2C,	"a4",	0);
	create_insn	(x=0X103F32);
	op_stkvar	(x,	1);
	create_insn	(x=0X103F36);
	op_stkvar	(x,	1);
	create_insn	(0X103F4C);
	set_cmt	(0X103F4E,	"a5",	0);
	create_insn	(x=0X103F52);
	op_stkvar	(x,	1);
	create_insn	(x=0X103F54);
	op_stkvar	(x,	1);
	set_cmt	(0X103F5A,	"a2",	0);
	set_cmt	(0X103F5C,	"result",	0);
	set_cmt	(0X103F5E,	"a4",	0);
	create_insn	(x=0X103F66);
	op_stkvar	(x,	1);
	create_insn	(x=0X103F6E);
	op_stkvar	(x,	1);
	create_insn	(x=0X103F70);
	op_stkvar	(x,	1);
	create_insn	(x=0X103F74);
	op_stkvar	(x,	1);
	create_insn	(x=0X103F7A);
	op_stkvar	(x,	1);
	create_insn	(x=0X103F7E);
	op_stkvar	(x,	1);
	create_insn	(0X103F9A);
	set_name	(0X103F9A,	"se_key_do_something");
	set_cmt	(0X103F9C,	"a5",	0);
	set_cmt	(0X103FA0,	"a2",	0);
	create_insn	(x=0X103FA2);
	op_stkvar	(x,	1);
	set_cmt	(0X103FA4,	"key_index",	0);
	create_insn	(x=0X103FA4);
	op_stkvar	(x,	1);
	set_cmt	(0X103FA6,	"type",	0);
	set_cmt	(0X103FA8,	"key",	0);
	set_cmt	(0X103FAE,	"a2",	0);
	set_cmt	(0X103FB0,	"key_index",	0);
	create_insn	(x=0X103FB0);
	op_stkvar	(x,	1);
	set_cmt	(0X103FB2,	"type",	0);
	set_cmt	(0X103FB4,	"key",	0);
	create_insn	(x=0X103FBA);
	op_stkvar	(x,	1);
	set_cmt	(0X103FC2,	"a3",	0);
	set_cmt	(0X103FC4,	"a2",	0);
	set_cmt	(0X103FC6,	"result",	0);
	set_cmt	(0X103FC8,	"a4",	0);
	create_insn	(x=0X103FD2);
	op_stkvar	(x,	1);
	create_insn	(x=0X103FD6);
	op_stkvar	(x,	1);
	create_insn	(x=0X103FD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X103FDE);
	op_stkvar	(x,	1);
	create_insn	(x=0X103FFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X104002);
	op_stkvar	(x,	1);
	set_cmt	(0X10400A,	"a3",	0);
	set_cmt	(0X10400C,	"a2",	0);
	set_cmt	(0X10400E,	"result",	0);
	set_cmt	(0X104010,	"a4",	0);
	create_insn	(x=0X10401A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10401E);
	op_stkvar	(x,	1);
	create_insn	(x=0X104020);
	op_stkvar	(x,	1);
	create_insn	(0X10404C);
	create_insn	(x=0X104050);
	op_stkvar	(x,	1);
	create_insn	(0X104062);
	create_insn	(0X104074);
	set_name	(0X104074,	"se_rsa_get_keysize");
	create_insn	(0X104080);
	create_insn	(0X10408C);
	create_insn	(0X104098);
	create_dword	(x=0X1040A0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1040A4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X1040A8);
	set_name	(0X1040A8,	"nullsub_1");
	create_insn	(0X1040AA);
	set_cmt	(0X1040AE,	"dk",	0);
	create_insn	(x=0X1040AE);
	op_stkvar	(x,	1);
	create_insn	(x=0X1040B6);
	op_stkvar	(x,	1);
	set_cmt	(0X1040D0,	"a2",	0);
	set_cmt	(0X1040D2,	"type",	0);
	set_cmt	(0X1040D4,	"key_index",	0);
	set_cmt	(0X1040D6,	"key",	0);
	create_insn	(x=0X1040DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X1040DE);
	op_stkvar	(x,	1);
	create_insn	(x=0X1040F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X1040F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X1040FA);
	op_stkvar	(x,	1);
	set_cmt	(0X104112,	"a2",	0);
	set_cmt	(0X104114,	"type",	0);
	set_cmt	(0X104116,	"key_index",	0);
	set_cmt	(0X104118,	"key",	0);
	create_insn	(x=0X10411E);
	op_stkvar	(x,	1);
	create_insn	(x=0X104120);
	op_stkvar	(x,	1);
	set_cmt	(0X104132,	"type",	0);
	set_cmt	(0X104134,	"a2",	0);
	set_cmt	(0X104136,	"key_index",	0);
	set_cmt	(0X104138,	"key",	0);
	create_insn	(x=0X104138);
	op_stkvar	(x,	1);
	set_cmt	(0X10413E,	"a2",	0);
	set_cmt	(0X104140,	"type",	0);
	set_cmt	(0X104142,	"key_index",	0);
	set_cmt	(0X104144,	"key",	0);
	create_insn	(0X104152);
	create_insn	(0X104170);
	set_name	(0X104170,	"recovery_mode_requested");
	create_insn	(x=0X104174);
	op_stkvar	(x,	1);
	create_insn	(x=0X10417A);
	op_plain_offset	(x,	1,	0X70000000);
	op_plain_offset	(x,	129,	0X70000000);
	set_cmt	(0X104182,	"result",	0);
	create_insn	(x=0X104188);
	op_stkvar	(x,	1);
	create_insn	(0X10419C);
	create_insn	(0X1041A0);
	set_name	(0X1041A0,	"strap_volume_down_pressed");
	create_insn	(x=0X1041A4);
	op_plain_offset	(x,	1,	0X70000000);
	op_plain_offset	(x,	129,	0X70000000);
	create_insn	(x=0X1041A6);
	op_dec		(x,	1);
	create_insn	(x=0X1041A8);
	op_dec		(x,	1);
	create_insn	(0X1041B0);
	create_insn	(0X1041B4);
	set_name	(0X1041B4,	"strap_get_nvprod_uart");
	create_insn	(x=0X1041B8);
	op_plain_offset	(x,	1,	0X70000000);
	op_plain_offset	(x,	129,	0X70000000);
	create_insn	(x=0X1041BA);
	op_dec		(x,	1);
	create_insn	(x=0X1041BC);
	op_dec		(x,	1);
	create_insn	(0X1041C4);
	set_name	(0X1041C4,	"zero");
	create_insn	(0X1041C8);
	set_name	(0X1041C8,	"strap_get_ram_code");
	create_insn	(x=0X1041CC);
	op_plain_offset	(x,	1,	0X70000000);
	op_plain_offset	(x,	129,	0X70000000);
	create_insn	(x=0X1041CE);
	op_dec		(x,	1);
	create_insn	(x=0X1041D0);
	op_dec		(x,	1);
	create_insn	(0X1041D4);
	set_name	(0X1041D4,	"strap_get_boot_select");
	create_insn	(x=0X1041D8);
	op_plain_offset	(x,	1,	0X70000000);
	op_plain_offset	(x,	129,	0X70000000);
	create_insn	(x=0X1041DC);
	op_dec		(x,	1);
	create_insn	(0X1041E4);
	set_name	(0X1041E4,	"is_some_gpio_high");
	create_insn	(x=0X1041E8);
	op_plain_offset	(x,	1,	0X6000D504);
	op_plain_offset	(x,	129,	0X6000D504);
	set_cmt	(0X1041F4,	"a1",	0);
	create_insn	(0X104202);
	create_insn	(x=0X104206);
	op_plain_offset	(x,	1,	0X6000D780);
	op_plain_offset	(x,	129,	0X6000D780);
	create_insn	(x=0X104212);
	op_plain_offset	(x,	1,	0X6000D780);
	op_plain_offset	(x,	129,	0X6000D780);
	set_cmt	(0X104214,	"a1",	0);
	create_insn	(0X10421C);
	set_name	(0X10421C,	"some_usb_charger_stuff_pinmuxing");
	create_insn	(x=0X104220);
	op_plain_offset	(x,	1,	0X70003200);
	op_plain_offset	(x,	129,	0X70003200);
	create_insn	(x=0X104226);
	op_plain_offset	(x,	1,	0X70003200);
	op_plain_offset	(x,	129,	0X70003200);
	create_insn	(x=0X104228);
	op_plain_offset	(x,	1,	0X70003200);
	op_plain_offset	(x,	129,	0X70003200);
	create_insn	(x=0X10422E);
	op_plain_offset	(x,	1,	0X70003200);
	op_plain_offset	(x,	129,	0X70003200);
	create_insn	(x=0X104230);
	op_plain_offset	(x,	1,	0X70003200);
	op_plain_offset	(x,	129,	0X70003200);
	create_insn	(x=0X104236);
	op_plain_offset	(x,	1,	0X70003200);
	op_plain_offset	(x,	129,	0X70003200);
	create_insn	(x=0X104248);
	op_plain_offset	(x,	1,	0X70003180);
	op_plain_offset	(x,	129,	0X70003180);
	create_insn	(x=0X10424C);
	op_plain_offset	(x,	1,	0X70003180);
	op_plain_offset	(x,	129,	0X70003180);
	create_insn	(x=0X10424E);
	op_plain_offset	(x,	1,	0X70003180);
	op_plain_offset	(x,	129,	0X70003180);
	create_insn	(x=0X104252);
	op_plain_offset	(x,	1,	0X70003180);
	op_plain_offset	(x,	129,	0X70003180);
	create_insn	(x=0X104254);
	op_plain_offset	(x,	1,	0X70003180);
	op_plain_offset	(x,	129,	0X70003180);
	create_insn	(x=0X10425A);
	op_plain_offset	(x,	1,	0X70003180);
	op_plain_offset	(x,	129,	0X70003180);
	create_insn	(x=0X10425C);
	op_plain_offset	(x,	1,	0X70003180);
	op_plain_offset	(x,	129,	0X70003180);
	create_insn	(x=0X104260);
	op_plain_offset	(x,	1,	0X70003180);
	op_plain_offset	(x,	129,	0X70003180);
	create_insn	(x=0X10426E);
	op_plain_offset	(x,	1,	0X6000D780);
	op_plain_offset	(x,	129,	0X6000D780);
	create_insn	(x=0X104274);
	op_plain_offset	(x,	1,	0X6000D780);
	op_plain_offset	(x,	129,	0X6000D780);
	set_cmt	(0X104276,	"a1",	0);
	create_insn	(0X104282);
	set_name	(0X104282,	"some_usb_charger_stuff");
	create_insn	(x=0X104284);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X10428C);
	op_plain_offset	(x,	1,	0X4000297C);
	op_plain_offset	(x,	129,	0X4000297C);
	set_cmt	(0X104290,	"a1",	0);
	create_insn	(x=0X10429C);
	op_plain_offset	(x,	1,	0X4000297C);
	op_plain_offset	(x,	129,	0X4000297C);
	create_insn	(x=0X10429E);
	op_plain_offset	(x,	1,	0X4000297C);
	op_plain_offset	(x,	129,	0X4000297C);
	set_cmt	(0X1042AA,	"a1",	0);
	create_insn	(x=0X1042BE);
	op_plain_offset	(x,	1,	0X4000297C);
	op_plain_offset	(x,	129,	0X4000297C);
	create_insn	(x=0X1042CE);
	op_plain_offset	(x,	1,	0X4000297C);
	op_plain_offset	(x,	129,	0X4000297C);
	create_insn	(x=0X1042DC);
	op_plain_offset	(x,	1,	0X7D000800);
	op_plain_offset	(x,	129,	0X7D000800);
	create_insn	(x=0X1042E0);
	op_plain_offset	(x,	1,	0X7D000800);
	op_plain_offset	(x,	129,	0X7D000800);
	set_cmt	(0X1042EA,	"a1",	0);
	create_insn	(0X1042F4);
	create_insn	(0X1042FE);
	set_cmt	(0X104304,	"us",	0);
	create_insn	(0X104304);
	set_cmt	(0X104316,	"us",	0);
	create_insn	(0X104316);
	set_cmt	(0X10431C,	"a1",	0);
	create_dword	(x=0X104324);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X104328);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X10432C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X104330);
	create_dword	(x=0X104334);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X104338);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X10433C);
	create_dword	(0X104340);
	create_insn	(0X104344);
	set_name	(0X104344,	"memset");
	set_cmt	(0X104346,	"len",	0);
	set_cmt	(0X10434A,	"c",	0);
	create_insn	(0X104356);
	set_name	(0X104356,	"j_memcpy_libc");
	create_insn	(0X104372);
	create_insn	(0X104386);
	set_name	(0X104386,	"check_padding");
	create_insn	(0X10438A);
	create_insn	(0X104394);
	create_insn	(0X1043A2);
	set_name	(0X1043A2,	"mem_equal");
	create_insn	(0X1043A8);
	create_insn	(0X1043BA);
	create_dword	(0X1043C4);
	create_insn	(0X1043C8);
	set_cmt	(0X1043CC,	"a1",	0);
	create_insn	(x=0X1043CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X1043D2);
	op_stkvar	(x,	1);
	create_insn	(x=0X1043D4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1043DA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1043DE);
	op_plain_offset	(x,	1,	0X40002984);
	op_plain_offset	(x,	129,	0X40002984);
	create_insn	(x=0X1043EA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1043EC,	"data_len",	0);
	create_insn	(x=0X1043EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X1043F0);
	op_stkvar	(x,	1);
	set_cmt	(0X1043F4,	"data",	0);
	set_cmt	(0X1043F8,	"se_rsa_keyslot",	0);
	set_cmt	(0X1043FC,	"pubkey_hash",	0);
	create_insn	(x=0X104408);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X104426);
	create_insn	(x=0X10442E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X104432);
	op_plain_offset	(x,	1,	0X40004BF0);
	op_plain_offset	(x,	129,	0X40004BF0);
	create_insn	(x=0X10443A);
	op_plain_offset	(x,	1,	0X40004BF0);
	op_plain_offset	(x,	129,	0X40004BF0);
	create_insn	(x=0X104444);
	op_plain_offset	(x,	1,	0X40004BF0);
	op_plain_offset	(x,	129,	0X40004BF0);
	set_cmt	(0X104448,	"data",	0);
	set_cmt	(0X10444A,	"len",	0);
	create_insn	(x=0X104458);
	op_plain_offset	(x,	1,	0X40004BF0);
	op_plain_offset	(x,	129,	0X40004BF0);
	create_insn	(x=0X10445A);
	op_plain_offset	(x,	1,	0X40004BF0);
	op_plain_offset	(x,	129,	0X40004BF0);
	create_insn	(x=0X104460);
	op_plain_offset	(x,	1,	0X40004BF0);
	op_plain_offset	(x,	129,	0X40004BF0);
	create_insn	(0X10446C);
	create_insn	(0X104470);
	set_cmt	(0X104476,	"a1",	0);
	create_insn	(x=0X104476);
	op_stkvar	(x,	1);
	create_insn	(x=0X10447E);
	op_plain_offset	(x,	1,	0X7000E440);
	op_plain_offset	(x,	129,	0X7000E440);
	create_insn	(x=0X104486);
	op_plain_offset	(x,	1,	0X40002984);
	op_plain_offset	(x,	129,	0X40002984);
	set_cmt	(0X10448C,	"src",	0);
	create_insn	(x=0X10448C);
	op_plain_offset	(x,	1,	0X40002984);
	op_plain_offset	(x,	129,	0X40002984);
	set_cmt	(0X1044A0,	"dst",	0);
	set_cmt	(0X1044A2,	"n",	0);
	create_insn	(x=0X1044AA);
	op_stkvar	(x,	1);
	set_cmt	(0X1044BA,	"data",	0);
	set_cmt	(0X1044BC,	"hash_method",	0);
	create_insn	(x=0X1044BC);
	op_stkvar	(x,	1);
	set_cmt	(0X1044BE,	"buffer",	0);
	set_cmt	(0X1044C0,	"data_size",	0);
	set_cmt	(0X1044C2,	"hash_out",	0);
	create_insn	(x=0X1044C2);
	op_stkvar	(x,	1);
	create_insn	(x=0X1044C4);
	op_stkvar	(x,	1);
	set_cmt	(0X1044D2,	"a1",	0);
	create_insn	(x=0X1044D2);
	op_stkvar	(x,	1);
	set_cmt	(0X1044D8,	"len",	0);
	set_cmt	(0X1044DA,	"a2",	0);
	create_insn	(x=0X1044DA);
	op_stkvar	(x,	1);
	set_cmt	(0X1044DC,	"a1",	0);
	create_insn	(x=0X1044DC);
	op_stkvar	(x,	1);
	set_cmt	(0X1044F2,	"src",	0);
	create_insn	(x=0X1044F2);
	op_stkvar	(x,	1);
	set_cmt	(0X1044F4,	"n",	0);
	set_cmt	(0X1044F6,	"dst",	0);
	create_insn	(x=0X1044F6);
	op_stkvar	(x,	1);
	set_cmt	(0X1044FC,	"len",	0);
	set_cmt	(0X1044FE,	"c",	0);
	set_cmt	(0X104500,	"a1",	0);
	create_insn	(x=0X104500);
	op_stkvar	(x,	1);
	set_cmt	(0X104508,	"a4",	0);
	create_insn	(x=0X10450C);
	op_stkvar	(x,	1);
	set_cmt	(0X10450E,	"exponent_size",	0);
	set_cmt	(0X104510,	"pubkey",	0);
	create_insn	(x=0X104510);
	op_stkvar	(x,	1);
	create_insn	(x=0X10451E);
	op_plain_offset	(x,	1,	0X40004BF0);
	op_plain_offset	(x,	129,	0X40004BF0);
	create_insn	(x=0X104520);
	op_plain_offset	(x,	1,	0X40002984);
	op_plain_offset	(x,	129,	0X40002984);
	set_cmt	(0X104522,	"n",	0);
	set_cmt	(0X104524,	"dst",	0);
	create_insn	(x=0X104524);
	op_plain_offset	(x,	1,	0X40004BF0);
	op_plain_offset	(x,	129,	0X40004BF0);
	set_cmt	(0X104526,	"src",	0);
	create_insn	(0X10452E);
	create_insn	(x=0X104544);
	op_plain_offset	(x,	1,	0X40004BF0);
	op_plain_offset	(x,	129,	0X40004BF0);
	create_insn	(x=0X104546);
	op_plain_offset	(x,	1,	0X40002984);
	op_plain_offset	(x,	129,	0X40002984);
	set_cmt	(0X104548,	"n",	0);
	set_cmt	(0X10454A,	"dst",	0);
	create_insn	(x=0X10454A);
	op_plain_offset	(x,	1,	0X40004BF0);
	op_plain_offset	(x,	129,	0X40004BF0);
	set_cmt	(0X10454C,	"src",	0);
	create_insn	(x=0X104552);
	op_plain_offset	(x,	1,	0X40002984);
	op_plain_offset	(x,	129,	0X40002984);
	create_insn	(x=0X10455A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X10455C);
	op_stkvar	(x,	1);
	create_insn	(x=0X104560);
	op_stkvar	(x,	1);
	create_insn	(x=0X104570);
	op_stkvar	(x,	1);
	create_insn	(x=0X104572);
	op_stkvar	(x,	1);
	create_insn	(x=0X10457A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10457E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X104582);
	op_stkvar	(x,	1);
	create_insn	(x=0X104584);
	op_stkvar	(x,	1);
	create_insn	(0X104592);
	create_insn	(0X104594);
	create_insn	(0X1045A2);
	set_name	(0X1045A2,	"try_load_warmboot");
	set_cmt	(0X1045A4,	"flag",	0);
	set_cmt	(0X1045A6,	"bit",	0);
	create_insn	(x=0X1045AE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1045B0);
	op_plain_offset	(x,	1,	0X7000E440);
	op_plain_offset	(x,	129,	0X7000E440);
	create_insn	(x=0X1045B6);
	op_stkvar	(x,	1);
	create_insn	(x=0X1045CA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1045D0);
	op_plain_offset	(x,	1,	0X7000E500);
	op_plain_offset	(x,	129,	0X7000E500);
	create_insn	(x=0X1045D6);
	op_stkvar	(x,	1);
	create_insn	(x=0X1045D8);
	op_plain_offset	(x,	1,	0X7000E440);
	op_plain_offset	(x,	129,	0X7000E440);
	create_insn	(x=0X1045E2);
	op_stkvar	(x,	1);
	create_insn	(x=0X1045EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X1045F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X1045F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X1045F8);
	op_stkvar	(x,	1);
	set_cmt	(0X104604,	"some_id",	0);
	create_insn	(0X104604);
	set_cmt	(0X104606,	"a2",	0);
	create_insn	(x=0X10460C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X10460E);
	op_plain_offset	(x,	1,	0X60005000);
	op_plain_offset	(x,	129,	0X60005000);
	create_insn	(x=0X104610);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X104614);
	op_stkvar	(x,	1);
	create_insn	(x=0X104618);
	op_stkvar	(x,	1);
	create_insn	(x=0X10462C);
	op_stkvar	(x,	1);
	create_insn	(x=0X104636);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X104638);
	op_plain_offset	(x,	1,	0X7000E440);
	op_plain_offset	(x,	129,	0X7000E440);
	create_insn	(x=0X104658);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X10465E);
	op_plain_offset	(x,	1,	0X7000E500);
	op_plain_offset	(x,	129,	0X7000E500);
	create_insn	(x=0X104660);
	op_stkvar	(x,	1);
	create_insn	(x=0X104664);
	op_stkvar	(x,	1);
	create_insn	(x=0X104676);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X104678);
	op_plain_offset	(x,	1,	0X60005000);
	op_plain_offset	(x,	129,	0X60005000);
	create_insn	(x=0X10467A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10467E);
	op_stkvar	(x,	1);
	set_cmt	(0X104682,	"a2",	0);
	create_insn	(x=0X104682);
	op_stkvar	(x,	1);
	set_cmt	(0X104684,	"a1",	0);
	create_insn	(x=0X10468E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1046AE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1046B2);
	op_plain_offset	(x,	1,	0X40004BF0);
	op_plain_offset	(x,	129,	0X40004BF0);
	create_insn	(x=0X1046B4);
	op_stkvar	(x,	1);
	set_cmt	(0X1046BC,	"a2",	0);
	create_insn	(x=0X1046BC);
	op_stkvar	(x,	1);
	set_cmt	(0X1046BE,	"a1",	0);
	create_insn	(0X1046D0);
	set_cmt	(0X1046E4,	"a2",	0);
	set_cmt	(0X1046E8,	"type",	0);
	set_cmt	(0X1046EA,	"key_index",	0);
	set_cmt	(0X1046EC,	"key",	0);
	set_cmt	(0X1046F2,	"a4",	0);
	set_cmt	(0X1046F4,	"a3",	0);
	set_cmt	(0X1046F6,	"a2",	0);
	set_cmt	(0X1046F8,	"a1",	0);
	set_cmt	(0X1046FA,	"a5",	0);
	create_insn	(x=0X1046FA);
	op_stkvar	(x,	1);
	set_cmt	(0X1046FC,	"a6",	0);
	create_insn	(x=0X1046FC);
	op_stkvar	(x,	1);
	set_cmt	(0X10470A,	"a4",	0);
	create_insn	(x=0X104710);
	op_plain_offset	(x,	1,	0X40002984);
	op_plain_offset	(x,	129,	0X40002984);
	create_insn	(x=0X104718);
	op_plain_offset	(x,	1,	0X40004BF0);
	op_plain_offset	(x,	129,	0X40004BF0);
	set_cmt	(0X10471E,	"a3",	0);
	set_cmt	(0X104720,	"a2",	0);
	set_cmt	(0X104722,	"a1",	0);
	create_dword	(x=0X104730);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X104730,	"dst");
	create_dword	(x=0X104734);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X104738);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X10473C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X104740);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X104744);
	create_dword	(0X104748);
	set_name	(0X104748,	"some_id");
	create_dword	(x=0X10474C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X104750);
	create_dword	(x=0X104754);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X104758);
	set_name	(0X104758,	"is_wdt4_active");
	create_insn	(x=0X10475A);
	op_plain_offset	(x,	1,	0X60005180);
	op_plain_offset	(x,	129,	0X60005180);
	create_insn	(0X104766);
	set_name	(0X104766,	"configure_wdt4");
	create_insn	(x=0X10476E);
	op_plain_offset	(x,	1,	0X60005000);
	op_plain_offset	(x,	129,	0X60005000);
	create_insn	(x=0X104774);
	op_plain_offset	(x,	1,	0X60005000);
	op_plain_offset	(x,	129,	0X60005000);
	create_insn	(0X10477C);
	set_name	(0X10477C,	"enable_wdt4");
	create_insn	(x=0X104788);
	op_plain_offset	(x,	1,	0X60005180);
	op_plain_offset	(x,	129,	0X60005180);
	create_insn	(x=0X10478E);
	op_plain_offset	(x,	1,	0X60005180);
	op_plain_offset	(x,	129,	0X60005180);
	create_insn	(0X104792);
	set_name	(0X104792,	"disable_wdt4");
	create_insn	(x=0X1047AA);
	op_plain_offset	(x,	1,	0X60005180);
	op_plain_offset	(x,	129,	0X60005180);
	create_insn	(x=0X1047AC);
	op_plain_offset	(x,	1,	0X60005180);
	op_plain_offset	(x,	129,	0X60005180);
	create_insn	(x=0X1047B2);
	op_plain_offset	(x,	1,	0X60005180);
	op_plain_offset	(x,	129,	0X60005180);
	create_insn	(x=0X1047B4);
	op_plain_offset	(x,	1,	0X60005000);
	op_plain_offset	(x,	129,	0X60005000);
	create_insn	(x=0X1047BA);
	op_plain_offset	(x,	1,	0X60005000);
	op_plain_offset	(x,	129,	0X60005000);
	create_insn	(0X1047C0);
	set_name	(0X1047C0,	"kick_wdt4");
	create_dword	(x=0X1047EC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X1047F0);
	create_dword	(x=0X1047F4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X1047F8);
	create_dword	(0X1047FC);
	create_insn	(0X104800);
	set_name	(0X104800,	"storage_ctx::load_dev");
	set_cmt	(0X10481E,	"bct",	0);
	create_insn	(x=0X10481E);
	op_stkvar	(x,	1);
	set_cmt	(0X104820,	"collection",	0);
	create_insn	(x=0X104820);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X104822,	"loadaddr",	0);
	create_insn	(x=0X104822);
	op_stkvar	(x,	1);
	set_cmt	(0X104824,	"ctx",	0);
	set_cmt	(0X104826,	"other_bootloaders_count",	0);
	create_insn	(0X104868);
	create_insn	(x=0X10486A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X104870,	"n",	0);
	set_cmt	(0X104874,	"src",	0);
	set_cmt	(0X104876,	"dst",	0);
	create_insn	(x=0X104876);
	op_stkvar	(x,	1);
	set_cmt	(0X104882,	"type",	0);
	set_cmt	(0X104884,	"a2",	0);
	set_cmt	(0X104886,	"key_index",	0);
	set_cmt	(0X104888,	"key",	0);
	create_insn	(x=0X104888);
	op_stkvar	(x,	1);
	set_cmt	(0X10488E,	"a2",	0);
	set_cmt	(0X104890,	"type",	0);
	set_cmt	(0X104892,	"key_index",	0);
	set_cmt	(0X104894,	"key",	0);
	set_cmt	(0X10489A,	"a2",	0);
	set_cmt	(0X10489C,	"type",	0);
	set_cmt	(0X10489E,	"key_index",	0);
	set_cmt	(0X1048A0,	"key",	0);
	set_cmt	(0X1048A8,	"a2",	0);
	set_cmt	(0X1048AE,	"unused",	0);
	create_insn	(x=0X1048AE);
	op_stkvar	(x,	1);
	set_cmt	(0X1048B0,	"dst_key_index",	0);
	set_cmt	(0X1048B2,	"src_key_index",	0);
	set_cmt	(0X1048B4,	"a4",	0);
	set_cmt	(0X1048BA,	"a2",	0);
	set_cmt	(0X1048BC,	"dst_key_index",	0);
	set_cmt	(0X1048BE,	"src_key_index",	0);
	set_cmt	(0X1048C0,	"a4",	0);
	set_cmt	(0X1048C2,	"unused",	0);
	create_insn	(x=0X1048C2);
	op_stkvar	(x,	1);
	set_cmt	(0X1048CA,	"type",	0);
	create_insn	(0X1048CA);
	set_cmt	(0X1048CC,	"a2",	0);
	set_cmt	(0X1048CE,	"key_index",	0);
	set_cmt	(0X1048D0,	"key",	0);
	create_insn	(x=0X1048D0);
	op_stkvar	(x,	1);
	set_cmt	(0X1048D6,	"type",	0);
	set_cmt	(0X1048D8,	"a2",	0);
	set_cmt	(0X1048DA,	"key_index",	0);
	set_cmt	(0X1048DC,	"key",	0);
	create_insn	(x=0X1048DC);
	op_stkvar	(x,	1);
	set_cmt	(0X1048E2,	"a2",	0);
	set_cmt	(0X1048E4,	"type",	0);
	set_cmt	(0X1048E6,	"key_index",	0);
	set_cmt	(0X1048E8,	"key",	0);
	set_cmt	(0X1048EE,	"a2",	0);
	set_cmt	(0X1048F0,	"type",	0);
	set_cmt	(0X1048F2,	"key_index",	0);
	set_cmt	(0X1048F4,	"key",	0);
	set_cmt	(0X1048FA,	"a2",	0);
	set_cmt	(0X1048FC,	"type",	0);
	set_cmt	(0X1048FE,	"key_index",	0);
	set_cmt	(0X104900,	"key",	0);
	set_cmt	(0X104906,	"a2",	0);
	set_cmt	(0X104908,	"type",	0);
	set_cmt	(0X10490A,	"key_index",	0);
	set_cmt	(0X10490C,	"key",	0);
	create_insn	(x=0X104916);
	op_stkvar	(x,	1);
	create_insn	(x=0X104918);
	op_stkvar	(x,	1);
	create_insn	(x=0X10491E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X104922);
	op_plain_offset	(x,	1,	0X40003318);
	op_plain_offset	(x,	129,	0X40003318);
	create_insn	(0X10492E);
	create_insn	(0X104930);
	create_insn	(x=0X104932);
	op_stkvar	(x,	1);
	create_insn	(x=0X104936);
	op_stkvar	(x,	1);
	create_insn	(x=0X104940);
	op_stkvar	(x,	1);
	create_insn	(x=0X104942);
	op_stkvar	(x,	1);
	create_insn	(x=0X104946);
	op_stkvar	(x,	1);
	create_insn	(x=0X104948);
	op_stkvar	(x,	1);
	set_cmt	(0X10495A,	"len",	0);
	set_cmt	(0X10495C,	"a1",	0);
	set_cmt	(0X10495E,	"a2",	0);
	create_insn	(x=0X10495E);
	op_stkvar	(x,	1);
	create_insn	(0X104972);
	set_cmt	(0X10497E,	"a5",	0);
	create_insn	(x=0X10497E);
	op_stkvar	(x,	1);
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_1(void) {
        auto x;
#define id x

	set_cmt	(0X104980,	"a6",	0);
	create_insn	(x=0X104980);
	op_stkvar	(x,	1);
	create_insn	(x=0X104982);
	op_plain_offset	(x,	1,	0X40003318);
	op_plain_offset	(x,	129,	0X40003318);
	set_cmt	(0X10498C,	"a2",	0);
	set_cmt	(0X10498E,	"a3",	0);
	set_cmt	(0X104990,	"a1",	0);
	create_insn	(0X1049A8);
	create_insn	(0X1049B4);
	create_insn	(0X1049B8);
	set_name	(0X1049B8,	"bct_check_bbtable_and_btable");
	create_insn	(x=0X1049BE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1049C4);
	op_plain_offset	(x,	1,	0X40000600);
	op_plain_offset	(x,	129,	0X40000600);
	create_insn	(x=0X1049C6);
	op_plain_offset	(x,	1,	0X100034);
	op_plain_offset	(x,	129,	0X100034);
	create_insn	(x=0X1049CC);
	op_plain_offset	(x,	1,	0X40000600);
	op_plain_offset	(x,	129,	0X40000600);
	create_insn	(x=0X1049D6);
	op_plain_offset	(x,	1,	0X40000600);
	op_plain_offset	(x,	129,	0X40000600);
	create_insn	(0X1049F4);
	create_insn	(x=0X104A02);
	op_stkvar	(x,	1);
	create_insn	(x=0X104A04);
	op_plain_offset	(x,	1,	0X40000600);
	op_plain_offset	(x,	129,	0X40000600);
	create_insn	(x=0X104A22);
	op_plain_offset	(x,	1,	0X40000680);
	op_plain_offset	(x,	129,	0X40000680);
	create_insn	(x=0X104A28);
	op_plain_offset	(x,	1,	0X40000100);
	op_plain_offset	(x,	129,	0X40000100);
	create_insn	(x=0X104A2E);
	op_plain_offset	(x,	1,	0X40000100);
	op_plain_offset	(x,	129,	0X40000100);
	create_insn	(x=0X104A50);
	op_plain_offset	(x,	1,	0X40002400);
	op_plain_offset	(x,	129,	0X40002400);
	create_insn	(0X104A5C);
	create_insn	(x=0X104A6A);
	op_stkvar	(x,	1);
	create_insn	(0X104AAC);
	create_insn	(0X104AB8);
	set_name	(0X104AB8,	"storage_ctx::load_bct");
	create_insn	(x=0X104ABE);
	op_stkvar	(x,	1);
	create_insn	(x=0X104AC6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X104AD2);
	op_plain_offset	(x,	1,	0X40003318);
	op_plain_offset	(x,	129,	0X40003318);
	create_insn	(x=0X104AD4);
	op_plain_offset	(x,	1,	0X40003318);
	op_plain_offset	(x,	129,	0X40003318);
	create_insn	(x=0X104ADA);
	op_plain_offset	(x,	1,	0X40003318);
	op_plain_offset	(x,	129,	0X40003318);
	create_insn	(x=0X104ADC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X104ADE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X104AE0);
	op_plain_offset	(x,	1,	0X40003318);
	op_plain_offset	(x,	129,	0X40003318);
	set_cmt	(0X104AE4,	"a1",	0);
	create_insn	(x=0X104AE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X104AEA);
	op_stkvar	(x,	1);
	set_cmt	(0X104AF2,	"bct",	0);
	create_insn	(x=0X104AF2);
	op_stkvar	(x,	1);
	set_cmt	(0X104AF4,	"collection",	0);
	create_insn	(x=0X104AF4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X104AF6,	"ctx",	0);
	create_insn	(x=0X104AF6);
	op_stkvar	(x,	1);
	set_cmt	(0X104AF8,	"loadaddr",	0);
	set_cmt	(0X104AFA,	"other_bootloaders_count",	0);
	set_cmt	(0X104B0A,	"data",	0);
	set_cmt	(0X104B0E,	"hash_method",	0);
	create_insn	(x=0X104B0E);
	op_stkvar	(x,	1);
	set_cmt	(0X104B10,	"buffer",	0);
	set_cmt	(0X104B12,	"data_size",	0);
	set_cmt	(0X104B16,	"hash_out",	0);
	create_insn	(x=0X104B16);
	op_stkvar	(x,	1);
	set_cmt	(0X104B24,	"a1",	0);
	create_insn	(x=0X104B24);
	op_stkvar	(x,	1);
	set_cmt	(0X104B2A,	"len",	0);
	set_cmt	(0X104B2C,	"a2",	0);
	create_insn	(x=0X104B2C);
	op_stkvar	(x,	1);
	set_cmt	(0X104B2E,	"a1",	0);
	create_insn	(x=0X104B2E);
	op_stkvar	(x,	1);
	set_cmt	(0X104B40,	"n",	0);
	create_insn	(0X104B40);
	set_cmt	(0X104B44,	"src",	0);
	set_cmt	(0X104B46,	"dst",	0);
	create_insn	(x=0X104B46);
	op_stkvar	(x,	1);
	set_cmt	(0X104B4C,	"len",	0);
	set_cmt	(0X104B50,	"c",	0);
	set_cmt	(0X104B52,	"a1",	0);
	create_insn	(x=0X104B52);
	op_stkvar	(x,	1);
	set_cmt	(0X104B5A,	"index",	0);
	create_insn	(x=0X104B5E);
	op_stkvar	(x,	1);
	set_cmt	(0X104B60,	"a2",	0);
	set_cmt	(0X104B62,	"exponent_size",	0);
	set_cmt	(0X104B64,	"pubkey",	0);
	create_insn	(x=0X104B64);
	op_stkvar	(x,	1);
	create_insn	(x=0X104B7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X104B80);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X104B82);
	op_plain_offset	(x,	1,	0X40003318);
	op_plain_offset	(x,	129,	0X40003318);
	create_insn	(x=0X104B84);
	op_plain_offset	(x,	1,	0X40003318);
	op_plain_offset	(x,	129,	0X40003318);
	set_cmt	(0X104B88,	"data_len",	0);
	create_insn	(x=0X104B88);
	op_stkvar	(x,	1);
	set_cmt	(0X104B8A,	"data",	0);
	set_cmt	(0X104B8C,	"se_rsa_keyslot",	0);
	set_cmt	(0X104B8E,	"rsa_keylen",	0);
	set_cmt	(0X104B90,	"pubkey_hash",	0);
	create_insn	(0X104B98);
	set_cmt	(0X104B9C,	"a1",	0);
	create_insn	(x=0X104B9C);
	op_stkvar	(x,	1);
	set_cmt	(0X104B9E,	"bct_b",	0);
	set_cmt	(0X104BA0,	"bct_a",	0);
	create_insn	(0X104BA8);
	set_cmt	(0X104BAA,	"bct",	0);
	create_insn	(x=0X104BAA);
	op_stkvar	(x,	1);
	set_cmt	(0X104BAC,	"collection",	0);
	create_insn	(x=0X104BAC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X104BAE,	"ctx",	0);
	create_insn	(x=0X104BAE);
	op_stkvar	(x,	1);
	set_cmt	(0X104BB0,	"loadaddr",	0);
	set_cmt	(0X104BB2,	"other_bootloaders_count",	0);
	set_cmt	(0X104BBC,	"ctx",	0);
	create_insn	(x=0X104BBC);
	op_stkvar	(x,	1);
	create_insn	(x=0X104BC6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X104BCA);
	op_plain_offset	(x,	1,	0X40000020);
	op_plain_offset	(x,	129,	0X40000020);
	create_insn	(0X104BD6);
	set_name	(0X104BD6,	"storage_ctx::record_bct_load_failure");
	create_dword	(x=0X104C04);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X104C08);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X104C0C);
	create_dword	(x=0X104C10);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X104C14);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X104C18);
	create_dword	(0X104C1C);
	create_dword	(x=0X104C20);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X104C24);
	create_dword	(x=0X104C28);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X104C2C);
	create_insn	(0X104C36);
	create_insn	(0X104C4C);
	create_insn	(0X104C54);
	set_name	(0X104C54,	"storage_ctx::load_a_bct");
	create_insn	(x=0X104C56);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X104C5E);
	op_plain_offset	(x,	1,	0X40000000);
	op_plain_offset	(x,	129,	0X40000000);
	create_insn	(x=0X104C60);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X104C64);
	op_plain_offset	(x,	1,	0X40000000);
	op_plain_offset	(x,	129,	0X40000000);
	create_insn	(x=0X104C66);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X104C6A);
	op_plain_offset	(x,	1,	0X400000C0);
	op_plain_offset	(x,	129,	0X400000C0);
	create_insn	(x=0X104C6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X104C72);
	op_stkvar	(x,	1);
	set_cmt	(0X104C7C,	"a3",	0);
	set_cmt	(0X104C7E,	"r0_0",	0);
	create_insn	(x=0X104C7E);
	op_stkvar	(x,	1);
	set_cmt	(0X104C80,	"a2",	0);
	set_cmt	(0X104C8A,	"_DWORD",	0);
	set_cmt	(0X104C8C,	"storage_context *",	0);
	create_insn	(x=0X104C8C);
	op_stkvar	(x,	1);
	set_cmt	(0X104C8E,	"_DWORD",	0);
	set_cmt	(0X104C94,	"r0_0",	0);
	create_insn	(x=0X104C94);
	op_stkvar	(x,	1);
	set_cmt	(0X104C96,	"a3",	0);
	set_cmt	(0X104C98,	"a2",	0);
	set_cmt	(0X104CA2,	"_DWORD",	0);
	set_cmt	(0X104CA4,	"storage_context *",	0);
	create_insn	(x=0X104CA4);
	op_stkvar	(x,	1);
	set_cmt	(0X104CA6,	"_DWORD",	0);
	set_cmt	(0X104CAE,	"r0_0",	0);
	create_insn	(x=0X104CAE);
	op_stkvar	(x,	1);
	set_cmt	(0X104CB0,	"a3",	0);
	set_cmt	(0X104CB2,	"a2",	0);
	set_cmt	(0X104CBC,	"storage_context *",	0);
	create_insn	(x=0X104CBC);
	op_stkvar	(x,	1);
	set_cmt	(0X104CBE,	"_DWORD",	0);
	set_cmt	(0X104CC0,	"_DWORD",	0);
	create_insn	(x=0X104CD6);
	op_stkvar	(x,	1);
	create_insn	(x=0X104CE2);
	op_stkvar	(x,	1);
	set_cmt	(0X104CE6,	"r0_0",	0);
	create_insn	(x=0X104CE6);
	op_stkvar	(x,	1);
	set_cmt	(0X104CE8,	"a3",	0);
	set_cmt	(0X104CEA,	"a2",	0);
	create_insn	(x=0X104CF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X104CF6);
	op_stkvar	(x,	1);
	create_insn	(x=0X104CFC);
	op_stkvar	(x,	1);
	create_insn	(0X104D18);
	create_insn	(x=0X104D2C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X104D30);
	op_plain_offset	(x,	1,	0X40000000);
	op_plain_offset	(x,	129,	0X40000000);
	create_insn	(0X104D34);
	create_insn	(x=0X104D36);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X104D38);
	op_plain_offset	(x,	1,	0X40000000);
	op_plain_offset	(x,	129,	0X40000000);
	set_cmt	(0X104D3E,	"r0_0",	0);
	create_insn	(x=0X104D3E);
	op_stkvar	(x,	1);
	set_cmt	(0X104D40,	"a3",	0);
	set_cmt	(0X104D42,	"a2",	0);
	create_dword	(x=0X104D50);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X104D54);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X104D58);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X104D5C);
	create_insn	(0X104D60);
	set_name	(0X104D60,	"storage_ctx::try_load_one_bootloader");
	set_cmt	(0X104D6A,	"a1",	0);
	create_insn	(x=0X104D6A);
	op_stkvar	(x,	1);
	create_insn	(0X104D7E);
	create_insn	(0X104D82);
	create_insn	(x=0X104D86);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X104DB0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X104DB2);
	op_stkvar	(x,	1);
	set_cmt	(0X104DB4,	"bct",	0);
	create_insn	(x=0X104DB4);
	op_stkvar	(x,	1);
	set_cmt	(0X104DB6,	"loadaddr",	0);
	set_cmt	(0X104DBC,	"collection",	0);
	create_insn	(x=0X104DBC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X104DBE,	"ctx",	0);
	create_insn	(x=0X104DBE);
	op_stkvar	(x,	1);
	set_cmt	(0X104DC0,	"other_bootloaders_count",	0);
	create_insn	(x=0X104DD2);
	op_stkvar	(x,	1);
	set_cmt	(0X104DDA,	"se_rsa_keyslot",	0);
	set_cmt	(0X104DDC,	"data_len",	0);
	create_insn	(x=0X104DDC);
	op_stkvar	(x,	1);
	set_cmt	(0X104DDE,	"data",	0);
	set_cmt	(0X104DE2,	"pubkey_hash",	0);
	set_cmt	(0X104DEA,	"collection",	0);
	create_insn	(x=0X104DEA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X104DEC,	"ctx",	0);
	create_insn	(x=0X104DEC);
	op_stkvar	(x,	1);
	set_cmt	(0X104DEE,	"other_bootloaders_count",	0);
	create_insn	(0X104DF6);
	set_name	(0X104DF6,	"storage_ctx::load_bootloader");
	create_insn	(x=0X104DF8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X104DFC);
	op_plain_offset	(x,	1,	0X40002400);
	op_plain_offset	(x,	129,	0X40002400);
	create_insn	(x=0X104E00);
	op_stkvar	(x,	1);
	create_insn	(x=0X104E02);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X104E06);
	op_stkvar	(x,	1);
	create_insn	(x=0X104E08);
	op_plain_offset	(x,	1,	0X40000020);
	op_plain_offset	(x,	129,	0X40000020);
	create_insn	(x=0X104E0A);
	op_plain_offset	(x,	1,	0X40002400);
	op_plain_offset	(x,	129,	0X40002400);
	create_insn	(0X104E0E);
	create_insn	(x=0X104E14);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X104E1E);
	op_stkvar	(x,	1);
	create_insn	(x=0X104E24);
	op_stkvar	(x,	1);
	create_insn	(x=0X104E2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X104E36);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X104E3A);
	op_stkvar	(x,	1);
	create_insn	(x=0X104E42);
	op_stkvar	(x,	1);
	create_insn	(x=0X104E48);
	op_stkvar	(x,	1);
	create_insn	(x=0X104E5E);
	op_stkvar	(x,	1);
	create_insn	(0X104E6A);
	set_cmt	(0X104E6E,	"other_bootloaders_count",	0);
	create_insn	(0X104E6E);
	set_cmt	(0X104E84,	"r0_0",	0);
	create_insn	(x=0X104E84);
	op_stkvar	(x,	1);
	set_cmt	(0X104E86,	"this_bootloader_id",	0);
	set_cmt	(0X104E88,	"bootloaders",	0);
	create_insn	(x=0X104EA6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X104EB0);
	create_insn	(0X104EBC);
	create_insn	(x=0X104EC0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X104ECC);
	op_stkvar	(x,	1);
	create_insn	(0X104ED4);
	create_dword	(x=0X104EE0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X104EE0,	"collection");
	create_dword	(x=0X104EE4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X104EE4,	"bct");
	create_dword	(x=0X104EE8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X104EEC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X104EF0);
	create_dword	(x=0X104EF4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X104EF8);
	create_insn	(0X104EFC);
	set_name	(0X104EFC,	"load_context::load_context");
	create_insn	(x=0X104EFE);
	op_stkvar	(x,	1);
	create_insn	(0X104F74);
	create_insn	(0X104F92);
	create_insn	(x=0X104F96);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X104FB0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X104FBA);
	set_name	(0X104FBA,	"load_ctx::recover_from_read_failures");
	create_insn	(0X104FE6);
	create_insn	(x=0X104FEA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X10500E);
	create_insn	(0X10501E);
	create_insn	(0X10508C);
	set_cmt	(0X105096,	"a1",	0);
	set_cmt	(0X10509A,	"bct",	0);
	create_insn	(x=0X1050B8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1050C6);
	create_insn	(0X1050C8);
	create_insn	(0X1050D4);
	create_insn	(0X1050E8);
	create_insn	(0X105108);
	set_name	(0X105108,	"load_context::copy_pages");
	set_cmt	(0X105110,	"a5",	0);
	create_insn	(x=0X10514A);
	op_stkvar	(x,	1);
	create_insn	(0X105160);
	create_insn	(x=0X105184);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X10518C);
	op_stkvar	(x,	1);
	set_cmt	(0X105190,	"dst",	0);
	set_cmt	(0X105198,	"n",	0);
	set_cmt	(0X10519A,	"src",	0);
	set_cmt	(0X1051C2,	"a5",	0);
	set_cmt	(0X1051C4,	"n",	0);
	create_insn	(0X1051C4);
	set_cmt	(0X1051C6,	"src",	0);
	set_cmt	(0X1051DC,	"a3",	0);
	set_cmt	(0X1051DE,	"a2",	0);
	set_cmt	(0X1051E0,	"a1",	0);
	set_cmt	(0X1051E2,	"blocks",	0);
	create_insn	(x=0X1051E2);
	op_stkvar	(x,	1);
	create_insn	(x=0X1051EA);
	op_stkvar	(x,	1);
	set_cmt	(0X1051EC,	"src",	0);
	set_cmt	(0X1051F2,	"dst",	0);
	create_insn	(x=0X105206);
	op_stkvar	(x,	1);
	create_insn	(x=0X105208);
	op_stkvar	(x,	1);
	create_insn	(x=0X10520E);
	op_stkvar	(x,	1);
	create_insn	(x=0X105212);
	op_stkvar	(x,	1);
	create_insn	(x=0X10522E);
	op_stkvar	(x,	1);
	create_insn	(x=0X105232);
	op_stkvar	(x,	1);
	set_cmt	(0X105236,	"a7",	0);
	create_insn	(x=0X105236);
	op_stkvar	(x,	1);
	create_insn	(x=0X105240);
	op_stkvar	(x,	1);
	set_cmt	(0X105246,	"out",	0);
	set_cmt	(0X105248,	"a3",	0);
	create_insn	(0X105258);
	set_name	(0X105258,	"storage_ctx::load");
	create_insn	(x=0X10525C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X10525E,	"stor",	0);
	create_insn	(x=0X10525E);
	op_stkvar	(x,	1);
	set_cmt	(0X105260,	"other_bootloaders_count",	0);
	create_insn	(x=0X105262);
	op_stkvar	(x,	1);
	set_cmt	(0X105264,	"loadaddr",	0);
	create_insn	(x=0X105264);
	op_stkvar	(x,	1);
	set_cmt	(0X105266,	"desc",	0);
	create_insn	(x=0X105266);
	op_stkvar	(x,	1);
	set_cmt	(0X105268,	"boot",	0);
	create_insn	(x=0X10526E);
	op_plain_offset	(x,	1,	0X40003390);
	op_plain_offset	(x,	129,	0X40003390);
	set_cmt	(0X105272,	"loadctx",	0);
	create_insn	(0X105272);
	create_insn	(x=0X105280);
	op_plain_offset	(x,	1,	0X400033B0);
	op_plain_offset	(x,	129,	0X400033B0);
	create_insn	(x=0X105286);
	op_plain_offset	(x,	1,	0X400033B0);
	op_plain_offset	(x,	129,	0X400033B0);
	create_insn	(x=0X10528C);
	op_plain_offset	(x,	1,	0X40003390);
	op_plain_offset	(x,	129,	0X40003390);
	set_cmt	(0X105292,	"load_ctx",	0);
	create_insn	(x=0X1052A2);
	op_stkvar	(x,	1);
	create_insn	(x=0X1052A4);
	op_plain_offset	(x,	1,	0X400034F0);
	op_plain_offset	(x,	129,	0X400034F0);
	create_insn	(x=0X1052B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X1052C2);
	op_plain_offset	(x,	1,	0X400033B0);
	op_plain_offset	(x,	129,	0X400033B0);
	create_insn	(x=0X1052CE);
	op_plain_offset	(x,	1,	0X400033B0);
	op_plain_offset	(x,	129,	0X400033B0);
	create_insn	(x=0X1052D0);
	op_plain_offset	(x,	1,	0X400033B0);
	op_plain_offset	(x,	129,	0X400033B0);
	create_insn	(x=0X1052D4);
	op_plain_offset	(x,	1,	0X400033B0);
	op_plain_offset	(x,	129,	0X400033B0);
	create_insn	(x=0X1052D6);
	op_plain_offset	(x,	1,	0X40003390);
	op_plain_offset	(x,	129,	0X40003390);
	create_insn	(x=0X1052D8);
	op_plain_offset	(x,	1,	0X40003390);
	op_plain_offset	(x,	129,	0X40003390);
	create_insn	(x=0X1052DC);
	op_plain_offset	(x,	1,	0X40003390);
	op_plain_offset	(x,	129,	0X40003390);
	create_insn	(0X1052E0);
	create_insn	(x=0X1052E4);
	op_plain_offset	(x,	1,	0X400033B0);
	op_plain_offset	(x,	129,	0X400033B0);
	set_cmt	(0X1052EA,	"a1",	0);
	create_insn	(x=0X1052F0);
	op_plain_offset	(x,	1,	0X40003390);
	op_plain_offset	(x,	129,	0X40003390);
	create_insn	(x=0X1052FA);
	op_plain_offset	(x,	1,	0X400033B0);
	op_plain_offset	(x,	129,	0X400033B0);
	create_insn	(x=0X105300);
	op_plain_offset	(x,	1,	0X400033B0);
	op_plain_offset	(x,	129,	0X400033B0);
	create_insn	(x=0X105306);
	op_plain_offset	(x,	1,	0X40003390);
	op_plain_offset	(x,	129,	0X40003390);
	create_insn	(x=0X105310);
	op_stkvar	(x,	1);
	create_insn	(0X105328);
	create_insn	(x=0X10532E);
	op_stkvar	(x,	1);
	create_insn	(x=0X105330);
	op_stkvar	(x,	1);
	create_insn	(0X105344);
	create_insn	(0X10534E);
	create_insn	(0X10535A);
	create_insn	(0X105374);
	set_name	(0X105374,	"load_context::read_page");
	create_dword	(x=0X105394);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X105398);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X10539C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1053A0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X1053A0,	"boot");
	create_insn	(0X1053A4);
	create_insn	(0X1053D8);
	create_insn	(0X1053F8);
	set_cmt	(0X1053FE,	"bct",	0);
	set_cmt	(0X105400,	"a1",	0);
	create_dword	(x=0X105420);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X105424);
	set_name	(0X105424,	"g_storage_context::load_param_set");
	create_insn	(0X105438);
	create_insn	(0X10544E);
	set_cmt	(0X105450,	"a2",	0);
	create_insn	(x=0X105450);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X105452,	"function",	0);
	set_cmt	(0X105454,	"a1",	0);
	create_insn	(0X105462);
	set_name	(0X105462,	"storage_ctx::init_adapter");
	set_cmt	(0X105466,	"a1",	0);
	create_insn	(x=0X105488);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X105490,	"function",	0);
	set_cmt	(0X105492,	"a2",	0);
	create_insn	(x=0X10549C);
	op_stkvar	(x,	1);
	create_insn	(0X1054AC);
	set_cmt	(0X1054AE,	"a2",	0);
	create_insn	(x=0X1054AE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1054B0,	"function",	0);
	set_cmt	(0X1054B2,	"a1",	0);
	create_insn	(x=0X1054B2);
	op_stkvar	(x,	1);
	create_insn	(x=0X1054C2);
	op_stkvar	(x,	1);
	create_dword	(x=0X1054F0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1054F4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X1054F8);
	set_name	(0X1054F8,	"iostruct::write_string");
	create_insn	(0X10552E);
	create_insn	(0X105554);
	create_insn	(0X10556A);
	create_insn	(0X105582);
	create_insn	(0X105598);
	set_name	(0X105598,	"something_printf");
	create_insn	(x=0X1055A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X1055A2);
	op_stkvar	(x,	1);
	create_insn	(0X1055AC);
	create_insn	(x=0X1055B6);
	op_stkvar	(x,	1);
	create_insn	(x=0X1055BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X1055C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X1055D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X1055EE);
	op_stkvar	(x,	1);
	create_insn	(0X1055F6);
	create_insn	(x=0X1055F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X105604);
	op_stkvar	(x,	1);
	create_insn	(0X10562A);
	create_insn	(0X10562E);
	create_insn	(0X105658);
	create_insn	(0X105660);
	create_insn	(x=0X105664);
	op_stkvar	(x,	1);
	create_insn	(0X105670);
	create_insn	(0X10567C);
	create_insn	(0X105684);
	create_insn	(x=0X10568E);
	op_stkvar	(x,	1);
	create_insn	(0X105696);
	create_insn	(x=0X10569E);
	op_stkvar	(x,	1);
	create_insn	(0X1056A8);
	create_insn	(x=0X1056B0);
	op_stkvar	(x,	1);
	create_insn	(0X1056B8);
	create_insn	(x=0X1056C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X1056C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X1056C6);
	op_stkvar	(x,	1);
	create_insn	(0X1056CA);
	create_insn	(x=0X1056D2);
	op_stkvar	(x,	1);
	create_insn	(x=0X1056D6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1056E2);
	create_insn	(x=0X1056E6);
	op_stkvar	(x,	1);
	create_insn	(x=0X105700);
	op_stkvar	(x,	1);
	create_insn	(x=0X105702);
	op_stkvar	(x,	1);
	create_insn	(x=0X105712);
	op_stkvar	(x,	1);
	create_insn	(0X10571C);
	create_insn	(x=0X105722);
	op_stkvar	(x,	1);
	create_insn	(0X10572E);
	create_insn	(x=0X10573A);
	op_stkvar	(x,	1);
	create_insn	(x=0X105746);
	op_stkvar	(x,	1);
	create_insn	(x=0X10574A);
	op_stkvar	(x,	1);
	create_insn	(0X10574E);
	set_cmt	(0X105752,	"a2",	0);
	create_insn	(0X105752);
	create_insn	(x=0X105760);
	op_stkvar	(x,	1);
	create_insn	(0X10576A);
	create_insn	(x=0X105782);
	op_stkvar	(x,	1);
	create_insn	(x=0X105794);
	op_stkvar	(x,	1);
	create_insn	(0X1057A4);
	set_name	(0X1057A4,	"iostruct::writechar");
	set_cmt	(0X1057AE,	"function",	0);
	set_cmt	(0X1057B0,	"a1",	0);
	create_strlit	(0X1057C8,	0X1057CF);
	set_name	(0X1057C8,	"aNull");
	create_insn	(0X1057D0);
	create_insn	(0X1057D6);
	create_insn	(0X10580A);
	create_insn	(x=0X10581C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X105820);
	op_stkvar	(x,	1);
	create_insn	(0X105824);
	create_insn	(0X10584E);
	create_insn	(0X10585C);
	create_insn	(0X105870);
	create_insn	(0X105886);
	create_insn	(x=0X10588E);
	op_stkvar	(x,	1);
	create_insn	(0X105892);
	create_insn	(x=0X1058AE);
	op_stkvar	(x,	1);
	create_insn	(0X1058B6);
	create_insn	(0X1058C6);
	create_insn	(x=0X1058D4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1058E2);
	op_stkvar	(x,	1);
	create_insn	(0X105900);
	create_insn	(x=0X105918);
	op_stkvar	(x,	1);
	create_insn	(0X10592A);
	create_insn	(x=0X105932);
	op_stkvar	(x,	1);
	create_dword	(x=0X105950);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X105954);
	set_cmt	(0X1059B8,	"result",	0);
	set_cmt	(0X1059D2,	"result",	0);
	create_insn	(0X1059E6);
	set_name	(0X1059E6,	"configure_sdram_maybe");
	create_insn	(x=0X1059FA);
	op_stkvar	(x,	1);
	create_insn	(x=0X105A00);
	op_stkvar	(x,	1);
	create_insn	(x=0X105A0A);
	op_stkvar	(x,	1);
	create_insn	(x=0X105A1E);
	op_plain_offset	(x,	1,	0X7000E840);
	op_plain_offset	(x,	129,	0X7000E840);
	create_insn	(x=0X105A20);
	op_stkvar	(x,	1);
	set_cmt	(0X105A22,	"result",	0);
	create_insn	(x=0X105A3A);
	op_plain_offset	(x,	1,	0X7000E840);
	op_plain_offset	(x,	129,	0X7000E840);
	create_insn	(x=0X105A3C);
	op_stkvar	(x,	1);
	set_cmt	(0X105A3E,	"result",	0);
	create_insn	(x=0X105A4C);
	op_plain_offset	(x,	1,	0X7000E840);
	op_plain_offset	(x,	129,	0X7000E840);
	create_insn	(x=0X105A4E);
	op_stkvar	(x,	1);
	create_insn	(0X105A54);
	create_insn	(x=0X105A66);
	op_plain_offset	(x,	1,	0X7000E840);
	op_plain_offset	(x,	129,	0X7000E840);
	create_insn	(x=0X105A68);
	op_stkvar	(x,	1);
	set_cmt	(0X105A6A,	"result",	0);
	create_insn	(x=0X105A74);
	op_plain_offset	(x,	1,	0X7000E840);
	op_plain_offset	(x,	129,	0X7000E840);
	create_insn	(x=0X105A76);
	op_stkvar	(x,	1);
	set_cmt	(0X105A78,	"result",	0);
	create_insn	(x=0X105A7E);
	op_stkvar	(x,	1);
	create_insn	(x=0X105A8E);
	op_plain_offset	(x,	1,	0X7000E840);
	op_plain_offset	(x,	129,	0X7000E840);
	create_insn	(x=0X105A90);
	op_stkvar	(x,	1);
	set_cmt	(0X105A92,	"result",	0);
	create_insn	(x=0X105A9C);
	op_plain_offset	(x,	1,	0X7000E6C0);
	op_plain_offset	(x,	129,	0X7000E6C0);
	set_cmt	(0X105A9E,	"result",	0);
	set_cmt	(0X105AA4,	"a2",	0);
	set_cmt	(0X105AA6,	"a1",	0);
	set_cmt	(0X105AAC,	"a2",	0);
	set_cmt	(0X105AAE,	"a1",	0);
	create_insn	(x=0X105AC2);
	op_plain_offset	(x,	1,	0X60006280);
	op_plain_offset	(x,	129,	0X60006280);
	set_cmt	(0X105AC4,	"rst_state",	0);
	set_cmt	(0X105AC6,	"reg_offset_and_bit",	0);
	set_cmt	(0X105ACC,	"rst_state",	0);
	set_cmt	(0X105ACE,	"reg_offset_and_bit",	0);
	create_insn	(x=0X105AD6);
	op_plain_offset	(x,	1,	0X60006180);
	op_plain_offset	(x,	129,	0X60006180);
	create_insn	(x=0X105AE6);
	op_stkvar	(x,	1);
	create_insn	(x=0X105AF2);
	op_plain_offset	(x,	1,	0X60006180);
	op_plain_offset	(x,	129,	0X60006180);
	create_insn	(x=0X105AF8);
	op_plain_offset	(x,	1,	0X60006640);
	op_plain_offset	(x,	129,	0X60006640);
	create_insn	(x=0X105B04);
	op_plain_offset	(x,	1,	0X60006080);
	op_plain_offset	(x,	129,	0X60006080);
	set_cmt	(0X105B06,	"result",	0);
	create_insn	(x=0X105B14);
	op_plain_offset	(x,	1,	0X60006440);
	op_plain_offset	(x,	129,	0X60006440);
	create_insn	(x=0X105B1A);
	op_plain_offset	(x,	1,	0X7001BC00);
	op_plain_offset	(x,	129,	0X7001BC00);
	create_insn	(x=0X105B1E);
	op_plain_offset	(x,	1,	0X7001BC00);
	op_plain_offset	(x,	129,	0X7001BC00);
	create_insn	(x=0X105B26);
	op_plain_offset	(x,	1,	0X7001BCC0);
	op_plain_offset	(x,	129,	0X7001BCC0);
	create_insn	(x=0X105B2C);
	op_plain_offset	(x,	1,	0X7001B000);
	op_plain_offset	(x,	129,	0X7001B000);
	set_cmt	(0X105B2E,	"result",	0);
	create_insn	(x=0X105B3A);
	op_stkvar	(x,	1);
	create_insn	(x=0X105B46);
	op_plain_offset	(x,	1,	0X7001B000);
	op_plain_offset	(x,	129,	0X7001B000);
	create_insn	(x=0X105B56);
	op_stkvar	(x,	1);
	create_insn	(x=0X105B5E);
	op_stkvar	(x,	1);
	create_insn	(x=0X105B6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X105B7E);
	op_stkvar	(x,	1);
	create_insn	(x=0X105B84);
	op_plain_offset	(x,	1,	0X7001B580);
	op_plain_offset	(x,	129,	0X7001B580);
	create_insn	(x=0X105B86);
	op_stkvar	(x,	1);
	create_insn	(x=0X105B8E);
	op_stkvar	(x,	1);
	create_insn	(x=0X105B92);
	op_plain_offset	(x,	1,	0X7001B380);
	op_plain_offset	(x,	129,	0X7001B380);
	create_insn	(x=0X105B94);
	op_stkvar	(x,	1);
	create_insn	(x=0X105B98);
	op_plain_offset	(x,	1,	0X7001B380);
	op_plain_offset	(x,	129,	0X7001B380);
	create_insn	(x=0X105BA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X105BA4);
	op_plain_offset	(x,	1,	0X7001B380);
	op_plain_offset	(x,	129,	0X7001B380);
	create_insn	(x=0X105BA6);
	op_stkvar	(x,	1);
	create_insn	(x=0X105BAA);
	op_plain_offset	(x,	1,	0X7001B380);
	op_plain_offset	(x,	129,	0X7001B380);
	create_insn	(x=0X105BAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X105BB0);
	op_plain_offset	(x,	1,	0X7001B380);
	op_plain_offset	(x,	129,	0X7001B380);
	create_insn	(x=0X105BB2);
	op_stkvar	(x,	1);
	create_insn	(x=0X105BB6);
	op_plain_offset	(x,	1,	0X7001B380);
	op_plain_offset	(x,	129,	0X7001B380);
	create_insn	(x=0X105BB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X105BBC);
	op_plain_offset	(x,	1,	0X7001B380);
	op_plain_offset	(x,	129,	0X7001B380);
	create_insn	(x=0X105BBE);
	op_stkvar	(x,	1);
	create_insn	(x=0X105BC2);
	op_plain_offset	(x,	1,	0X7001B380);
	op_plain_offset	(x,	129,	0X7001B380);
	create_insn	(x=0X105BC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X105BC8);
	op_plain_offset	(x,	1,	0X7001B380);
	op_plain_offset	(x,	129,	0X7001B380);
	create_insn	(x=0X105BCA);
	op_stkvar	(x,	1);
	create_insn	(x=0X105BCE);
	op_plain_offset	(x,	1,	0X7001B380);
	op_plain_offset	(x,	129,	0X7001B380);
	create_insn	(x=0X105BD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X105BD4);
	op_plain_offset	(x,	1,	0X7001B380);
	op_plain_offset	(x,	129,	0X7001B380);
	create_insn	(x=0X105BD6);
	op_stkvar	(x,	1);
	create_insn	(x=0X105BDA);
	op_plain_offset	(x,	1,	0X7001B380);
	op_plain_offset	(x,	129,	0X7001B380);
	create_insn	(x=0X105BDC);
	op_stkvar	(x,	1);
	create_insn	(x=0X105BE6);
	op_stkvar	(x,	1);
	create_insn	(x=0X105BEA);
	op_plain_offset	(x,	1,	0X7001BC80);
	op_plain_offset	(x,	129,	0X7001BC80);
	create_insn	(x=0X105BEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X105BF0);
	op_plain_offset	(x,	1,	0X7001BC80);
	op_plain_offset	(x,	129,	0X7001BC80);
	create_insn	(x=0X105BF6);
	op_plain_offset	(x,	1,	0X7001B300);
	op_plain_offset	(x,	129,	0X7001B300);
	create_insn	(x=0X105BF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X105C00);
	op_plain_offset	(x,	1,	0X7001B5C0);
	op_plain_offset	(x,	129,	0X7001B5C0);
	create_insn	(x=0X105C02);
	op_stkvar	(x,	1);
	create_insn	(x=0X105C20);
	op_plain_offset	(x,	1,	0X7001B000);
	op_plain_offset	(x,	129,	0X7001B000);
	set_cmt	(0X105C22,	"result",	0);
	create_insn	(x=0X105C28);
	op_stkvar	(x,	1);
	create_insn	(x=0X105C30);
	op_plain_offset	(x,	1,	0X7001B5C0);
	op_plain_offset	(x,	129,	0X7001B5C0);
	create_insn	(x=0X105C32);
	op_stkvar	(x,	1);
	create_insn	(x=0X105C3A);
	op_plain_offset	(x,	1,	0X7001B400);
	op_plain_offset	(x,	129,	0X7001B400);
	create_insn	(x=0X105C3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X105C40);
	op_plain_offset	(x,	1,	0X7001B400);
	op_plain_offset	(x,	129,	0X7001B400);
	create_insn	(x=0X105C42);
	op_stkvar	(x,	1);
	create_insn	(x=0X105C46);
	op_plain_offset	(x,	1,	0X7001B400);
	op_plain_offset	(x,	129,	0X7001B400);
	create_insn	(x=0X105C48);
	op_stkvar	(x,	1);
	create_insn	(x=0X105C4C);
	op_plain_offset	(x,	1,	0X7001B400);
	op_plain_offset	(x,	129,	0X7001B400);
	create_insn	(x=0X105C4E);
	op_stkvar	(x,	1);
	create_insn	(x=0X105C52);
	op_plain_offset	(x,	1,	0X7001B400);
	op_plain_offset	(x,	129,	0X7001B400);
	create_insn	(x=0X105C54);
	op_stkvar	(x,	1);
	create_insn	(x=0X105C58);
	op_plain_offset	(x,	1,	0X7001B400);
	op_plain_offset	(x,	129,	0X7001B400);
	create_insn	(x=0X105C5A);
	op_stkvar	(x,	1);
	create_insn	(x=0X105C5E);
	op_plain_offset	(x,	1,	0X7001B400);
	op_plain_offset	(x,	129,	0X7001B400);
	create_insn	(x=0X105C60);
	op_stkvar	(x,	1);
	create_insn	(x=0X105C64);
	op_plain_offset	(x,	1,	0X7001B400);
	op_plain_offset	(x,	129,	0X7001B400);
	create_insn	(x=0X105C76);
	op_plain_offset	(x,	1,	0X7001B300);
	op_plain_offset	(x,	129,	0X7001B300);
	create_insn	(x=0X105C7E);
	op_plain_offset	(x,	1,	0X7001B540);
	op_plain_offset	(x,	129,	0X7001B540);
	create_insn	(x=0X105C86);
	op_plain_offset	(x,	1,	0X7001B2C0);
	op_plain_offset	(x,	129,	0X7001B2C0);
	create_insn	(x=0X105C8E);
	op_plain_offset	(x,	1,	0X7001B440);
	op_plain_offset	(x,	129,	0X7001B440);
	create_insn	(x=0X105C92);
	op_plain_offset	(x,	1,	0X7001B440);
	op_plain_offset	(x,	129,	0X7001B440);
	create_insn	(x=0X105C98);
	op_plain_offset	(x,	1,	0X7001B580);
	op_plain_offset	(x,	129,	0X7001B580);
	create_insn	(x=0X105CA2);
	op_plain_offset	(x,	1,	0X7001B580);
	op_plain_offset	(x,	129,	0X7001B580);
	create_insn	(x=0X105CAC);
	op_plain_offset	(x,	1,	0X7001B5C0);
	op_plain_offset	(x,	129,	0X7001B5C0);
	create_insn	(x=0X105CB6);
	op_plain_offset	(x,	1,	0X7001B540);
	op_plain_offset	(x,	129,	0X7001B540);
	create_insn	(x=0X105CBC);
	op_plain_offset	(x,	1,	0X7001B2C0);
	op_plain_offset	(x,	129,	0X7001B2C0);
	create_insn	(x=0X105CC6);
	op_plain_offset	(x,	1,	0X7001BC40);
	op_plain_offset	(x,	129,	0X7001BC40);
	create_insn	(x=0X105CCC);
	op_plain_offset	(x,	1,	0X7001BC40);
	op_plain_offset	(x,	129,	0X7001BC40);
	create_insn	(x=0X105CD2);
	op_plain_offset	(x,	1,	0X7001BC40);
	op_plain_offset	(x,	129,	0X7001BC40);
	create_insn	(x=0X105CD8);
	op_plain_offset	(x,	1,	0X7001BC40);
	op_plain_offset	(x,	129,	0X7001BC40);
	create_insn	(x=0X105CDE);
	op_plain_offset	(x,	1,	0X7001BC40);
	op_plain_offset	(x,	129,	0X7001BC40);
	create_insn	(x=0X105CE8);
	op_plain_offset	(x,	1,	0X7001B440);
	op_plain_offset	(x,	129,	0X7001B440);
	create_insn	(x=0X105CF2);
	op_plain_offset	(x,	1,	0X7001BC40);
	op_plain_offset	(x,	129,	0X7001BC40);
	create_insn	(x=0X105CF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X105CF8);
	op_plain_offset	(x,	1,	0X7001B5C0);
	op_plain_offset	(x,	129,	0X7001B5C0);
	create_insn	(x=0X105CFA);
	op_stkvar	(x,	1);
	create_insn	(x=0X105CFE);
	op_plain_offset	(x,	1,	0X7001B5C0);
	op_plain_offset	(x,	129,	0X7001B5C0);
	create_insn	(x=0X105D06);
	op_stkvar	(x,	1);
	create_insn	(x=0X105D0A);
	op_plain_offset	(x,	1,	0X7001B2C0);
	op_plain_offset	(x,	129,	0X7001B2C0);
	create_insn	(x=0X105D0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X105D10);
	op_plain_offset	(x,	1,	0X7001B580);
	op_plain_offset	(x,	129,	0X7001B580);
	create_insn	(x=0X105D12);
	op_stkvar	(x,	1);
	create_insn	(x=0X105D16);
	op_plain_offset	(x,	1,	0X7001B580);
	op_plain_offset	(x,	129,	0X7001B580);
	create_insn	(x=0X105D18);
	op_stkvar	(x,	1);
	create_insn	(x=0X105D1C);
	op_plain_offset	(x,	1,	0X7001B580);
	op_plain_offset	(x,	129,	0X7001B580);
	create_insn	(x=0X105D1E);
	op_stkvar	(x,	1);
	create_insn	(x=0X105D22);
	op_plain_offset	(x,	1,	0X7001B580);
	op_plain_offset	(x,	129,	0X7001B580);
	create_insn	(x=0X105D24);
	op_stkvar	(x,	1);
	create_insn	(x=0X105D28);
	op_plain_offset	(x,	1,	0X7001B580);
	op_plain_offset	(x,	129,	0X7001B580);
	create_insn	(x=0X105D2A);
	op_stkvar	(x,	1);
	create_insn	(x=0X105D2E);
	op_plain_offset	(x,	1,	0X7001B580);
	op_plain_offset	(x,	129,	0X7001B580);
	create_insn	(x=0X105D30);
	op_stkvar	(x,	1);
	create_insn	(x=0X105D34);
	op_plain_offset	(x,	1,	0X7001B580);
	op_plain_offset	(x,	129,	0X7001B580);
	create_insn	(x=0X105D36);
	op_stkvar	(x,	1);
	create_insn	(x=0X105D3A);
	op_plain_offset	(x,	1,	0X7001B580);
	op_plain_offset	(x,	129,	0X7001B580);
	create_insn	(x=0X105D3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X105D40);
	op_plain_offset	(x,	1,	0X7001B580);
	op_plain_offset	(x,	129,	0X7001B580);
	create_insn	(x=0X105D42);
	op_stkvar	(x,	1);
	create_insn	(x=0X105D46);
	op_plain_offset	(x,	1,	0X7001B580);
	op_plain_offset	(x,	129,	0X7001B580);
	create_insn	(x=0X105D48);
	op_stkvar	(x,	1);
	create_insn	(x=0X105D4C);
	op_plain_offset	(x,	1,	0X7001B580);
	op_plain_offset	(x,	129,	0X7001B580);
	create_insn	(x=0X105D4E);
	op_stkvar	(x,	1);
	create_insn	(x=0X105D50);
	op_stkvar	(x,	1);
	create_insn	(x=0X105D54);
	op_plain_offset	(x,	1,	0X7001B5C0);
	op_plain_offset	(x,	129,	0X7001B5C0);
	create_insn	(x=0X105D5A);
	op_plain_offset	(x,	1,	0X7001B300);
	op_plain_offset	(x,	129,	0X7001B300);
	create_insn	(x=0X105D68);
	op_plain_offset	(x,	1,	0X7001B300);
	op_plain_offset	(x,	129,	0X7001B300);
	create_insn	(x=0X105D70);
	op_plain_offset	(x,	1,	0X7001B300);
	op_plain_offset	(x,	129,	0X7001B300);
	create_insn	(x=0X105D74);
	op_plain_offset	(x,	1,	0X7001B300);
	op_plain_offset	(x,	129,	0X7001B300);
	create_insn	(x=0X105D7A);
	op_plain_offset	(x,	1,	0X7001BC00);
	op_plain_offset	(x,	129,	0X7001BC00);
	create_insn	(x=0X105D80);
	op_plain_offset	(x,	1,	0X7001BC40);
	op_plain_offset	(x,	129,	0X7001BC40);
	create_insn	(x=0X105D84);
	op_plain_offset	(x,	1,	0X7001BC40);
	op_plain_offset	(x,	129,	0X7001BC40);
	create_insn	(x=0X105D88);
	op_plain_offset	(x,	1,	0X7001BC40);
	op_plain_offset	(x,	129,	0X7001BC40);
	create_insn	(x=0X105D8C);
	op_plain_offset	(x,	1,	0X7001BC40);
	op_plain_offset	(x,	129,	0X7001BC40);
	create_insn	(x=0X105D90);
	op_plain_offset	(x,	1,	0X7001BC40);
	op_plain_offset	(x,	129,	0X7001BC40);
	create_insn	(x=0X105D92);
	op_stkvar	(x,	1);
	create_insn	(x=0X105D96);
	op_plain_offset	(x,	1,	0X7001BC40);
	op_plain_offset	(x,	129,	0X7001BC40);
	create_insn	(x=0X105D98);
	op_stkvar	(x,	1);
	create_insn	(x=0X105D9E);
	op_plain_offset	(x,	1,	0X7001B480);
	op_plain_offset	(x,	129,	0X7001B480);
	create_insn	(x=0X105DA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X105DA6);
	op_plain_offset	(x,	1,	0X7001B700);
	op_plain_offset	(x,	129,	0X7001B700);
	create_insn	(x=0X105DA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X105DAC);
	op_plain_offset	(x,	1,	0X7001B700);
	op_plain_offset	(x,	129,	0X7001B700);
	create_insn	(x=0X105DAE);
	op_stkvar	(x,	1);
	create_insn	(x=0X105DB2);
	op_plain_offset	(x,	1,	0X7001B700);
	op_plain_offset	(x,	129,	0X7001B700);
	create_insn	(x=0X105DB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X105DB8);
	op_plain_offset	(x,	1,	0X7001B700);
	op_plain_offset	(x,	129,	0X7001B700);
	create_insn	(x=0X105DBA);
	op_stkvar	(x,	1);
	create_insn	(x=0X105DBE);
	op_plain_offset	(x,	1,	0X7001B700);
	op_plain_offset	(x,	129,	0X7001B700);
	create_insn	(x=0X105DC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X105DC4);
	op_plain_offset	(x,	1,	0X7001B700);
	op_plain_offset	(x,	129,	0X7001B700);
	create_insn	(x=0X105DC6);
	op_stkvar	(x,	1);
	create_insn	(x=0X105DD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X105DD4);
	op_plain_offset	(x,	1,	0X7001B740);
	op_plain_offset	(x,	129,	0X7001B740);
	create_insn	(x=0X105DD6);
	op_stkvar	(x,	1);
	create_insn	(x=0X105DDA);
	op_plain_offset	(x,	1,	0X7001B740);
	op_plain_offset	(x,	129,	0X7001B740);
	create_insn	(x=0X105DE4);
	op_plain_offset	(x,	1,	0X7001B740);
	op_plain_offset	(x,	129,	0X7001B740);
	create_insn	(x=0X105DE8);
	op_plain_offset	(x,	1,	0X7001B740);
	op_plain_offset	(x,	129,	0X7001B740);
	create_dword	(0X105DEC);
	create_dword	(0X105DF0);
	create_dword	(x=0X105DF4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X105DF8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X105DFC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X105E00);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X105E04);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X105E08);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X105E0C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X105E10);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X105E14);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X105E18);
	create_dword	(0X105E1C);
	create_dword	(0X105E20);
	create_dword	(x=0X105E24);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X105E28);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X105E2C);
	create_dword	(x=0X105E30);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X105E34);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X105E38);
	create_insn	(x=0X105E3A);
	op_plain_offset	(x,	1,	0X7001B740);
	op_plain_offset	(x,	129,	0X7001B740);
	create_insn	(x=0X105E3E);
	op_plain_offset	(x,	1,	0X7001B740);
	op_plain_offset	(x,	129,	0X7001B740);
	create_insn	(x=0X105E42);
	op_plain_offset	(x,	1,	0X7001B740);
	op_plain_offset	(x,	129,	0X7001B740);
	create_insn	(x=0X105E46);
	op_plain_offset	(x,	1,	0X7001B740);
	op_plain_offset	(x,	129,	0X7001B740);
	create_insn	(x=0X105E4A);
	op_plain_offset	(x,	1,	0X7001B740);
	op_plain_offset	(x,	129,	0X7001B740);
	create_insn	(x=0X105E54);
	op_plain_offset	(x,	1,	0X7001B780);
	op_plain_offset	(x,	129,	0X7001B780);
	create_insn	(x=0X105E58);
	op_plain_offset	(x,	1,	0X7001B780);
	op_plain_offset	(x,	129,	0X7001B780);
	create_insn	(x=0X105E5A);
	op_stkvar	(x,	1);
	create_insn	(x=0X105E60);
	op_plain_offset	(x,	1,	0X7001BBC0);
	op_plain_offset	(x,	129,	0X7001BBC0);
	create_insn	(x=0X105E62);
	op_stkvar	(x,	1);
	create_insn	(x=0X105E66);
	op_plain_offset	(x,	1,	0X7001BBC0);
	op_plain_offset	(x,	129,	0X7001BBC0);
	create_insn	(x=0X105E68);
	op_stkvar	(x,	1);
	create_insn	(x=0X105E6C);
	op_plain_offset	(x,	1,	0X7001BBC0);
	op_plain_offset	(x,	129,	0X7001BBC0);
	create_insn	(x=0X105E6E);
	op_stkvar	(x,	1);
	create_insn	(x=0X105E72);
	op_plain_offset	(x,	1,	0X7001BBC0);
	op_plain_offset	(x,	129,	0X7001BBC0);
	create_insn	(x=0X105E74);
	op_stkvar	(x,	1);
	create_insn	(x=0X105E7A);
	op_plain_offset	(x,	1,	0X7001BCC0);
	op_plain_offset	(x,	129,	0X7001BCC0);
	create_insn	(x=0X105E7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X105E84);
	op_stkvar	(x,	1);
	create_insn	(x=0X105E88);
	op_plain_offset	(x,	1,	0X7001B600);
	op_plain_offset	(x,	129,	0X7001B600);
	create_insn	(x=0X105E8A);
	op_stkvar	(x,	1);
	create_insn	(x=0X105E8E);
	op_plain_offset	(x,	1,	0X7001B600);
	op_plain_offset	(x,	129,	0X7001B600);
	create_insn	(x=0X105E98);
	op_plain_offset	(x,	1,	0X7001B600);
	op_plain_offset	(x,	129,	0X7001B600);
	create_insn	(x=0X105E9C);
	op_plain_offset	(x,	1,	0X7001B600);
	op_plain_offset	(x,	129,	0X7001B600);
	create_insn	(x=0X105EA0);
	op_plain_offset	(x,	1,	0X7001B600);
	op_plain_offset	(x,	129,	0X7001B600);
	create_insn	(x=0X105EA4);
	op_plain_offset	(x,	1,	0X7001B600);
	op_plain_offset	(x,	129,	0X7001B600);
	create_insn	(x=0X105EA8);
	op_plain_offset	(x,	1,	0X7001B600);
	op_plain_offset	(x,	129,	0X7001B600);
	create_insn	(x=0X105EAC);
	op_plain_offset	(x,	1,	0X7001B600);
	op_plain_offset	(x,	129,	0X7001B600);
	create_insn	(x=0X105EB0);
	op_plain_offset	(x,	1,	0X7001B600);
	op_plain_offset	(x,	129,	0X7001B600);
	create_insn	(x=0X105EB4);
	op_plain_offset	(x,	1,	0X7001B600);
	op_plain_offset	(x,	129,	0X7001B600);
	create_insn	(x=0X105EB8);
	op_plain_offset	(x,	1,	0X7001B600);
	op_plain_offset	(x,	129,	0X7001B600);
	create_insn	(x=0X105EBE);
	op_plain_offset	(x,	1,	0X7001B300);
	op_plain_offset	(x,	129,	0X7001B300);
	create_insn	(x=0X105ECA);
	op_plain_offset	(x,	1,	0X7001B640);
	op_plain_offset	(x,	129,	0X7001B640);
	create_insn	(x=0X105ECE);
	op_plain_offset	(x,	1,	0X7001B640);
	op_plain_offset	(x,	129,	0X7001B640);
	create_insn	(x=0X105ED2);
	op_plain_offset	(x,	1,	0X7001B640);
	op_plain_offset	(x,	129,	0X7001B640);
	create_insn	(x=0X105ED6);
	op_plain_offset	(x,	1,	0X7001B640);
	op_plain_offset	(x,	129,	0X7001B640);
	create_insn	(x=0X105EDA);
	op_plain_offset	(x,	1,	0X7001B640);
	op_plain_offset	(x,	129,	0X7001B640);
	create_insn	(x=0X105EE0);
	op_plain_offset	(x,	1,	0X7001B640);
	op_plain_offset	(x,	129,	0X7001B640);
	create_insn	(x=0X105EEA);
	op_plain_offset	(x,	1,	0X7001B640);
	op_plain_offset	(x,	129,	0X7001B640);
	create_insn	(x=0X105EEE);
	op_plain_offset	(x,	1,	0X7001B640);
	op_plain_offset	(x,	129,	0X7001B640);
	create_insn	(x=0X105EF2);
	op_plain_offset	(x,	1,	0X7001B640);
	op_plain_offset	(x,	129,	0X7001B640);
	create_insn	(x=0X105EF6);
	op_plain_offset	(x,	1,	0X7001B640);
	op_plain_offset	(x,	129,	0X7001B640);
	create_insn	(x=0X105EFA);
	op_plain_offset	(x,	1,	0X7001B640);
	op_plain_offset	(x,	129,	0X7001B640);
	create_insn	(x=0X105F06);
	op_plain_offset	(x,	1,	0X7001B680);
	op_plain_offset	(x,	129,	0X7001B680);
	create_insn	(x=0X105F0A);
	op_plain_offset	(x,	1,	0X7001B680);
	op_plain_offset	(x,	129,	0X7001B680);
	create_insn	(x=0X105F0E);
	op_plain_offset	(x,	1,	0X7001B680);
	op_plain_offset	(x,	129,	0X7001B680);
	create_insn	(x=0X105F12);
	op_plain_offset	(x,	1,	0X7001B680);
	op_plain_offset	(x,	129,	0X7001B680);
	create_insn	(x=0X105F16);
	op_plain_offset	(x,	1,	0X7001B680);
	op_plain_offset	(x,	129,	0X7001B680);
	create_insn	(x=0X105F1A);
	op_plain_offset	(x,	1,	0X7001B680);
	op_plain_offset	(x,	129,	0X7001B680);
	create_insn	(x=0X105F1E);
	op_plain_offset	(x,	1,	0X7001B680);
	op_plain_offset	(x,	129,	0X7001B680);
	create_insn	(x=0X105F22);
	op_plain_offset	(x,	1,	0X7001B680);
	op_plain_offset	(x,	129,	0X7001B680);
	create_insn	(x=0X105F26);
	op_plain_offset	(x,	1,	0X7001B680);
	op_plain_offset	(x,	129,	0X7001B680);
	create_insn	(x=0X105F2A);
	op_plain_offset	(x,	1,	0X7001B680);
	op_plain_offset	(x,	129,	0X7001B680);
	create_insn	(x=0X105F32);
	op_plain_offset	(x,	1,	0X7001B680);
	op_plain_offset	(x,	129,	0X7001B680);
	create_insn	(x=0X105F3E);
	op_plain_offset	(x,	1,	0X7001B6C0);
	op_plain_offset	(x,	129,	0X7001B6C0);
	create_insn	(x=0X105F42);
	op_plain_offset	(x,	1,	0X7001B6C0);
	op_plain_offset	(x,	129,	0X7001B6C0);
	create_insn	(x=0X105F46);
	op_plain_offset	(x,	1,	0X7001B6C0);
	op_plain_offset	(x,	129,	0X7001B6C0);
	create_insn	(x=0X105F4A);
	op_plain_offset	(x,	1,	0X7001B6C0);
	op_plain_offset	(x,	129,	0X7001B6C0);
	create_insn	(x=0X105F4E);
	op_plain_offset	(x,	1,	0X7001B6C0);
	op_plain_offset	(x,	129,	0X7001B6C0);
	create_insn	(x=0X105F52);
	op_plain_offset	(x,	1,	0X7001B6C0);
	op_plain_offset	(x,	129,	0X7001B6C0);
	create_insn	(x=0X105F56);
	op_plain_offset	(x,	1,	0X7001B6C0);
	op_plain_offset	(x,	129,	0X7001B6C0);
	create_insn	(x=0X105F62);
	op_plain_offset	(x,	1,	0X7001BC00);
	op_plain_offset	(x,	129,	0X7001BC00);
	create_insn	(x=0X105F66);
	op_plain_offset	(x,	1,	0X7001BC00);
	op_plain_offset	(x,	129,	0X7001BC00);
	create_insn	(x=0X105F6A);
	op_plain_offset	(x,	1,	0X7001BC00);
	op_plain_offset	(x,	129,	0X7001BC00);
	create_insn	(x=0X105F6E);
	op_plain_offset	(x,	1,	0X7001BC00);
	op_plain_offset	(x,	129,	0X7001BC00);
	create_insn	(x=0X105F72);
	op_plain_offset	(x,	1,	0X7001BC00);
	op_plain_offset	(x,	129,	0X7001BC00);
	create_insn	(x=0X105F76);
	op_plain_offset	(x,	1,	0X7001BC00);
	op_plain_offset	(x,	129,	0X7001BC00);
	create_insn	(x=0X105F80);
	op_stkvar	(x,	1);
	create_insn	(x=0X105F82);
	op_plain_offset	(x,	1,	0X7001BC00);
	op_plain_offset	(x,	129,	0X7001BC00);
	create_insn	(x=0X105F88);
	op_plain_offset	(x,	1,	0X7001BC40);
	op_plain_offset	(x,	129,	0X7001BC40);
	create_insn	(x=0X105F98);
	op_plain_offset	(x,	1,	0X7001B000);
	op_plain_offset	(x,	129,	0X7001B000);
	create_insn	(x=0X105FA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X105FA6);
	op_plain_offset	(x,	1,	0X70019640);
	op_plain_offset	(x,	129,	0X70019640);
	create_insn	(x=0X105FA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X105FAE);
	op_plain_offset	(x,	1,	0X70019940);
	op_plain_offset	(x,	129,	0X70019940);
	create_insn	(x=0X105FB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X105FB6);
	op_plain_offset	(x,	1,	0X70019640);
	op_plain_offset	(x,	129,	0X70019640);
	create_insn	(x=0X105FB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X105FBE);
	op_plain_offset	(x,	1,	0X70019400);
	op_plain_offset	(x,	129,	0X70019400);
	create_insn	(x=0X105FC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X105FC8);
	op_plain_offset	(x,	1,	0X70019580);
	op_plain_offset	(x,	129,	0X70019580);
	create_insn	(x=0X105FCA);
	op_stkvar	(x,	1);
	create_insn	(x=0X105FD2);
	op_plain_offset	(x,	1,	0X70019980);
	op_plain_offset	(x,	129,	0X70019980);
	create_insn	(x=0X105FD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X105FD8);
	op_plain_offset	(x,	1,	0X70019980);
	op_plain_offset	(x,	129,	0X70019980);
	create_insn	(x=0X105FDE);
	op_plain_offset	(x,	1,	0X70019040);
	op_plain_offset	(x,	129,	0X70019040);
	create_insn	(x=0X105FE2);
	op_plain_offset	(x,	1,	0X70019040);
	op_plain_offset	(x,	129,	0X70019040);
	create_insn	(x=0X105FE6);
	op_plain_offset	(x,	1,	0X70019040);
	op_plain_offset	(x,	129,	0X70019040);
	create_insn	(x=0X105FEA);
	op_plain_offset	(x,	1,	0X70019040);
	op_plain_offset	(x,	129,	0X70019040);
	create_insn	(x=0X105FEE);
	op_plain_offset	(x,	1,	0X70019040);
	op_plain_offset	(x,	129,	0X70019040);
	create_insn	(x=0X105FF2);
	op_plain_offset	(x,	1,	0X70019040);
	op_plain_offset	(x,	129,	0X70019040);
	create_insn	(x=0X105FFC);
	op_plain_offset	(x,	1,	0X70019040);
	op_plain_offset	(x,	129,	0X70019040);
	create_insn	(x=0X106000);
	op_plain_offset	(x,	1,	0X70019040);
	op_plain_offset	(x,	129,	0X70019040);
	create_insn	(x=0X106002);
	op_stkvar	(x,	1);
	create_insn	(x=0X106008);
	op_plain_offset	(x,	1,	0X70019640);
	op_plain_offset	(x,	129,	0X70019640);
	create_insn	(x=0X10600A);
	op_stkvar	(x,	1);
	create_insn	(x=0X106012);
	op_plain_offset	(x,	1,	0X700199C0);
	op_plain_offset	(x,	129,	0X700199C0);
	create_insn	(x=0X106014);
	op_stkvar	(x,	1);
	create_insn	(x=0X10601A);
	op_plain_offset	(x,	1,	0X70019640);
	op_plain_offset	(x,	129,	0X70019640);
	create_insn	(x=0X106022);
	op_stkvar	(x,	1);
	create_insn	(x=0X106026);
	op_plain_offset	(x,	1,	0X70019980);
	op_plain_offset	(x,	129,	0X70019980);
	create_insn	(x=0X106028);
	op_stkvar	(x,	1);
	create_insn	(x=0X10602C);
	op_plain_offset	(x,	1,	0X70019980);
	op_plain_offset	(x,	129,	0X70019980);
	create_insn	(x=0X10602E);
	op_stkvar	(x,	1);
	create_insn	(x=0X106032);
	op_plain_offset	(x,	1,	0X70019980);
	op_plain_offset	(x,	129,	0X70019980);
	create_insn	(x=0X10603A);
	op_plain_offset	(x,	1,	0X70019080);
	op_plain_offset	(x,	129,	0X70019080);
	create_insn	(x=0X10603E);
	op_plain_offset	(x,	1,	0X70019080);
	op_plain_offset	(x,	129,	0X70019080);
	create_insn	(x=0X106046);
	op_plain_offset	(x,	1,	0X700196C0);
	op_plain_offset	(x,	129,	0X700196C0);
	create_insn	(x=0X10604A);
	op_plain_offset	(x,	1,	0X700196C0);
	op_plain_offset	(x,	129,	0X700196C0);
	create_insn	(x=0X10604E);
	op_plain_offset	(x,	1,	0X70019080);
	op_plain_offset	(x,	129,	0X70019080);
	create_insn	(x=0X106052);
	op_plain_offset	(x,	1,	0X70019080);
	op_plain_offset	(x,	129,	0X70019080);
	create_insn	(x=0X106056);
	op_plain_offset	(x,	1,	0X70019080);
	op_plain_offset	(x,	129,	0X70019080);
	create_insn	(x=0X10605A);
	op_plain_offset	(x,	1,	0X70019080);
	op_plain_offset	(x,	129,	0X70019080);
	create_insn	(x=0X10605E);
	op_plain_offset	(x,	1,	0X70019080);
	op_plain_offset	(x,	129,	0X70019080);
	create_insn	(x=0X106062);
	op_plain_offset	(x,	1,	0X70019080);
	op_plain_offset	(x,	129,	0X70019080);
	create_insn	(x=0X106066);
	op_plain_offset	(x,	1,	0X70019080);
	op_plain_offset	(x,	129,	0X70019080);
	create_insn	(x=0X10606A);
	op_plain_offset	(x,	1,	0X70019080);
	op_plain_offset	(x,	129,	0X70019080);
	create_insn	(x=0X10606E);
	op_plain_offset	(x,	1,	0X70019080);
	op_plain_offset	(x,	129,	0X70019080);
	create_insn	(x=0X106072);
	op_plain_offset	(x,	1,	0X70019080);
	op_plain_offset	(x,	129,	0X70019080);
	create_insn	(x=0X106074);
	op_stkvar	(x,	1);
	create_insn	(x=0X106078);
	op_plain_offset	(x,	1,	0X700196C0);
	op_plain_offset	(x,	129,	0X700196C0);
	create_insn	(x=0X10607A);
	op_stkvar	(x,	1);
	create_insn	(x=0X106084);
	op_stkvar	(x,	1);
	create_insn	(x=0X106088);
	op_plain_offset	(x,	1,	0X700190C0);
	op_plain_offset	(x,	129,	0X700190C0);
	create_insn	(x=0X10608A);
	op_stkvar	(x,	1);
	create_insn	(x=0X106090);
	op_stkvar	(x,	1);
	create_insn	(x=0X106094);
	op_plain_offset	(x,	1,	0X700190C0);
	op_plain_offset	(x,	129,	0X700190C0);
	create_insn	(x=0X106096);
	op_stkvar	(x,	1);
	create_insn	(x=0X10609A);
	op_plain_offset	(x,	1,	0X700190C0);
	op_plain_offset	(x,	129,	0X700190C0);
	create_insn	(x=0X10609C);
	op_stkvar	(x,	1);
	create_insn	(x=0X1060A0);
	op_plain_offset	(x,	1,	0X700190C0);
	op_plain_offset	(x,	129,	0X700190C0);
	create_insn	(x=0X1060A2);
	op_stkvar	(x,	1);
	create_insn	(x=0X1060A6);
	op_plain_offset	(x,	1,	0X700190C0);
	op_plain_offset	(x,	129,	0X700190C0);
	create_insn	(x=0X1060A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X1060AC);
	op_plain_offset	(x,	1,	0X700190C0);
	op_plain_offset	(x,	129,	0X700190C0);
	create_insn	(x=0X1060AE);
	op_stkvar	(x,	1);
	create_insn	(x=0X1060B2);
	op_plain_offset	(x,	1,	0X700190C0);
	op_plain_offset	(x,	129,	0X700190C0);
	create_insn	(x=0X1060B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X1060B8);
	op_plain_offset	(x,	1,	0X700190C0);
	op_plain_offset	(x,	129,	0X700190C0);
	create_insn	(x=0X1060BA);
	op_stkvar	(x,	1);
	create_insn	(x=0X1060C0);
	op_plain_offset	(x,	1,	0X70019940);
	op_plain_offset	(x,	129,	0X70019940);
	create_insn	(x=0X1060C2);
	op_stkvar	(x,	1);
	create_insn	(x=0X1060C6);
	op_plain_offset	(x,	1,	0X700190C0);
	op_plain_offset	(x,	129,	0X700190C0);
	create_insn	(x=0X1060C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X1060D0);
	op_plain_offset	(x,	1,	0X700199C0);
	op_plain_offset	(x,	129,	0X700199C0);
	create_insn	(x=0X1060D4);
	op_plain_offset	(x,	1,	0X700190C0);
	op_plain_offset	(x,	129,	0X700190C0);
	create_insn	(x=0X1060D6);
	op_stkvar	(x,	1);
	create_insn	(x=0X1060DA);
	op_plain_offset	(x,	1,	0X700190C0);
	op_plain_offset	(x,	129,	0X700190C0);
	create_insn	(x=0X1060DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X1060EA);
	op_plain_offset	(x,	1,	0X7001B000);
	op_plain_offset	(x,	129,	0X7001B000);
	create_insn	(x=0X1060F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X106108);
	op_plain_offset	(x,	1,	0X7001B700);
	op_plain_offset	(x,	129,	0X7001B700);
	create_insn	(x=0X10610E);
	op_plain_offset	(x,	1,	0X7001B700);
	op_plain_offset	(x,	129,	0X7001B700);
	create_insn	(x=0X106118);
	op_plain_offset	(x,	1,	0X7001B2C0);
	op_plain_offset	(x,	129,	0X7001B2C0);
	create_insn	(x=0X106128);
	op_plain_offset	(x,	1,	0X7001B280);
	op_plain_offset	(x,	129,	0X7001B280);
	create_insn	(x=0X10612C);
	op_plain_offset	(x,	1,	0X7001B280);
	op_plain_offset	(x,	129,	0X7001B280);
	set_cmt	(0X10612E,	"result",	0);
	create_insn	(x=0X10613E);
	op_stkvar	(x,	1);
	create_insn	(x=0X106146);
	op_plain_offset	(x,	1,	0X7001B280);
	op_plain_offset	(x,	129,	0X7001B280);
	create_insn	(x=0X106148);
	op_stkvar	(x,	1);
	create_insn	(x=0X106150);
	op_plain_offset	(x,	1,	0X7001B540);
	op_plain_offset	(x,	129,	0X7001B540);
	create_insn	(x=0X106152);
	op_stkvar	(x,	1);
	create_insn	(x=0X106156);
	op_plain_offset	(x,	1,	0X7001B540);
	op_plain_offset	(x,	129,	0X7001B540);
	create_insn	(x=0X106158);
	op_stkvar	(x,	1);
	create_insn	(x=0X10615C);
	op_plain_offset	(x,	1,	0X7001B540);
	op_plain_offset	(x,	129,	0X7001B540);
	create_insn	(x=0X10615E);
	op_stkvar	(x,	1);
	create_insn	(x=0X106166);
	op_plain_offset	(x,	1,	0X7001B0C0);
	op_plain_offset	(x,	129,	0X7001B0C0);
	create_insn	(x=0X106168);
	op_stkvar	(x,	1);
	create_insn	(x=0X10616C);
	op_plain_offset	(x,	1,	0X7001B0C0);
	op_plain_offset	(x,	129,	0X7001B0C0);
	create_insn	(x=0X10616E);
	op_stkvar	(x,	1);
	create_insn	(x=0X106172);
	op_plain_offset	(x,	1,	0X7001B0C0);
	op_plain_offset	(x,	129,	0X7001B0C0);
	create_insn	(x=0X106174);
	op_stkvar	(x,	1);
	create_insn	(x=0X106176);
	op_stkvar	(x,	1);
	create_insn	(x=0X10617A);
	op_plain_offset	(x,	1,	0X7001B0C0);
	op_plain_offset	(x,	129,	0X7001B0C0);
	create_insn	(x=0X106182);
	op_plain_offset	(x,	1,	0X7001B100);
	op_plain_offset	(x,	129,	0X7001B100);
	create_insn	(x=0X106188);
	op_plain_offset	(x,	1,	0X7001B000);
	op_plain_offset	(x,	129,	0X7001B000);
	create_insn	(x=0X106190);
	op_plain_offset	(x,	1,	0X7001B000);
	op_plain_offset	(x,	129,	0X7001B000);
	create_insn	(x=0X106196);
	op_plain_offset	(x,	1,	0X7001B580);
	op_plain_offset	(x,	129,	0X7001B580);
	create_insn	(x=0X1061A8);
	op_plain_offset	(x,	1,	0X7001B000);
	op_plain_offset	(x,	129,	0X7001B000);
	create_insn	(x=0X1061AC);
	op_plain_offset	(x,	1,	0X7001B000);
	op_plain_offset	(x,	129,	0X7001B000);
	create_insn	(x=0X1061B4);
	op_plain_offset	(x,	1,	0X7001B080);
	op_plain_offset	(x,	129,	0X7001B080);
	create_insn	(x=0X1061BA);
	op_plain_offset	(x,	1,	0X7001B140);
	op_plain_offset	(x,	129,	0X7001B140);
	create_insn	(x=0X1061C0);
	op_plain_offset	(x,	1,	0X7001B140);
	op_plain_offset	(x,	129,	0X7001B140);
	create_insn	(x=0X1061C8);
	op_plain_offset	(x,	1,	0X7001B000);
	op_plain_offset	(x,	129,	0X7001B000);
	create_insn	(x=0X1061D0);
	op_plain_offset	(x,	1,	0X7001B040);
	op_plain_offset	(x,	129,	0X7001B040);
	create_insn	(x=0X1061D8);
	op_plain_offset	(x,	1,	0X7001B040);
	op_plain_offset	(x,	129,	0X7001B040);
	create_insn	(x=0X1061E0);
	op_plain_offset	(x,	1,	0X7001B040);
	op_plain_offset	(x,	129,	0X7001B040);
	create_insn	(x=0X1061E4);
	op_plain_offset	(x,	1,	0X7001B040);
	op_plain_offset	(x,	129,	0X7001B040);
	create_insn	(x=0X1061E8);
	op_plain_offset	(x,	1,	0X7001B040);
	op_plain_offset	(x,	129,	0X7001B040);
	create_insn	(x=0X1061F0);
	op_plain_offset	(x,	1,	0X7001B040);
	op_plain_offset	(x,	129,	0X7001B040);
	create_insn	(x=0X1061F4);
	op_plain_offset	(x,	1,	0X7001B080);
	op_plain_offset	(x,	129,	0X7001B080);
	create_insn	(x=0X1061FA);
	op_plain_offset	(x,	1,	0X7001B040);
	op_plain_offset	(x,	129,	0X7001B040);
	create_insn	(x=0X1061FE);
	op_plain_offset	(x,	1,	0X7001B4C0);
	op_plain_offset	(x,	129,	0X7001B4C0);
	create_insn	(x=0X10620C);
	op_plain_offset	(x,	1,	0X7001B480);
	op_plain_offset	(x,	129,	0X7001B480);
	create_insn	(x=0X106214);
	op_plain_offset	(x,	1,	0X7001B480);
	op_plain_offset	(x,	129,	0X7001B480);
	create_insn	(x=0X106218);
	op_plain_offset	(x,	1,	0X7001B2C0);
	op_plain_offset	(x,	129,	0X7001B2C0);
	create_insn	(x=0X106220);
	op_plain_offset	(x,	1,	0X7001B480);
	op_plain_offset	(x,	129,	0X7001B480);
	create_insn	(x=0X106228);
	op_plain_offset	(x,	1,	0X7001B480);
	op_plain_offset	(x,	129,	0X7001B480);
	create_insn	(x=0X106230);
	op_plain_offset	(x,	1,	0X7001B040);
	op_plain_offset	(x,	129,	0X7001B040);
	create_insn	(x=0X106238);
	op_plain_offset	(x,	1,	0X7001B540);
	op_plain_offset	(x,	129,	0X7001B540);
	create_insn	(x=0X10623E);
	op_plain_offset	(x,	1,	0X7001B440);
	op_plain_offset	(x,	129,	0X7001B440);
	create_insn	(x=0X106242);
	op_plain_offset	(x,	1,	0X7001B440);
	op_plain_offset	(x,	129,	0X7001B440);
	create_insn	(x=0X106248);
	op_plain_offset	(x,	1,	0X7001B140);
	op_plain_offset	(x,	129,	0X7001B140);
	create_dword	(x=0X10624C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X106250);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X106254);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X106258);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X10625C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X106260);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X106264);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X106268);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X10626C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X106270);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X106274);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X106278);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X10627C);
	create_insn	(x=0X10627E);
	op_plain_offset	(x,	1,	0X7001B140);
	op_plain_offset	(x,	129,	0X7001B140);
	create_insn	(x=0X106284);
	op_plain_offset	(x,	1,	0X7001B140);
	op_plain_offset	(x,	129,	0X7001B140);
	create_insn	(x=0X106288);
	op_stkvar	(x,	1);
	create_insn	(x=0X10628A);
	op_plain_offset	(x,	1,	0X7001B540);
	op_plain_offset	(x,	129,	0X7001B540);
	create_insn	(x=0X106290);
	op_plain_offset	(x,	1,	0X7001BC40);
	op_plain_offset	(x,	129,	0X7001BC40);
	create_insn	(x=0X106292);
	op_stkvar	(x,	1);
	create_insn	(x=0X10629E);
	op_plain_offset	(x,	1,	0X7001B000);
	op_plain_offset	(x,	129,	0X7001B000);
	create_insn	(x=0X1062A6);
	op_plain_offset	(x,	1,	0X7001B040);
	op_plain_offset	(x,	129,	0X7001B040);
	create_insn	(x=0X1062A8);
	op_plain_offset	(x,	1,	0X7001B400);
	op_plain_offset	(x,	129,	0X7001B400);
	create_insn	(x=0X1062AE);
	op_plain_offset	(x,	1,	0X7001B400);
	op_plain_offset	(x,	129,	0X7001B400);
	create_insn	(x=0X1062B8);
	op_plain_offset	(x,	1,	0X7001B040);
	op_plain_offset	(x,	129,	0X7001B040);
	create_insn	(x=0X1062C2);
	op_plain_offset	(x,	1,	0X7001B040);
	op_plain_offset	(x,	129,	0X7001B040);
	create_insn	(x=0X1062CA);
	op_plain_offset	(x,	1,	0X7001B2C0);
	op_plain_offset	(x,	129,	0X7001B2C0);
	create_insn	(x=0X1062CE);
	op_plain_offset	(x,	1,	0X7001B2C0);
	op_plain_offset	(x,	129,	0X7001B2C0);
	create_insn	(x=0X1062D4);
	op_plain_offset	(x,	1,	0X7001B2C0);
	op_plain_offset	(x,	129,	0X7001B2C0);
	create_insn	(x=0X1062D8);
	op_plain_offset	(x,	1,	0X7001B540);
	op_plain_offset	(x,	129,	0X7001B540);
	create_insn	(x=0X1062E0);
	op_plain_offset	(x,	1,	0X7001B040);
	op_plain_offset	(x,	129,	0X7001B040);
	create_insn	(x=0X1062E8);
	op_plain_offset	(x,	1,	0X7001B040);
	op_plain_offset	(x,	129,	0X7001B040);
	create_insn	(x=0X1062EC);
	op_plain_offset	(x,	1,	0X7001B3C0);
	op_plain_offset	(x,	129,	0X7001B3C0);
	create_insn	(x=0X1062F0);
	op_plain_offset	(x,	1,	0X7001B040);
	op_plain_offset	(x,	129,	0X7001B040);
	create_insn	(x=0X1062F4);
	op_plain_offset	(x,	1,	0X7001B040);
	op_plain_offset	(x,	129,	0X7001B040);
	create_insn	(x=0X106300);
	op_plain_offset	(x,	1,	0X7001B080);
	op_plain_offset	(x,	129,	0X7001B080);
	create_insn	(x=0X106304);
	op_plain_offset	(x,	1,	0X7001B080);
	op_plain_offset	(x,	129,	0X7001B080);
	create_insn	(x=0X10630A);
	op_plain_offset	(x,	1,	0X7001B080);
	op_plain_offset	(x,	129,	0X7001B080);
	create_insn	(x=0X106310);
	op_plain_offset	(x,	1,	0X7001B100);
	op_plain_offset	(x,	129,	0X7001B100);
	create_insn	(x=0X106314);
	op_plain_offset	(x,	1,	0X7001B100);
	op_plain_offset	(x,	129,	0X7001B100);
	create_insn	(x=0X10631A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10631E);
	op_plain_offset	(x,	1,	0X7001B080);
	op_plain_offset	(x,	129,	0X7001B080);
	create_insn	(x=0X106324);
	op_stkvar	(x,	1);
	create_insn	(x=0X106328);
	op_plain_offset	(x,	1,	0X7001B080);
	op_plain_offset	(x,	129,	0X7001B080);
	create_insn	(x=0X10632E);
	op_stkvar	(x,	1);
	create_insn	(x=0X106332);
	op_plain_offset	(x,	1,	0X7001B3C0);
	op_plain_offset	(x,	129,	0X7001B3C0);
	create_insn	(x=0X106336);
	op_stkvar	(x,	1);
	create_insn	(x=0X106338);
	op_plain_offset	(x,	1,	0X7001B080);
	op_plain_offset	(x,	129,	0X7001B080);
	create_insn	(x=0X10633E);
	op_stkvar	(x,	1);
	create_insn	(x=0X106342);
	op_plain_offset	(x,	1,	0X7001B140);
	op_plain_offset	(x,	129,	0X7001B140);
	create_insn	(x=0X106346);
	op_stkvar	(x,	1);
	create_insn	(x=0X106348);
	op_plain_offset	(x,	1,	0X7001B140);
	op_plain_offset	(x,	129,	0X7001B140);
	create_insn	(x=0X10634E);
	op_stkvar	(x,	1);
	create_insn	(x=0X106352);
	op_plain_offset	(x,	1,	0X7001B080);
	op_plain_offset	(x,	129,	0X7001B080);
	create_insn	(x=0X106356);
	op_stkvar	(x,	1);
	create_insn	(x=0X106358);
	op_plain_offset	(x,	1,	0X7001B080);
	op_plain_offset	(x,	129,	0X7001B080);
	create_insn	(x=0X10635C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10635E);
	op_plain_offset	(x,	1,	0X7001B080);
	op_plain_offset	(x,	129,	0X7001B080);
	create_insn	(x=0X106362);
	op_stkvar	(x,	1);
	create_insn	(x=0X106364);
	op_plain_offset	(x,	1,	0X7001B080);
	op_plain_offset	(x,	129,	0X7001B080);
	create_insn	(x=0X106368);
	op_plain_offset	(x,	1,	0X7001B080);
	op_plain_offset	(x,	129,	0X7001B080);
	create_insn	(x=0X106370);
	op_plain_offset	(x,	1,	0X7001B080);
	op_plain_offset	(x,	129,	0X7001B080);
	create_insn	(x=0X106372);
	op_stkvar	(x,	1);
	create_insn	(x=0X10637A);
	op_plain_offset	(x,	1,	0X7001B280);
	op_plain_offset	(x,	129,	0X7001B280);
	create_insn	(x=0X10637C);
	op_stkvar	(x,	1);
	create_insn	(x=0X106382);
	op_stkvar	(x,	1);
	create_insn	(x=0X106390);
	op_stkvar	(x,	1);
	create_insn	(x=0X106396);
	op_plain_offset	(x,	1,	0X7001B100);
	op_plain_offset	(x,	129,	0X7001B100);
	create_insn	(x=0X106398);
	op_stkvar	(x,	1);
	create_insn	(x=0X1063A4);
	op_plain_offset	(x,	1,	0X7001B440);
	op_plain_offset	(x,	129,	0X7001B440);
	create_insn	(x=0X1063A8);
	op_plain_offset	(x,	1,	0X7001B440);
	op_plain_offset	(x,	129,	0X7001B440);
	create_insn	(x=0X1063AA);
	op_stkvar	(x,	1);
	create_insn	(x=0X1063B0);
	op_plain_offset	(x,	1,	0X7001B100);
	op_plain_offset	(x,	129,	0X7001B100);
	create_insn	(x=0X1063B2);
	op_stkvar	(x,	1);
	create_insn	(x=0X1063BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X1063E6);
	op_plain_offset	(x,	1,	0X7001B000);
	op_plain_offset	(x,	129,	0X7001B000);
	create_insn	(x=0X1063E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X1063F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X106402);
	op_plain_offset	(x,	1,	0X700190C0);
	op_plain_offset	(x,	129,	0X700190C0);
	create_insn	(x=0X106404);
	op_stkvar	(x,	1);
	create_insn	(x=0X106418);
	op_plain_offset	(x,	1,	0X7000E840);
	op_plain_offset	(x,	129,	0X7000E840);
	create_insn	(x=0X10641A);
	op_stkvar	(x,	1);
	set_cmt	(0X10641C,	"result",	0);
	create_insn	(x=0X106434);
	op_plain_offset	(x,	1,	0X7001B280);
	op_plain_offset	(x,	129,	0X7001B280);
	create_insn	(x=0X10643C);
	op_plain_offset	(x,	1,	0X7001B300);
	op_plain_offset	(x,	129,	0X7001B300);
	create_insn	(x=0X10643E);
	op_stkvar	(x,	1);
	create_insn	(x=0X106456);
	op_plain_offset	(x,	1,	0X7001B2C0);
	op_plain_offset	(x,	129,	0X7001B2C0);
	create_insn	(0X10645A);
	create_insn	(x=0X106462);
	op_plain_offset	(x,	1,	0X7001B2C0);
	op_plain_offset	(x,	129,	0X7001B2C0);
	create_insn	(x=0X106466);
	op_plain_offset	(x,	1,	0X7001B2C0);
	op_plain_offset	(x,	129,	0X7001B2C0);
	create_insn	(0X10646A);
	create_insn	(x=0X10647C);
	op_plain_offset	(x,	1,	0X7001B2C0);
	op_plain_offset	(x,	129,	0X7001B2C0);
	create_insn	(x=0X106482);
	op_plain_offset	(x,	1,	0X7001B000);
	op_plain_offset	(x,	129,	0X7001B000);
	set_cmt	(0X106484,	"result",	0);
	create_insn	(x=0X10648E);
	op_plain_offset	(x,	1,	0X7000E8C0);
	op_plain_offset	(x,	129,	0X7000E8C0);
	create_insn	(x=0X106494);
	op_plain_offset	(x,	1,	0X7000E8C0);
	op_plain_offset	(x,	129,	0X7000E8C0);
	create_insn	(x=0X106496);
	op_stkvar	(x,	1);
	set_cmt	(0X106498,	"result",	0);
	create_insn	(x=0X10649E);
	op_stkvar	(x,	1);
	create_insn	(x=0X1064B8);
	op_plain_offset	(x,	1,	0X7001B000);
	op_plain_offset	(x,	129,	0X7001B000);
	create_insn	(x=0X1064BA);
	op_plain_offset	(x,	1,	0X7001B000);
	op_plain_offset	(x,	129,	0X7001B000);
	set_cmt	(0X1064BE,	"result",	0);
	create_insn	(x=0X1064D6);
	op_plain_offset	(x,	1,	0X7001B000);
	op_plain_offset	(x,	129,	0X7001B000);
	create_insn	(x=0X1064D8);
	op_plain_offset	(x,	1,	0X7001B000);
	op_plain_offset	(x,	129,	0X7001B000);
	set_cmt	(0X1064DE,	"result",	0);
	create_insn	(x=0X1064F8);
	op_plain_offset	(x,	1,	0X7001B000);
	op_plain_offset	(x,	129,	0X7001B000);
	create_insn	(x=0X1064FA);
	op_plain_offset	(x,	1,	0X7001B000);
	op_plain_offset	(x,	129,	0X7001B000);
	set_cmt	(0X1064FE,	"result",	0);
	create_insn	(x=0X106516);
	op_plain_offset	(x,	1,	0X7001B000);
	op_plain_offset	(x,	129,	0X7001B000);
	create_insn	(x=0X106518);
	op_plain_offset	(x,	1,	0X7001B000);
	op_plain_offset	(x,	129,	0X7001B000);
	set_cmt	(0X106520,	"result",	0);
	create_insn	(x=0X10653A);
	op_plain_offset	(x,	1,	0X7001B000);
	op_plain_offset	(x,	129,	0X7001B000);
	create_insn	(x=0X10653C);
	op_plain_offset	(x,	1,	0X7001B000);
	op_plain_offset	(x,	129,	0X7001B000);
	set_cmt	(0X10653E,	"result",	0);
	create_insn	(x=0X106544);
	op_stkvar	(x,	1);
	create_insn	(x=0X106556);
	op_plain_offset	(x,	1,	0X7001B0C0);
	op_plain_offset	(x,	129,	0X7001B0C0);
	create_insn	(x=0X10655E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10656A);
	op_plain_offset	(x,	1,	0X7001B0C0);
	op_plain_offset	(x,	129,	0X7001B0C0);
	create_insn	(x=0X10656C);
	op_stkvar	(x,	1);
	set_cmt	(0X10657A,	"result",	0);
	create_insn	(x=0X106596);
	op_stkvar	(x,	1);
	create_insn	(x=0X10659C);
	op_plain_offset	(x,	1,	0X7000E5C0);
	op_plain_offset	(x,	129,	0X7000E5C0);
	create_insn	(x=0X1065B0);
	op_plain_offset	(x,	1,	0X7001B2C0);
	op_plain_offset	(x,	129,	0X7001B2C0);
	create_insn	(x=0X1065B4);
	op_plain_offset	(x,	1,	0X7001B2C0);
	op_plain_offset	(x,	129,	0X7001B2C0);
	create_insn	(x=0X1065B8);
	op_plain_offset	(x,	1,	0X7001B2C0);
	op_plain_offset	(x,	129,	0X7001B2C0);
	create_insn	(x=0X1065C8);
	op_plain_offset	(x,	1,	0X7001B000);
	op_plain_offset	(x,	129,	0X7001B000);
	create_insn	(x=0X1065CA);
	op_stkvar	(x,	1);
	create_insn	(x=0X1065DA);
	op_stkvar	(x,	1);
	create_insn	(x=0X1065EA);
	op_plain_offset	(x,	1,	0X7001B0C0);
	op_plain_offset	(x,	129,	0X7001B0C0);
	create_insn	(x=0X1065EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X1065FA);
	op_plain_offset	(x,	1,	0X7001B000);
	op_plain_offset	(x,	129,	0X7001B000);
	create_insn	(x=0X1065FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X106604);
	op_plain_offset	(x,	1,	0X7001B3C0);
	op_plain_offset	(x,	129,	0X7001B3C0);
	create_insn	(x=0X106606);
	op_stkvar	(x,	1);
	create_insn	(x=0X10660E);
	op_plain_offset	(x,	1,	0X7001B5C0);
	op_plain_offset	(x,	129,	0X7001B5C0);
	create_insn	(x=0X106610);
	op_stkvar	(x,	1);
	create_insn	(x=0X106616);
	op_plain_offset	(x,	1,	0X7001B000);
	op_plain_offset	(x,	129,	0X7001B000);
	create_insn	(x=0X106618);
	op_stkvar	(x,	1);
	create_insn	(x=0X106620);
	op_plain_offset	(x,	1,	0X7001B300);
	op_plain_offset	(x,	129,	0X7001B300);
	create_insn	(x=0X106622);
	op_stkvar	(x,	1);
	create_insn	(x=0X10662A);
	op_plain_offset	(x,	1,	0X7001B300);
	op_plain_offset	(x,	129,	0X7001B300);
	create_insn	(x=0X10662C);
	op_stkvar	(x,	1);
	create_insn	(x=0X106632);
	op_stkvar	(x,	1);
	create_insn	(x=0X106636);
	op_plain_offset	(x,	1,	0X7001B3C0);
	op_plain_offset	(x,	129,	0X7001B3C0);
	create_insn	(x=0X106644);
	op_plain_offset	(x,	1,	0X7001B000);
	op_plain_offset	(x,	129,	0X7001B000);
	create_insn	(x=0X106646);
	op_stkvar	(x,	1);
	create_insn	(x=0X10664C);
	op_plain_offset	(x,	1,	0X7001B540);
	op_plain_offset	(x,	129,	0X7001B540);
	create_insn	(x=0X10664E);
	op_stkvar	(x,	1);
	create_insn	(x=0X106658);
	op_plain_offset	(x,	1,	0X7001B4C0);
	op_plain_offset	(x,	129,	0X7001B4C0);
	create_insn	(x=0X10665A);
	op_plain_offset	(x,	1,	0X6000C0C0);
	op_plain_offset	(x,	129,	0X6000C0C0);
	create_insn	(x=0X106662);
	op_stkvar	(x,	1);
	create_insn	(0X106670);
	create_insn	(0X106672);
	create_insn	(0X106674);
	create_dword	(x=0X106678);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X10667C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X106680);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X106684);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X106688);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X10668C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X106690);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X106694);
	create_dword	(x=0X106698);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X10669C);
	create_dword	(x=0X1066A0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1066A4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X1066A8);
	op_plain_offset	(x,	1,	0X6000C0C0);
	op_plain_offset	(x,	129,	0X6000C0C0);
	create_insn	(x=0X1066AA);
	op_stkvar	(x,	1);
	create_insn	(x=0X1066B0);
	op_plain_offset	(x,	1,	0X70019640);
	op_plain_offset	(x,	129,	0X70019640);
	create_insn	(x=0X1066B2);
	op_stkvar	(x,	1);
	create_insn	(x=0X1066B6);
	op_plain_offset	(x,	1,	0X70019640);
	op_plain_offset	(x,	129,	0X70019640);
	create_insn	(x=0X1066B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X1066BE);
	op_plain_offset	(x,	1,	0X70019980);
	op_plain_offset	(x,	129,	0X70019980);
	create_insn	(x=0X1066C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X1066C6);
	op_plain_offset	(x,	1,	0X70019C00);
	op_plain_offset	(x,	129,	0X70019C00);
	create_insn	(x=0X1066C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X1066CC);
	op_plain_offset	(x,	1,	0X70019C00);
	op_plain_offset	(x,	129,	0X70019C00);
	create_insn	(x=0X1066CE);
	op_stkvar	(x,	1);
	create_insn	(x=0X1066D2);
	op_plain_offset	(x,	1,	0X70019C00);
	op_plain_offset	(x,	129,	0X70019C00);
	create_insn	(x=0X1066D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X1066DC);
	op_plain_offset	(x,	1,	0X70019C00);
	op_plain_offset	(x,	129,	0X70019C00);
	create_insn	(x=0X1066E2);
	op_plain_offset	(x,	1,	0X70019C00);
	op_plain_offset	(x,	129,	0X70019C00);
	create_insn	(x=0X1066E6);
	op_plain_offset	(x,	1,	0X70019C00);
	op_plain_offset	(x,	129,	0X70019C00);
	create_insn	(x=0X1066EA);
	op_plain_offset	(x,	1,	0X70019C00);
	op_plain_offset	(x,	129,	0X70019C00);
	create_insn	(x=0X1066EE);
	op_plain_offset	(x,	1,	0X70019C00);
	op_plain_offset	(x,	129,	0X70019C00);
	create_insn	(x=0X1066F2);
	op_plain_offset	(x,	1,	0X70019C00);
	op_plain_offset	(x,	129,	0X70019C00);
	create_insn	(x=0X1066F6);
	op_plain_offset	(x,	1,	0X70019C00);
	op_plain_offset	(x,	129,	0X70019C00);
	create_insn	(x=0X1066FA);
	op_plain_offset	(x,	1,	0X70019C00);
	op_plain_offset	(x,	129,	0X70019C00);
	create_insn	(x=0X1066FE);
	op_plain_offset	(x,	1,	0X70019C00);
	op_plain_offset	(x,	129,	0X70019C00);
	create_insn	(x=0X106702);
	op_plain_offset	(x,	1,	0X70019C00);
	op_plain_offset	(x,	129,	0X70019C00);
	create_insn	(x=0X106706);
	op_plain_offset	(x,	1,	0X70019C00);
	op_plain_offset	(x,	129,	0X70019C00);
	create_insn	(x=0X10670E);
	op_plain_offset	(x,	1,	0X70019C40);
	op_plain_offset	(x,	129,	0X70019C40);
	create_insn	(x=0X106712);
	op_plain_offset	(x,	1,	0X70019C40);
	op_plain_offset	(x,	129,	0X70019C40);
	create_insn	(x=0X106716);
	op_plain_offset	(x,	1,	0X70019C40);
	op_plain_offset	(x,	129,	0X70019C40);
	create_insn	(x=0X10671A);
	op_plain_offset	(x,	1,	0X70019C40);
	op_plain_offset	(x,	129,	0X70019C40);
	create_insn	(x=0X10671E);
	op_plain_offset	(x,	1,	0X70019C40);
	op_plain_offset	(x,	129,	0X70019C40);
	create_insn	(x=0X106726);
	op_plain_offset	(x,	1,	0X70019C40);
	op_plain_offset	(x,	129,	0X70019C40);
	create_insn	(x=0X10672C);
	op_plain_offset	(x,	1,	0X70019C40);
	op_plain_offset	(x,	129,	0X70019C40);
	create_insn	(x=0X106730);
	op_plain_offset	(x,	1,	0X70019C40);
	op_plain_offset	(x,	129,	0X70019C40);
	create_insn	(x=0X106734);
	op_plain_offset	(x,	1,	0X70019C40);
	op_plain_offset	(x,	129,	0X70019C40);
	create_insn	(x=0X106740);
	op_plain_offset	(x,	1,	0X70019C80);
	op_plain_offset	(x,	129,	0X70019C80);
	create_insn	(x=0X106744);
	op_plain_offset	(x,	1,	0X70019C80);
	op_plain_offset	(x,	129,	0X70019C80);
	create_insn	(x=0X106748);
	op_plain_offset	(x,	1,	0X70019C80);
	op_plain_offset	(x,	129,	0X70019C80);
	create_insn	(x=0X10674C);
	op_plain_offset	(x,	1,	0X70019C40);
	op_plain_offset	(x,	129,	0X70019C40);
	create_insn	(x=0X106750);
	op_plain_offset	(x,	1,	0X70019C80);
	op_plain_offset	(x,	129,	0X70019C80);
	create_insn	(x=0X106754);
	op_plain_offset	(x,	1,	0X70019C80);
	op_plain_offset	(x,	129,	0X70019C80);
	create_insn	(x=0X106758);
	op_plain_offset	(x,	1,	0X70019C80);
	op_plain_offset	(x,	129,	0X70019C80);
	create_insn	(x=0X10675C);
	op_plain_offset	(x,	1,	0X70019C80);
	op_plain_offset	(x,	129,	0X70019C80);
	create_insn	(x=0X106760);
	op_plain_offset	(x,	1,	0X70019C80);
	op_plain_offset	(x,	129,	0X70019C80);
	create_insn	(x=0X10676C);
	op_plain_offset	(x,	1,	0X70019CC0);
	op_plain_offset	(x,	129,	0X70019CC0);
	create_insn	(x=0X106774);
	op_plain_offset	(x,	1,	0X70019CC0);
	op_plain_offset	(x,	129,	0X70019CC0);
	create_insn	(x=0X10677A);
	op_plain_offset	(x,	1,	0X70019CC0);
	op_plain_offset	(x,	129,	0X70019CC0);
	create_insn	(x=0X10677E);
	op_plain_offset	(x,	1,	0X70019CC0);
	op_plain_offset	(x,	129,	0X70019CC0);
	create_insn	(x=0X106782);
	op_plain_offset	(x,	1,	0X70019CC0);
	op_plain_offset	(x,	129,	0X70019CC0);
	create_insn	(x=0X106786);
	op_plain_offset	(x,	1,	0X70019CC0);
	op_plain_offset	(x,	129,	0X70019CC0);
	create_insn	(x=0X10678A);
	op_plain_offset	(x,	1,	0X70019CC0);
	op_plain_offset	(x,	129,	0X70019CC0);
	create_insn	(x=0X10678E);
	op_plain_offset	(x,	1,	0X70019C80);
	op_plain_offset	(x,	129,	0X70019C80);
	create_insn	(x=0X106792);
	op_plain_offset	(x,	1,	0X70019CC0);
	op_plain_offset	(x,	129,	0X70019CC0);
	create_insn	(x=0X10679C);
	op_plain_offset	(x,	1,	0X70019D00);
	op_plain_offset	(x,	129,	0X70019D00);
	create_insn	(x=0X1067A0);
	op_plain_offset	(x,	1,	0X70019D00);
	op_plain_offset	(x,	129,	0X70019D00);
	create_insn	(x=0X1067A4);
	op_plain_offset	(x,	1,	0X70019D00);
	op_plain_offset	(x,	129,	0X70019D00);
	create_insn	(x=0X1067A8);
	op_plain_offset	(x,	1,	0X70019D00);
	op_plain_offset	(x,	129,	0X70019D00);
	create_insn	(x=0X1067AC);
	op_plain_offset	(x,	1,	0X70019D00);
	op_plain_offset	(x,	129,	0X70019D00);
	create_insn	(x=0X1067B0);
	op_plain_offset	(x,	1,	0X70019D00);
	op_plain_offset	(x,	129,	0X70019D00);
	create_insn	(x=0X1067B4);
	op_plain_offset	(x,	1,	0X70019D00);
	op_plain_offset	(x,	129,	0X70019D00);
	create_insn	(x=0X1067BA);
	op_plain_offset	(x,	1,	0X70019D00);
	op_plain_offset	(x,	129,	0X70019D00);
	create_insn	(x=0X1067C0);
	op_plain_offset	(x,	1,	0X70019D00);
	op_plain_offset	(x,	129,	0X70019D00);
	create_insn	(x=0X1067C4);
	op_plain_offset	(x,	1,	0X70019D00);
	op_plain_offset	(x,	129,	0X70019D00);
	create_insn	(x=0X1067C8);
	op_plain_offset	(x,	1,	0X70019D00);
	op_plain_offset	(x,	129,	0X70019D00);
	create_insn	(x=0X1067CC);
	op_plain_offset	(x,	1,	0X70019CC0);
	op_plain_offset	(x,	129,	0X70019CC0);
	create_insn	(x=0X1067D4);
	op_plain_offset	(x,	1,	0X70019D40);
	op_plain_offset	(x,	129,	0X70019D40);
	create_insn	(x=0X1067D8);
	op_plain_offset	(x,	1,	0X70019D40);
	op_plain_offset	(x,	129,	0X70019D40);
	create_insn	(x=0X1067DC);
	op_plain_offset	(x,	1,	0X70019D40);
	op_plain_offset	(x,	129,	0X70019D40);
	create_insn	(x=0X1067E0);
	op_plain_offset	(x,	1,	0X70019D40);
	op_plain_offset	(x,	129,	0X70019D40);
	create_insn	(x=0X1067E4);
	op_plain_offset	(x,	1,	0X70019D40);
	op_plain_offset	(x,	129,	0X70019D40);
	create_insn	(x=0X1067E8);
	op_plain_offset	(x,	1,	0X70019D40);
	op_plain_offset	(x,	129,	0X70019D40);
	create_insn	(x=0X1067EC);
	op_plain_offset	(x,	1,	0X70019D40);
	op_plain_offset	(x,	129,	0X70019D40);
	create_insn	(x=0X1067F0);
	op_plain_offset	(x,	1,	0X70019D40);
	op_plain_offset	(x,	129,	0X70019D40);
	create_insn	(x=0X1067F4);
	op_plain_offset	(x,	1,	0X70019D40);
	op_plain_offset	(x,	129,	0X70019D40);
	create_insn	(x=0X1067F8);
	op_plain_offset	(x,	1,	0X70019D40);
	op_plain_offset	(x,	129,	0X70019D40);
	create_insn	(x=0X1067FC);
	op_plain_offset	(x,	1,	0X70019D40);
	op_plain_offset	(x,	129,	0X70019D40);
	create_insn	(x=0X106800);
	op_plain_offset	(x,	1,	0X70019D40);
	op_plain_offset	(x,	129,	0X70019D40);
	create_insn	(x=0X106802);
	op_stkvar	(x,	1);
	create_insn	(x=0X106806);
	op_plain_offset	(x,	1,	0X70019D40);
	op_plain_offset	(x,	129,	0X70019D40);
	create_insn	(x=0X106808);
	op_stkvar	(x,	1);
	create_insn	(x=0X10680C);
	op_plain_offset	(x,	1,	0X70019D40);
	op_plain_offset	(x,	129,	0X70019D40);
	create_insn	(x=0X10680E);
	op_plain_offset	(x,	1,	0X70019640);
	op_plain_offset	(x,	129,	0X70019640);
	set_cmt	(0X106818,	"result",	0);
	create_insn	(0X106818);
	create_insn	(x=0X106834);
	op_plain_offset	(x,	1,	0X7001B100);
	op_plain_offset	(x,	129,	0X7001B100);
	create_insn	(x=0X10683C);
	op_plain_offset	(x,	1,	0X7001B0C0);
	op_plain_offset	(x,	129,	0X7001B0C0);
	create_insn	(x=0X106840);
	op_plain_offset	(x,	1,	0X7001B100);
	op_plain_offset	(x,	129,	0X7001B100);
	create_insn	(x=0X106844);
	op_plain_offset	(x,	1,	0X7001B100);
	op_plain_offset	(x,	129,	0X7001B100);
	create_insn	(x=0X10684E);
	op_plain_offset	(x,	1,	0X7001B0C0);
	op_plain_offset	(x,	129,	0X7001B0C0);
	create_insn	(0X106852);
	create_insn	(x=0X106856);
	op_stkvar	(x,	1);
	create_insn	(x=0X10685C);
	op_plain_offset	(x,	1,	0X7001B100);
	op_plain_offset	(x,	129,	0X7001B100);
	create_insn	(x=0X10685E);
	op_stkvar	(x,	1);
	create_insn	(x=0X106862);
	op_plain_offset	(x,	1,	0X7001B100);
	op_plain_offset	(x,	129,	0X7001B100);
	create_insn	(x=0X106864);
	op_stkvar	(x,	1);
	create_insn	(x=0X10686C);
	op_plain_offset	(x,	1,	0X7001B0C0);
	op_plain_offset	(x,	129,	0X7001B0C0);
	create_insn	(x=0X10686E);
	op_stkvar	(x,	1);
	create_insn	(x=0X106872);
	op_plain_offset	(x,	1,	0X7001B0C0);
	op_plain_offset	(x,	129,	0X7001B0C0);
	create_insn	(x=0X10687A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10687E);
	op_plain_offset	(x,	1,	0X7001B0C0);
	op_plain_offset	(x,	129,	0X7001B0C0);
	create_insn	(0X106882);
	create_insn	(x=0X106890);
	op_plain_offset	(x,	1,	0X7001B100);
	op_plain_offset	(x,	129,	0X7001B100);
	create_insn	(x=0X106898);
	op_plain_offset	(x,	1,	0X7001B0C0);
	op_plain_offset	(x,	129,	0X7001B0C0);
	create_insn	(x=0X10689C);
	op_plain_offset	(x,	1,	0X7001B100);
	op_plain_offset	(x,	129,	0X7001B100);
	create_insn	(x=0X1068A0);
	op_plain_offset	(x,	1,	0X7001B100);
	op_plain_offset	(x,	129,	0X7001B100);
	create_insn	(x=0X1068A6);
	op_plain_offset	(x,	1,	0X7001B480);
	op_plain_offset	(x,	129,	0X7001B480);
	create_insn	(x=0X1068AE);
	op_plain_offset	(x,	1,	0X7001B4C0);
	op_plain_offset	(x,	129,	0X7001B4C0);
	create_insn	(x=0X1068B2);
	op_plain_offset	(x,	1,	0X7001B0C0);
	op_plain_offset	(x,	129,	0X7001B0C0);
	create_insn	(x=0X1068B6);
	op_plain_offset	(x,	1,	0X7001B480);
	op_plain_offset	(x,	129,	0X7001B480);
	create_insn	(x=0X1068BA);
	op_plain_offset	(x,	1,	0X7001B480);
	op_plain_offset	(x,	129,	0X7001B480);
	create_insn	(x=0X1068BE);
	op_plain_offset	(x,	1,	0X7001B480);
	op_plain_offset	(x,	129,	0X7001B480);
	create_insn	(0X1068CE);
	create_insn	(x=0X1068E4);
	op_plain_offset	(x,	1,	0X7001B0C0);
	op_plain_offset	(x,	129,	0X7001B0C0);
	set_cmt	(0X1068E6,	"result",	0);
	create_insn	(x=0X1068EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X106900);
	op_plain_offset	(x,	1,	0X7001B0C0);
	op_plain_offset	(x,	129,	0X7001B0C0);
	create_insn	(0X106904);
	create_insn	(x=0X106916);
	op_plain_offset	(x,	1,	0X7001B2C0);
	op_plain_offset	(x,	129,	0X7001B2C0);
	set_cmt	(0X106918,	"result",	0);
	create_insn	(x=0X10691E);
	op_stkvar	(x,	1);
	create_insn	(x=0X106932);
	op_plain_offset	(x,	1,	0X7001B2C0);
	op_plain_offset	(x,	129,	0X7001B2C0);
	set_cmt	(0X106934,	"result",	0);
	create_insn	(0X10693C);
	create_insn	(0X106942);
	create_insn	(x=0X106950);
	op_plain_offset	(x,	1,	0X7001B2C0);
	op_plain_offset	(x,	129,	0X7001B2C0);
	set_cmt	(0X106952,	"result",	0);
	create_insn	(x=0X10695C);
	op_plain_offset	(x,	1,	0X7001B2C0);
	op_plain_offset	(x,	129,	0X7001B2C0);
	create_insn	(x=0X10695E);
	op_stkvar	(x,	1);
	create_insn	(x=0X106972);
	op_plain_offset	(x,	1,	0X7001B2C0);
	op_plain_offset	(x,	129,	0X7001B2C0);
	set_cmt	(0X106974,	"result",	0);
	create_insn	(x=0X10697E);
	op_plain_offset	(x,	1,	0X7001B2C0);
	op_plain_offset	(x,	129,	0X7001B2C0);
	create_insn	(0X106982);
	create_insn	(0X10698C);
	create_insn	(0X106996);
	create_insn	(x=0X1069A4);
	op_plain_offset	(x,	1,	0X7000E5C0);
	op_plain_offset	(x,	129,	0X7000E5C0);
	set_cmt	(0X1069A6,	"result",	0);
	create_insn	(x=0X1069AE);
	op_plain_offset	(x,	1,	0X7000E4C0);
	op_plain_offset	(x,	129,	0X7000E4C0);
	create_insn	(x=0X1069BC);
	op_plain_offset	(x,	1,	0X7000E4C0);
	op_plain_offset	(x,	129,	0X7000E4C0);
	create_insn	(x=0X1069C2);
	op_plain_offset	(x,	1,	0X7000E440);
	op_plain_offset	(x,	129,	0X7000E440);
	create_insn	(x=0X1069CC);
	op_plain_offset	(x,	1,	0X7000E440);
	op_plain_offset	(x,	129,	0X7000E440);
	create_insn	(x=0X1069D2);
	op_plain_offset	(x,	1,	0X7000E6C0);
	op_plain_offset	(x,	129,	0X7000E6C0);
	create_insn	(x=0X1069D8);
	op_plain_offset	(x,	1,	0X7000E8C0);
	op_plain_offset	(x,	129,	0X7000E8C0);
	create_insn	(0X1069F2);
	create_insn	(0X106A00);
	create_insn	(0X106A12);
	create_insn	(x=0X106A16);
	op_plain_offset	(x,	1,	0X70019040);
	op_plain_offset	(x,	129,	0X70019040);
	create_insn	(0X106A1E);
	create_insn	(x=0X106A2A);
	op_stkvar	(x,	1);
	create_insn	(x=0X106A2E);
	op_stkvar	(x,	1);
	set_cmt	(0X106A48,	"result",	0);
	set_cmt	(0X106A5E,	"result",	0);
	create_insn	(x=0X106A64);
	op_stkvar	(x,	1);
	set_cmt	(0X106A70,	"result",	0);
	create_insn	(x=0X106A76);
	op_stkvar	(x,	1);
	create_dword	(x=0X106AA8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X106AAC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X106AB0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X106AB4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X106AB8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X106ABC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X106AC0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X106AC4);
	create_dword	(x=0X106AC8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X106ACC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X106AD0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X106AD4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X106AD8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X106ADC);
	create_dword	(x=0X106AE0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X106AE4);
	set_cmt	(0X106B3C,	"result",	0);
	set_cmt	(0X106B4E,	"result",	0);
	create_insn	(0X106B5C);
	set_name	(0X106B5C,	"mem_get_dram_size");
	create_insn	(0X106B78);
	create_insn	(0X106B7C);
	set_name	(0X106B7C,	"usbd_req::reset_device_controller");
	create_insn	(x=0X106B7E);
	op_stkvar	(x,	1);
	create_insn	(x=0X106B80);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X106BAA,	"us",	0);
	create_insn	(x=0X106BB6);
	op_stkvar	(x,	1);
	set_cmt	(0X106C1C,	"us",	0);
	set_cmt	(0X106C40,	"us",	0);
	set_cmt	(0X106C78,	"us",	0);
	create_insn	(0X106C78);
	create_insn	(0X106CD0);
	set_name	(0X106CD0,	"usb_device_init");
	create_insn	(x=0X106CDA);
	op_stkvar	(x,	1);
	create_insn	(x=0X106CE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X106CE6);
	op_stkvar	(x,	1);
	create_insn	(x=0X106CE8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X106CEE);
	op_stkvar	(x,	1);
	create_insn	(x=0X106CF0);
	op_stkvar	(x,	1);
	set_cmt	(0X106CFE,	"enable",	0);
	set_cmt	(0X106D00,	"reg_offset_and_bit",	0);
	set_cmt	(0X106D06,	"rst_state",	0);
	set_cmt	(0X106D08,	"reg_offset_and_bit",	0);
	set_cmt	(0X106D0E,	"rst_state",	0);
	set_cmt	(0X106D10,	"reg_offset_and_bit",	0);
	set_cmt	(0X106D16,	"rst_state",	0);
	set_cmt	(0X106D18,	"reg_offset_and_bit",	0);
	create_insn	(x=0X106D32);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X106D34);
	op_plain_offset	(x,	1,	0X60006500);
	op_plain_offset	(x,	129,	0X60006500);
	create_insn	(x=0X106D3A);
	op_plain_offset	(x,	1,	0X60006500);
	op_plain_offset	(x,	129,	0X60006500);
	set_cmt	(0X106D3C,	"us",	0);
	create_insn	(x=0X106D44);
	op_plain_offset	(x,	1,	0X7D000800);
	op_plain_offset	(x,	129,	0X7D000800);
	create_insn	(x=0X106D4A);
	op_plain_offset	(x,	1,	0X7D000800);
	op_plain_offset	(x,	129,	0X7D000800);
	create_insn	(x=0X106D4C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X106D50);
	op_plain_offset	(x,	1,	0X60006480);
	op_plain_offset	(x,	129,	0X60006480);
	create_insn	(x=0X106D54);
	op_plain_offset	(x,	1,	0X60006480);
	op_plain_offset	(x,	129,	0X60006480);
	create_insn	(x=0X106D58);
	op_stkvar	(x,	1);
	create_insn	(x=0X106D5A);
	op_plain_offset	(x,	1,	0X7D000400);
	op_plain_offset	(x,	129,	0X7D000400);
	create_insn	(x=0X106D60);
	op_plain_offset	(x,	1,	0X7D000400);
	op_plain_offset	(x,	129,	0X7D000400);
	create_insn	(x=0X106D62);
	op_plain_offset	(x,	1,	0X7D000400);
	op_plain_offset	(x,	129,	0X7D000400);
	create_insn	(x=0X106D68);
	op_plain_offset	(x,	1,	0X7D000400);
	op_plain_offset	(x,	129,	0X7D000400);
	create_insn	(x=0X106D76);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X106D9E);
	create_insn	(x=0X106DA0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X106DC2);
	op_plain_offset	(x,	1,	0X60006480);
	op_plain_offset	(x,	129,	0X60006480);
	create_insn	(x=0X106DC6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X106DDC);
	create_insn	(x=0X106DE2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X106DF2);
	op_plain_offset	(x,	1,	0X60006480);
	op_plain_offset	(x,	129,	0X60006480);
	create_insn	(x=0X106DF4);
	op_plain_offset	(x,	1,	0X60006480);
	op_plain_offset	(x,	129,	0X60006480);
	create_insn	(x=0X106DFC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X106E0E);
	create_insn	(x=0X106E2A);
	op_plain_offset	(x,	1,	0X60006480);
	op_plain_offset	(x,	129,	0X60006480);
	set_cmt	(0X106E34,	"us",	0);
	create_insn	(x=0X106E3A);
	op_plain_offset	(x,	1,	0X60006480);
	op_plain_offset	(x,	129,	0X60006480);
	create_insn	(x=0X106E44);
	op_plain_offset	(x,	1,	0X60006480);
	op_plain_offset	(x,	129,	0X60006480);
	set_cmt	(0X106E46,	"us",	0);
	create_insn	(x=0X106E4E);
	op_plain_offset	(x,	1,	0X60006480);
	op_plain_offset	(x,	129,	0X60006480);
	create_insn	(x=0X106E56);
	op_plain_offset	(x,	1,	0X60006480);
	op_plain_offset	(x,	129,	0X60006480);
	set_cmt	(0X106E58,	"us",	0);
	create_insn	(x=0X106E5E);
	op_plain_offset	(x,	1,	0X60006480);
	op_plain_offset	(x,	129,	0X60006480);
	create_insn	(x=0X106E68);
	op_plain_offset	(x,	1,	0X60006480);
	op_plain_offset	(x,	129,	0X60006480);
	create_insn	(x=0X106E6C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X106E6E);
	op_plain_offset	(x,	1,	0X60006500);
	op_plain_offset	(x,	129,	0X60006500);
	set_cmt	(0X106E74,	"us",	0);
	create_insn	(x=0X106E7E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X106E80);
	op_plain_offset	(x,	1,	0X7000F9C0);
	op_plain_offset	(x,	129,	0X7000F9C0);
	create_insn	(x=0X106E88);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X106E8C);
	op_plain_offset	(x,	1,	0X7000FB40);
	op_plain_offset	(x,	129,	0X7000FB40);
	create_insn	(x=0X106E9A);
	op_plain_offset	(x,	1,	0X7D000800);
	op_plain_offset	(x,	129,	0X7D000800);
	create_insn	(x=0X106EB4);
	op_plain_offset	(x,	1,	0X7D000800);
	op_plain_offset	(x,	129,	0X7D000800);
	create_insn	(x=0X106EB6);
	op_plain_offset	(x,	1,	0X7D000800);
	op_plain_offset	(x,	129,	0X7D000800);
	create_insn	(x=0X106EC4);
	op_plain_offset	(x,	1,	0X7D000800);
	op_plain_offset	(x,	129,	0X7D000800);
	create_insn	(x=0X106ECC);
	op_plain_offset	(x,	1,	0X7D000840);
	op_plain_offset	(x,	129,	0X7D000840);
	create_insn	(x=0X106ED8);
	op_plain_offset	(x,	1,	0X7D000840);
	op_plain_offset	(x,	129,	0X7D000840);
	create_insn	(x=0X106EDA);
	op_plain_offset	(x,	1,	0X7D000800);
	op_plain_offset	(x,	129,	0X7D000800);
	create_insn	(x=0X106EE2);
	op_plain_offset	(x,	1,	0X7D000800);
	op_plain_offset	(x,	129,	0X7D000800);
	create_insn	(x=0X106EE4);
	op_plain_offset	(x,	1,	0X7D000840);
	op_plain_offset	(x,	129,	0X7D000840);
	create_insn	(x=0X106EF2);
	op_plain_offset	(x,	1,	0X7D000840);
	op_plain_offset	(x,	129,	0X7D000840);
	set_cmt	(0X106EF4,	"us",	0);
	create_insn	(x=0X106EFA);
	op_plain_offset	(x,	1,	0X7D000800);
	op_plain_offset	(x,	129,	0X7D000800);
	create_insn	(x=0X106EFC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X106F0E);
	op_plain_offset	(x,	1,	0X7D000800);
	op_plain_offset	(x,	129,	0X7D000800);
	create_insn	(x=0X106F18);
	op_plain_offset	(x,	1,	0X7D000800);
	op_plain_offset	(x,	129,	0X7D000800);
	create_insn	(x=0X106F24);
	op_plain_offset	(x,	1,	0X7D000800);
	op_plain_offset	(x,	129,	0X7D000800);
	create_insn	(x=0X106F26);
	op_plain_offset	(x,	1,	0X7D000800);
	op_plain_offset	(x,	129,	0X7D000800);
	create_insn	(x=0X106F2E);
	op_plain_offset	(x,	1,	0X7D000800);
	op_plain_offset	(x,	129,	0X7D000800);
	create_insn	(x=0X106F30);
	op_plain_offset	(x,	1,	0X7D000800);
	op_plain_offset	(x,	129,	0X7D000800);
	create_insn	(x=0X106F38);
	op_plain_offset	(x,	1,	0X7D000800);
	op_plain_offset	(x,	129,	0X7D000800);
	create_insn	(x=0X106F3A);
	op_plain_offset	(x,	1,	0X7D000800);
	op_plain_offset	(x,	129,	0X7D000800);
	create_insn	(x=0X106F54);
	op_plain_offset	(x,	1,	0X7D000800);
	op_plain_offset	(x,	129,	0X7D000800);
	create_insn	(x=0X106F56);
	op_plain_offset	(x,	1,	0X7D000800);
	op_plain_offset	(x,	129,	0X7D000800);
	create_insn	(x=0X106F5E);
	op_plain_offset	(x,	1,	0X7D000800);
	op_plain_offset	(x,	129,	0X7D000800);
	create_insn	(x=0X106F62);
	op_stkvar	(x,	1);
	create_insn	(x=0X106F64);
	op_plain_offset	(x,	1,	0X7D000800);
	op_plain_offset	(x,	129,	0X7D000800);
	create_insn	(x=0X106F6C);
	op_plain_offset	(x,	1,	0X7D000800);
	op_plain_offset	(x,	129,	0X7D000800);
	create_insn	(x=0X106F6E);
	op_plain_offset	(x,	1,	0X60006480);
	op_plain_offset	(x,	129,	0X60006480);
	create_insn	(x=0X106F72);
	op_plain_offset	(x,	1,	0X60006480);
	op_plain_offset	(x,	129,	0X60006480);
	create_insn	(x=0X106F74);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X106F76);
	op_plain_offset	(x,	1,	0X60006280);
	op_plain_offset	(x,	129,	0X60006280);
	create_dword	(0X106F7C);
	create_dword	(x=0X106F80);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X106F84);
	create_dword	(x=0X106F88);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X106F8C);
	create_dword	(x=0X106F90);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X106F94);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X106F98);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X106F9C);
	create_dword	(0X106FA0);
	create_dword	(x=0X106FA4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X106FA8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X106FAC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X106FB0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X106FB4);
	create_insn	(x=0X106FB6);
	op_plain_offset	(x,	1,	0X60006280);
	op_plain_offset	(x,	129,	0X60006280);
	create_insn	(x=0X106FB8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X106FBA);
	op_plain_offset	(x,	1,	0X600066C0);
	op_plain_offset	(x,	129,	0X600066C0);
	create_insn	(x=0X106FBC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X106FCA);
	op_plain_offset	(x,	1,	0X600066C0);
	op_plain_offset	(x,	129,	0X600066C0);
	create_insn	(x=0X106FCC);
	op_plain_offset	(x,	1,	0X7D000800);
	op_plain_offset	(x,	129,	0X7D000800);
	create_insn	(x=0X106FE0);
	op_plain_offset	(x,	1,	0X7D000800);
	op_plain_offset	(x,	129,	0X7D000800);
	create_insn	(x=0X106FE2);
	op_plain_offset	(x,	1,	0X7D000800);
	op_plain_offset	(x,	129,	0X7D000800);
	create_insn	(x=0X106FE6);
	op_plain_offset	(x,	1,	0X7D000800);
	op_plain_offset	(x,	129,	0X7D000800);
	set_cmt	(0X106FE8,	"us",	0);
	create_insn	(x=0X106FEE);
	op_plain_offset	(x,	1,	0X7D000800);
	op_plain_offset	(x,	129,	0X7D000800);
	create_insn	(x=0X106FF8);
	op_plain_offset	(x,	1,	0X7D000800);
	op_plain_offset	(x,	129,	0X7D000800);
	set_cmt	(0X106FFA,	"us",	0);
	create_insn	(x=0X107000);
	op_plain_offset	(x,	1,	0X7D000800);
	op_plain_offset	(x,	129,	0X7D000800);
	create_insn	(x=0X10700A);
	op_plain_offset	(x,	1,	0X7D000800);
	op_plain_offset	(x,	129,	0X7D000800);
	set_cmt	(0X10700C,	"us",	0);
	create_insn	(x=0X107012);
	op_plain_offset	(x,	1,	0X7D000800);
	op_plain_offset	(x,	129,	0X7D000800);
	create_insn	(x=0X107018);
	op_plain_offset	(x,	1,	0X7D000800);
	op_plain_offset	(x,	129,	0X7D000800);
	set_cmt	(0X10701A,	"us",	0);
	create_insn	(x=0X107020);
	op_plain_offset	(x,	1,	0X7D000800);
	op_plain_offset	(x,	129,	0X7D000800);
	create_insn	(x=0X107028);
	op_plain_offset	(x,	1,	0X7D000800);
	op_plain_offset	(x,	129,	0X7D000800);
	create_insn	(x=0X10702A);
	op_plain_offset	(x,	1,	0X60006280);
	op_plain_offset	(x,	129,	0X60006280);
	create_insn	(x=0X107030);
	op_plain_offset	(x,	1,	0X60006280);
	op_plain_offset	(x,	129,	0X60006280);
	create_insn	(x=0X107032);
	op_plain_offset	(x,	1,	0X60006480);
	op_plain_offset	(x,	129,	0X60006480);
	create_insn	(x=0X107050);
	op_plain_offset	(x,	1,	0X60006480);
	op_plain_offset	(x,	129,	0X60006480);
	set_cmt	(0X107052,	"us",	0);
	create_insn	(x=0X107058);
	op_plain_offset	(x,	1,	0X7D000800);
	op_plain_offset	(x,	129,	0X7D000800);
	create_insn	(x=0X107060);
	op_plain_offset	(x,	1,	0X7D000800);
	op_plain_offset	(x,	129,	0X7D000800);
	set_cmt	(0X107062,	"us",	0);
	create_insn	(x=0X107068);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X10706A);
	op_plain_offset	(x,	1,	0X7000E4C0);
	op_plain_offset	(x,	129,	0X7000E4C0);
	create_insn	(x=0X107072);
	op_plain_offset	(x,	1,	0X7000E4C0);
	op_plain_offset	(x,	129,	0X7000E4C0);
	set_cmt	(0X107074,	"us",	0);
	create_insn	(x=0X10707A);
	op_plain_offset	(x,	1,	0X7D000800);
	op_plain_offset	(x,	129,	0X7D000800);
	create_insn	(x=0X107080);
	op_plain_offset	(x,	1,	0X7D000800);
	op_plain_offset	(x,	129,	0X7D000800);
	set_cmt	(0X107082,	"us",	0);
	create_insn	(x=0X107088);
	op_plain_offset	(x,	1,	0X7D000800);
	op_plain_offset	(x,	129,	0X7D000800);
	create_insn	(x=0X10708E);
	op_plain_offset	(x,	1,	0X7D000800);
	op_plain_offset	(x,	129,	0X7D000800);
	set_cmt	(0X107090,	"us",	0);
	create_insn	(x=0X107096);
	op_plain_offset	(x,	1,	0X7D000800);
	op_plain_offset	(x,	129,	0X7D000800);
	create_insn	(x=0X10709C);
	op_plain_offset	(x,	1,	0X7D000800);
	op_plain_offset	(x,	129,	0X7D000800);
	set_cmt	(0X10709E,	"us",	0);
	create_insn	(x=0X1070A4);
	op_plain_offset	(x,	1,	0X7D000800);
	op_plain_offset	(x,	129,	0X7D000800);
	create_insn	(x=0X1070A8);
	op_plain_offset	(x,	1,	0X7D000800);
	op_plain_offset	(x,	129,	0X7D000800);
	set_cmt	(0X1070AA,	"us",	0);
	create_insn	(x=0X1070B0);
	op_plain_offset	(x,	1,	0X7D000800);
	op_plain_offset	(x,	129,	0X7D000800);
	create_insn	(x=0X1070B6);
	op_plain_offset	(x,	1,	0X7D000800);
	op_plain_offset	(x,	129,	0X7D000800);
	set_cmt	(0X1070B8,	"us",	0);
	create_insn	(x=0X1070BE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1070DE);
	create_insn	(x=0X1070E0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X107102);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X107102,	"usbd_req::usbd_req");
	create_insn	(x=0X107104);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X107108);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X10710C);
	op_plain_offset	(x,	1,	0X40003970);
	op_plain_offset	(x,	129,	0X40003970);
	create_insn	(x=0X107110);
	op_plain_offset	(x,	1,	0X40003970);
	op_plain_offset	(x,	129,	0X40003970);
	create_dword	(x=0X107114);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X107118);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X10711C);
	create_dword	(x=0X107120);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X107124);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X107128);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X10712C);
	set_name	(0X10712C,	"usbd::get_ep_status");
	create_insn	(x=0X107132);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X107146);
	create_insn	(0X10715E);
	create_insn	(0X107166);
	create_insn	(x=0X10716C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X107170);
	op_plain_offset	(x,	1,	0X40002B3C);
	op_plain_offset	(x,	129,	0X40002B3C);
	create_insn	(0X107184);
	create_insn	(0X1071A4);
	create_insn	(0X1071B4);
	create_insn	(0X1071B8);
	set_name	(0X1071B8,	"usbd::flush_endpoint");
	create_insn	(x=0X1071D0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1071F0,	"us",	0);
	set_cmt	(0X10720E,	"us",	0);
	set_cmt	(0X107234,	"us",	0);
	create_insn	(0X107234);
	create_insn	(0X107244);
	set_name	(0X107244,	"usbd::mark_ep_complete");
	set_cmt	(0X107248,	"ep",	0);
	create_insn	(x=0X10724E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X107252);
	op_plain_offset	(x,	1,	0X40002B3C);
	op_plain_offset	(x,	129,	0X40002B3C);
	set_cmt	(0X107254,	"len",	0);
	set_cmt	(0X107256,	"a1",	0);
	set_cmt	(0X107258,	"c",	0);
	create_insn	(x=0X10725E);
	op_plain_offset	(x,	1,	0X40002B3C);
	op_plain_offset	(x,	129,	0X40002B3C);
	set_cmt	(0X107266,	"len",	0);
	set_cmt	(0X107268,	"a1",	0);
	set_cmt	(0X10726A,	"c",	0);
	create_insn	(x=0X107270);
	op_plain_offset	(x,	1,	0X40002B3C);
	op_plain_offset	(x,	129,	0X40002B3C);
	create_insn	(x=0X10727E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1072A4);
	set_name	(0X1072A4,	"usbd::get_max_pkt_length");
	create_insn	(0X1072D0);
	set_name	(0X1072D0,	"usbd::ep_operation");
	set_cmt	(0X1072D4,	"req",	0);
	create_insn	(x=0X1072D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X1072DE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1072E2);
	op_plain_offset	(x,	1,	0X40002B3C);
	op_plain_offset	(x,	129,	0X40002B3C);
	set_cmt	(0X1072E4,	"len",	0);
	set_cmt	(0X1072EC,	"c",	0);
	set_cmt	(0X1072EE,	"a1",	0);
	set_cmt	(0X1072FE,	"req",	0);
	create_insn	(x=0X1072FE);
	op_stkvar	(x,	1);
	set_cmt	(0X107300,	"endpoint",	0);
	create_insn	(x=0X10731A);
	op_plain_offset	(x,	1,	0X40002B3C);
	op_plain_offset	(x,	129,	0X40002B3C);
	create_insn	(x=0X107326);
	op_stkvar	(x,	1);
	set_cmt	(0X10732E,	"len",	0);
	set_cmt	(0X107330,	"c",	0);
	set_cmt	(0X107332,	"a1",	0);
	create_insn	(x=0X10733C);
	op_stkvar	(x,	1);
	create_insn	(x=0X107344);
	op_stkvar	(x,	1);
	create_insn	(x=0X107352);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X107372);
	op_stkvar	(x,	1);
	set_cmt	(0X107378,	"a1",	0);
	create_insn	(x=0X107378);
	op_stkvar	(x,	1);
	set_cmt	(0X10737C,	"endpoint",	0);
	set_cmt	(0X10738A,	"us",	0);
	set_cmt	(0X107390,	"a1",	0);
	create_insn	(x=0X107390);
	op_stkvar	(x,	1);
	set_cmt	(0X107392,	"endpoint",	0);
	create_insn	(0X1073A6);
	set_cmt	(0X1073B0,	"req",	0);
	create_insn	(x=0X1073B0);
	op_stkvar	(x,	1);
	set_cmt	(0X1073B2,	"endpoint",	0);
	set_cmt	(0X1073BA,	"a1",	0);
	create_insn	(x=0X1073BA);
	op_stkvar	(x,	1);
	set_cmt	(0X1073BC,	"endpoint",	0);
	create_insn	(x=0X1073D2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X1073D2,	"usbd::reset_ep1");
	create_insn	(0X107400);
	create_insn	(0X10741E);
	set_name	(0X10741E,	"usb_get_device_descriptor");
	create_insn	(x=0X107420);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X107432,	"switch 9 cases ",	0);
	create_byte	(0X107436);
	set_cmt	(0X107437,	"jump table for switch statement",	0);
	create_byte	(0X107437);
	make_array	(0X107437,	0X9);
	set_cmt	(0X107440,	"jumptable 00107432 case 1",	1);
	create_insn	(0X107440);
	create_insn	(x=0X107442);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X107444);
	op_plain_offset	(x,	1,	0X70000800);
	op_plain_offset	(x,	129,	0X70000800);
	create_insn	(x=0X107446);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X10744C);
	op_plain_offset	(x,	1,	0X40002B50);
	op_plain_offset	(x,	129,	0X40002B50);
	set_cmt	(0X10744E,	"result",	0);
	create_insn	(x=0X107454);
	op_stkvar	(x,	1);
	create_insn	(x=0X10745E);
	op_plain_offset	(x,	1,	0X40002B50);
	op_plain_offset	(x,	129,	0X40002B50);
	create_insn	(x=0X107464);
	op_plain_offset	(x,	1,	0X40002B50);
	op_plain_offset	(x,	129,	0X40002B50);
	create_insn	(x=0X10746A);
	op_plain_offset	(x,	1,	0X40002B50);
	op_plain_offset	(x,	129,	0X40002B50);
	set_cmt	(0X107472,	"jumptable 00107432 case 2",	1);
	create_insn	(0X107472);
	create_insn	(x=0X107476);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X107480);
	op_plain_offset	(x,	1,	0X40002B64);
	op_plain_offset	(x,	129,	0X40002B64);
	create_insn	(x=0X107482);
	op_plain_offset	(x,	1,	0X40002B64);
	op_plain_offset	(x,	129,	0X40002B64);
	create_insn	(x=0X107484);
	op_plain_offset	(x,	1,	0X40002B64);
	op_plain_offset	(x,	129,	0X40002B64);
	create_insn	(x=0X107486);
	op_plain_offset	(x,	1,	0X40002B64);
	op_plain_offset	(x,	129,	0X40002B64);
	create_insn	(0X10748A);
	create_insn	(x=0X10748C);
	op_plain_offset	(x,	1,	0X40002B64);
	op_plain_offset	(x,	129,	0X40002B64);
	create_insn	(x=0X10748E);
	op_plain_offset	(x,	1,	0X40002B64);
	op_plain_offset	(x,	129,	0X40002B64);
	create_insn	(x=0X107490);
	op_plain_offset	(x,	1,	0X40002B64);
	op_plain_offset	(x,	129,	0X40002B64);
	create_insn	(x=0X107492);
	op_plain_offset	(x,	1,	0X40002B64);
	op_plain_offset	(x,	129,	0X40002B64);
	set_cmt	(0X107498,	"jumptable 00107432 case 3",	1);
	create_insn	(0X107498);
	create_insn	(x=0X1074AA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1074BC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1074CE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1074DE);
	create_insn	(x=0X1074E2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1074EA,	"jumptable 00107432 case 6",	1);
	create_insn	(0X1074EA);
	create_insn	(x=0X1074EC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1074F6,	"jumptable 00107432 case 7",	1);
	create_insn	(0X1074F6);
	create_insn	(x=0X1074FA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X107506);
	op_plain_offset	(x,	1,	0X40002B84);
	op_plain_offset	(x,	129,	0X40002B84);
	create_insn	(x=0X107508);
	op_plain_offset	(x,	1,	0X40002B84);
	op_plain_offset	(x,	129,	0X40002B84);
	create_insn	(x=0X10750A);
	op_plain_offset	(x,	1,	0X40002B84);
	op_plain_offset	(x,	129,	0X40002B84);
	create_insn	(x=0X10750C);
	op_plain_offset	(x,	1,	0X40002B84);
	op_plain_offset	(x,	129,	0X40002B84);
	create_insn	(x=0X107510);
	op_plain_offset	(x,	1,	0X40002B84);
	op_plain_offset	(x,	129,	0X40002B84);
	create_insn	(x=0X107512);
	op_plain_offset	(x,	1,	0X40002B84);
	op_plain_offset	(x,	129,	0X40002B84);
	create_insn	(x=0X107514);
	op_plain_offset	(x,	1,	0X40002B84);
	op_plain_offset	(x,	129,	0X40002B84);
	create_insn	(x=0X107516);
	op_plain_offset	(x,	1,	0X40002B84);
	op_plain_offset	(x,	129,	0X40002B84);
	create_insn	(x=0X107518);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X10751A);
	op_plain_offset	(x,	1,	0X400000C0);
	op_plain_offset	(x,	129,	0X400000C0);
	create_insn	(x=0X107526);
	op_plain_offset	(x,	1,	0X40002B84);
	op_plain_offset	(x,	129,	0X40002B84);
	create_dword	(x=0X107530);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X107534);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X107538);
	create_dword	(0X10753C);
	create_dword	(x=0X107540);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X107544);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X107548,	"jumptable 00107432 default case",	1);
	create_insn	(x=0X107548);
	op_stkvar	(x,	1);
	create_insn	(0X10754E);
	set_name	(0X10754E,	"usbd::initialize_ep_ctrl");
	create_insn	(x=0X107554);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X107558);
	op_plain_offset	(x,	1,	0X40002B3C);
	op_plain_offset	(x,	129,	0X40002B3C);
	set_cmt	(0X10755A,	"len",	0);
	set_cmt	(0X107562,	"c",	0);
	set_cmt	(0X107564,	"a1",	0);
	create_insn	(x=0X10758A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1075DA);
	create_insn	(0X107604);
	create_insn	(0X107650);
	create_insn	(0X10767C);
	set_name	(0X10767C,	"usbd::handle_ep0_control_transfer");
	create_insn	(x=0X107682);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X107684);
	op_stkvar	(x,	1);
	create_insn	(x=0X107686);
	op_stkvar	(x,	1);
	create_insn	(x=0X107688);
	op_stkvar	(x,	1);
	create_insn	(x=0X10768A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10768C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10768E);
	op_stkvar	(x,	1);
	set_cmt	(0X107690,	"a1",	0);
	create_insn	(0X1076DC);
	create_insn	(x=0X1076EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X107708);
	op_stkvar	(x,	1);
	create_insn	(0X107710);
	set_cmt	(0X107712,	"a5",	0);
	create_insn	(x=0X107712);
	op_stkvar	(x,	1);
	set_cmt	(0X107714,	"buf",	0);
	set_cmt	(0X107716,	"endpoint",	0);
	set_cmt	(0X107718,	"len",	0);
	create_insn	(0X10772A);
	create_insn	(x=0X10773A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10773E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X107740);
	op_stkvar	(x,	1);
	create_insn	(x=0X107746);
	op_stkvar	(x,	1);
	set_cmt	(0X10774A,	"size",	0);
	create_insn	(x=0X10774A);
	op_stkvar	(x,	1);
	set_cmt	(0X10774C,	"descriptor",	0);
	create_insn	(x=0X10774C);
	op_stkvar	(x,	1);
	set_cmt	(0X10774E,	"success",	0);
	create_insn	(x=0X10774E);
	op_stkvar	(x,	1);
	set_cmt	(0X107750,	"a4",	0);
	create_insn	(x=0X107750);
	op_stkvar	(x,	1);
	create_insn	(0X107758);
	create_insn	(x=0X107764);
	op_stkvar	(x,	1);
	create_insn	(x=0X107768);
	op_stkvar	(x,	1);
	create_insn	(x=0X10776A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10776C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10776E);
	op_stkvar	(x,	1);
	set_cmt	(0X107772,	"endpoint",	0);
	create_insn	(0X107772);
	create_insn	(0X10777E);
	set_cmt	(0X107782,	"endpoint",	0);
	create_insn	(0X107782);
	set_cmt	(0X107784,	"direction",	0);
	create_insn	(x=0X107786);
	op_stkvar	(x,	1);
	create_insn	(x=0X107790);
	op_stkvar	(x,	1);
	create_insn	(0X107794);
	create_insn	(0X107798);
	create_insn	(0X10779A);
	create_insn	(x=0X10779C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10779E);
	op_stkvar	(x,	1);
	create_insn	(x=0X1077A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X1077A2);
	op_stkvar	(x,	1);
	create_insn	(0X1077A6);
	create_insn	(0X1077AA);
	create_insn	(0X1077AE);
	create_insn	(0X1077B2);
	create_insn	(0X1077B4);
	create_insn	(0X1077D6);
	set_cmt	(0X1077DA,	"endpoint",	0);
	create_insn	(0X1077DA);
	set_cmt	(0X1077DC,	"direction",	0);
	set_cmt	(0X1077E4,	"a5",	0);
	create_insn	(x=0X1077E4);
	op_stkvar	(x,	1);
	set_cmt	(0X1077E6,	"buf",	0);
	set_cmt	(0X1077E8,	"req",	0);
	set_cmt	(0X1077EA,	"endpoint",	0);
	set_cmt	(0X1077EC,	"len",	0);
	create_insn	(0X1077F4);
	set_cmt	(0X1077FA,	"endpoint",	0);
	create_insn	(0X1077FA);
	set_cmt	(0X1077FC,	"direction",	0);
	set_cmt	(0X107802,	"a4",	0);
	create_insn	(x=0X107804);
	op_stkvar	(x,	1);
	set_cmt	(0X10780A,	"n",	0);
	create_insn	(x=0X10780A);
	op_stkvar	(x,	1);
	set_cmt	(0X10780C,	"src",	0);
	create_insn	(x=0X10780C);
	op_stkvar	(x,	1);
	set_cmt	(0X10780E,	"dst",	0);
	create_insn	(x=0X10780E);
	op_stkvar	(x,	1);
	set_cmt	(0X107816,	"a5",	0);
	create_insn	(x=0X107816);
	op_stkvar	(x,	1);
	create_insn	(x=0X107818);
	op_stkvar	(x,	1);
	set_cmt	(0X10781E,	"len",	0);
	set_cmt	(0X107820,	"buf",	0);
	create_insn	(x=0X107820);
	op_stkvar	(x,	1);
	set_cmt	(0X107822,	"req",	0);
	set_cmt	(0X107824,	"endpoint",	0);
	set_cmt	(0X107830,	"a5",	0);
	create_insn	(x=0X107830);
	op_stkvar	(x,	1);
	set_cmt	(0X107832,	"buf",	0);
	set_cmt	(0X107834,	"req",	0);
	set_cmt	(0X107836,	"endpoint",	0);
	set_cmt	(0X107838,	"len",	0);
	create_insn	(x=0X107842);
	op_stkvar	(x,	1);
	create_insn	(x=0X10785C);
	op_stkvar	(x,	1);
	create_insn	(0X107860);
	set_name	(0X107860,	"usbd::ep0_stuff");
	create_insn	(x=0X107862);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X107864);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X107876);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X10787C);
	op_plain_offset	(x,	1,	0X40002B3C);
	op_plain_offset	(x,	129,	0X40002B3C);
	create_insn	(x=0X1078F6);
	op_plain_offset	(x,	1,	0X40002B3C);
	op_plain_offset	(x,	129,	0X40002B3C);
	set_cmt	(0X1078F8,	"n",	0);
	set_cmt	(0X1078FE,	"dst",	0);
	set_cmt	(0X107900,	"src",	0);
	set_cmt	(0X107906,	"a1",	0);
	create_insn	(x=0X107906);
	op_stkvar	(x,	1);
	create_insn	(0X10791A);
	create_insn	(0X107926);
	set_name	(0X107926,	"usb_device_write_ep1_in_sync");
	set_cmt	(0X107938,	"a5",	0);
	create_insn	(x=0X107938);
	op_stkvar	(x,	1);
	set_cmt	(0X10793A,	"a3",	0);
	create_insn	(x=0X10793C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X10793E,	"a4",	0);
	set_cmt	(0X107940,	"req",	0);
	set_cmt	(0X107942,	"a2",	0);
	create_dword	(x=0X107954);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X107958);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X10795C);
	create_dword	(0X107960);
	create_dword	(0X107964);
	create_dword	(0X107968);
	create_dword	(x=0X10796C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X107970);
	create_insn	(0X107974);
	create_insn	(0X107978);
	set_name	(0X107978,	"usb_device_read_ep1_out_sync");
	set_cmt	(0X10798A,	"a5",	0);
	create_insn	(x=0X10798A);
	op_stkvar	(x,	1);
	set_cmt	(0X10798C,	"buf",	0);
	create_insn	(x=0X10798E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X107990,	"len",	0);
	set_cmt	(0X107992,	"req",	0);
	set_cmt	(0X107994,	"endpoint",	0);
	create_insn	(0X1079A4);
	create_insn	(0X1079A8);
	set_name	(0X1079A8,	"usbd::handle_ep0_pending_control_transfer");
	create_insn	(x=0X1079AC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1079C2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1079C4,	"n",	0);
	create_insn	(x=0X1079C6);
	op_plain_offset	(x,	1,	0X40002B3C);
	op_plain_offset	(x,	129,	0X40002B3C);
	set_cmt	(0X1079CC,	"dst",	0);
	set_cmt	(0X1079CE,	"src",	0);
	set_cmt	(0X1079D4,	"buffer_to_use",	0);
	set_cmt	(0X1079DC,	"len",	0);
	set_cmt	(0X1079E0,	"c",	0);
	set_cmt	(0X1079E2,	"a1",	0);
	create_insn	(0X1079EC);
	set_name	(0X1079EC,	"usbd::get_ep1_status");
	set_cmt	(0X1079F4,	"endpoint",	0);
	create_insn	(x=0X1079F6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1079F8,	"a1",	0);
	create_insn	(0X107A02);
	set_cmt	(0X107A0A,	"a2",	0);
	create_insn	(x=0X107A0C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X107A0E,	"req",	0);
	create_insn	(0X107A1A);
	set_name	(0X107A1A,	"usb_device_write_ep1_in");
	set_cmt	(0X107A28,	"a5",	0);
	create_insn	(x=0X107A28);
	op_stkvar	(x,	1);
	set_cmt	(0X107A2A,	"a3",	0);
	create_insn	(x=0X107A2C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X107A2E,	"a4",	0);
	set_cmt	(0X107A30,	"req",	0);
	set_cmt	(0X107A32,	"a2",	0);
	create_insn	(x=0X107A3C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X107A40,	"a1",	0);
	set_cmt	(0X107A42,	"endpoint",	0);
	create_insn	(x=0X107A4C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X107A4E);
	op_plain_offset	(x,	1,	0X40002B3C);
	op_plain_offset	(x,	129,	0X40002B3C);
	create_insn	(0X107A60);
	create_insn	(0X107A64);
	set_name	(0X107A64,	"usb_device_read_ep1_out");
	set_cmt	(0X107A72,	"a5",	0);
	create_insn	(x=0X107A72);
	op_stkvar	(x,	1);
	set_cmt	(0X107A74,	"a3",	0);
	create_insn	(x=0X107A76);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X107A78,	"a4",	0);
	set_cmt	(0X107A7A,	"req",	0);
	set_cmt	(0X107A7C,	"a2",	0);
	create_insn	(x=0X107A84);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X107A84,	"usbd::get_ep1_bytes_to_read");
	set_cmt	(0X107A88,	"a1",	0);
	set_cmt	(0X107A8A,	"endpoint",	0);
	create_insn	(x=0X107A94);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X107A96);
	op_plain_offset	(x,	1,	0X40002B3C);
	op_plain_offset	(x,	129,	0X40002B3C);
	create_insn	(0X107AA8);
	create_insn	(0X107AAC);
	set_name	(0X107AAC,	"usb_device_field8");
	create_insn	(0X107ABA);
	set_name	(0X107ABA,	"usb_device_reset_ep1");
	create_insn	(0X107AC8);
	set_name	(0X107AC8,	"usb_device_ep1_get_bytes_readable");
	set_cmt	(0X107ACE,	"dir",	0);
	set_cmt	(0X107ADE,	"temp_buffer",	0);
	create_insn	(0X107AFA);
	create_insn	(0X107B02);
	create_insn	(0X107B06);
	set_name	(0X107B06,	"usb_device_ep1_get_bytes_writing");
	set_cmt	(0X107B0C,	"a1",	0);
	set_cmt	(0X107B1C,	"a1",	0);
	create_insn	(0X107B38);
	create_insn	(0X107B40);
	create_insn	(0X107B4C);
	create_insn	(x=0X107B4E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X107B52,	"req",	0);
	set_cmt	(0X107B5E,	"a5",	0);
	create_insn	(x=0X107B5E);
	op_stkvar	(x,	1);
	set_cmt	(0X107B60,	"a3",	0);
	set_cmt	(0X107B62,	"a2",	0);
	set_cmt	(0X107B64,	"a4",	0);
	create_insn	(0X107B86);
	set_cmt	(0X107B8E,	"a5",	0);
	create_insn	(x=0X107B8E);
	op_stkvar	(x,	1);
	set_cmt	(0X107B90,	"a3",	0);
	set_cmt	(0X107B92,	"a2",	0);
	set_cmt	(0X107B94,	"a4",	0);
	create_insn	(0X107BB8);
	create_insn	(0X107BBE);
	set_name	(0X107BBE,	"usbd::initialize_ep0");
	create_insn	(x=0X107BC0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X107BC4);
	op_plain_offset	(x,	1,	0X40002B3C);
	op_plain_offset	(x,	129,	0X40002B3C);
	set_cmt	(0X107BCC,	"a1",	0);
	set_cmt	(0X107BCE,	"len",	0);
	set_cmt	(0X107BD0,	"c",	0);
	set_cmt	(0X107BD6,	"a1",	0);
	create_insn	(x=0X107BD6);
	op_plain_offset	(x,	1,	0X40002B3C);
	op_plain_offset	(x,	129,	0X40002B3C);
	set_cmt	(0X107BD8,	"len",	0);
	set_cmt	(0X107BDA,	"c",	0);
	create_insn	(x=0X107BE0);
	op_plain_offset	(x,	1,	0X40002B3C);
	op_plain_offset	(x,	129,	0X40002B3C);
	create_insn	(x=0X107BE2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X107C38,	"us",	0);
	create_insn	(0X107C38);
	create_dword	(x=0X107C48);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X107C4C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X107C50);
	create_insn	(0X107C54);
	create_insn	(0X107C8E);
	create_insn	(0X107CA0);
	create_insn	(0X107CB4);
	create_insn	(0X107CC0);
	set_name	(0X107CC0,	"the_fuck");
	create_insn	(0X107CD2);
	create_insn	(x=0X107CD6);
	op_stkvar	(x,	1);
	create_insn	(x=0X107CDC);
	op_stkvar	(x,	1);
	set_cmt	(0X107CE0,	"src",	0);
	create_insn	(x=0X107CE2);
	op_stkvar	(x,	1);
	create_insn	(x=0X107CE8);
	op_stkvar	(x,	1);
	set_cmt	(0X107CEE,	"dst",	0);
	create_insn	(x=0X107CF6);
	op_stkvar	(x,	1);
	create_insn	(x=0X107CFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X107D02);
	op_stkvar	(x,	1);
	create_insn	(x=0X107D08);
	op_stkvar	(x,	1);
	create_insn	(x=0X107D0C);
	op_plain_offset	(x,	1,	0X7000E440);
	op_plain_offset	(x,	129,	0X7000E440);
	create_insn	(x=0X107D50);
	op_plain_offset	(x,	1,	0X7000E440);
	op_plain_offset	(x,	129,	0X7000E440);
	create_insn	(x=0X107D72);
	op_stkvar	(x,	1);
	create_insn	(x=0X107E30);
	op_stkvar	(x,	1);
	create_insn	(x=0X107E40);
	op_stkvar	(x,	1);
	create_insn	(x=0X107E4E);
	op_stkvar	(x,	1);
	create_insn	(x=0X107E52);
	op_stkvar	(x,	1);
	create_insn	(x=0X107E60);
	op_stkvar	(x,	1);
	create_insn	(x=0X107E70);
	op_stkvar	(x,	1);
	create_insn	(x=0X107E7E);
	op_stkvar	(x,	1);
	create_insn	(x=0X107E92);
	op_stkvar	(x,	1);
	create_insn	(x=0X107EA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X107EA6);
	op_plain_offset	(x,	1,	0X7000E480);
	op_plain_offset	(x,	129,	0X7000E480);
	create_insn	(x=0X107ECE);
	op_plain_offset	(x,	1,	0X7000E480);
	op_plain_offset	(x,	129,	0X7000E480);
	create_insn	(x=0X107ED6);
	op_stkvar	(x,	1);
	create_insn	(x=0X107EE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X107EE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X107EF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X107EF8);
	op_plain_offset	(x,	1,	0X7000E480);
	op_plain_offset	(x,	129,	0X7000E480);
	create_insn	(x=0X107F02);
	op_stkvar	(x,	1);
	create_insn	(x=0X107F0A);
	op_stkvar	(x,	1);
	create_insn	(x=0X107F1E);
	op_stkvar	(x,	1);
	create_insn	(x=0X107F22);
	op_plain_offset	(x,	1,	0X7000E480);
	op_plain_offset	(x,	129,	0X7000E480);
	create_insn	(x=0X107F44);
	op_plain_offset	(x,	1,	0X7000E480);
	op_plain_offset	(x,	129,	0X7000E480);
	create_insn	(x=0X107FDA);
	op_plain_offset	(x,	1,	0X7000E480);
	op_plain_offset	(x,	129,	0X7000E480);
	create_dword	(0X108054);
	create_dword	(0X108058);
	create_dword	(x=0X10805C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X108060);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X108064);
	create_insn	(x=0X10807E);
	op_plain_offset	(x,	1,	0X7000E480);
	op_plain_offset	(x,	129,	0X7000E480);
	create_insn	(x=0X108110);
	op_plain_offset	(x,	1,	0X7000E480);
	op_plain_offset	(x,	129,	0X7000E480);
	create_insn	(x=0X108116);
	op_stkvar	(x,	1);
	create_insn	(x=0X108134);
	op_stkvar	(x,	1);
	create_insn	(x=0X108146);
	op_stkvar	(x,	1);
	create_insn	(x=0X108154);
	op_stkvar	(x,	1);
	create_insn	(x=0X10815A);
	op_plain_offset	(x,	1,	0X7000E480);
	op_plain_offset	(x,	129,	0X7000E480);
	create_insn	(x=0X10824C);
	op_plain_offset	(x,	1,	0X7000E4C0);
	op_plain_offset	(x,	129,	0X7000E4C0);
	create_insn	(x=0X1082D8);
	op_plain_offset	(x,	1,	0X7000E500);
	op_plain_offset	(x,	129,	0X7000E500);
	create_insn	(x=0X1082F2);
	op_plain_offset	(x,	1,	0X7000E500);
	op_plain_offset	(x,	129,	0X7000E500);
	create_insn	(x=0X1082FA);
	op_stkvar	(x,	1);
	create_insn	(x=0X1082FE);
	op_plain_offset	(x,	1,	0X7000E500);
	op_plain_offset	(x,	129,	0X7000E500);
	create_insn	(x=0X108302);
	op_plain_offset	(x,	1,	0X7000E500);
	op_plain_offset	(x,	129,	0X7000E500);
	create_insn	(x=0X108308);
	op_plain_offset	(x,	1,	0X7000E500);
	op_plain_offset	(x,	129,	0X7000E500);
	create_insn	(x=0X10830A);
	op_stkvar	(x,	1);
	create_insn	(x=0X108318);
	op_stkvar	(x,	1);
	create_insn	(x=0X10832A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10833A);
	op_stkvar	(x,	1);
	create_insn	(x=0X108348);
	op_stkvar	(x,	1);
	create_insn	(x=0X10834E);
	op_plain_offset	(x,	1,	0X7000EA00);
	op_plain_offset	(x,	129,	0X7000EA00);
	create_insn	(x=0X108350);
	op_stkvar	(x,	1);
	create_insn	(x=0X10835C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10836C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10837C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10838E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10839C);
	op_stkvar	(x,	1);
	create_insn	(x=0X1083A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X1083A2);
	op_plain_offset	(x,	1,	0X7000EA00);
	op_plain_offset	(x,	129,	0X7000EA00);
	create_insn	(x=0X1083A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X1083B2);
	op_stkvar	(x,	1);
	create_insn	(x=0X1083C2);
	op_stkvar	(x,	1);
	create_insn	(x=0X1083D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X1083E6);
	op_stkvar	(x,	1);
	create_insn	(x=0X1083F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X10840A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10841C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10842E);
	op_stkvar	(x,	1);
	create_insn	(x=0X108434);
	op_plain_offset	(x,	1,	0X7000EA00);
	op_plain_offset	(x,	129,	0X7000EA00);
	create_dword	(x=0X108478);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X10847C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X108480);
	create_insn	(x=0X1085D8);
	op_plain_offset	(x,	1,	0X7000EA00);
	op_plain_offset	(x,	129,	0X7000EA00);
	create_insn	(x=0X1085DA);
	op_stkvar	(x,	1);
	create_insn	(x=0X1085E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X1085FA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10860C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10861E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10862E);
	op_stkvar	(x,	1);
	create_insn	(x=0X108640);
	op_stkvar	(x,	1);
	create_insn	(x=0X108646);
	op_plain_offset	(x,	1,	0X7000EA00);
	op_plain_offset	(x,	129,	0X7000EA00);
	create_insn	(x=0X10864E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10865C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10866E);
	op_stkvar	(x,	1);
	create_insn	(x=0X108680);
	op_stkvar	(x,	1);
	create_insn	(x=0X108692);
	op_stkvar	(x,	1);
	create_insn	(x=0X1086A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X1086BA);
	op_stkvar	(x,	1);
	create_insn	(x=0X1086C6);
	op_stkvar	(x,	1);
	create_insn	(x=0X1086CC);
	op_plain_offset	(x,	1,	0X7000EA00);
	op_plain_offset	(x,	129,	0X7000EA00);
	create_insn	(x=0X1086CE);
	op_stkvar	(x,	1);
	create_insn	(x=0X1086D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X1086E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X1086F6);
	op_stkvar	(x,	1);
	create_insn	(x=0X108702);
	op_stkvar	(x,	1);
	create_insn	(x=0X108714);
	op_stkvar	(x,	1);
	create_insn	(x=0X108724);
	op_stkvar	(x,	1);
	create_insn	(x=0X108734);
	op_stkvar	(x,	1);
	create_insn	(x=0X108744);
	op_stkvar	(x,	1);
	create_insn	(x=0X108754);
	op_stkvar	(x,	1);
	create_insn	(x=0X108764);
	op_stkvar	(x,	1);
	create_insn	(x=0X108776);
	op_stkvar	(x,	1);
	create_insn	(x=0X108786);
	op_stkvar	(x,	1);
	create_insn	(x=0X108796);
	op_stkvar	(x,	1);
	create_insn	(x=0X1087A2);
	op_stkvar	(x,	1);
	create_insn	(x=0X1087B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X1087B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X1087C2);
	op_stkvar	(x,	1);
	create_insn	(x=0X1087C8);
	op_plain_offset	(x,	1,	0X7000EA00);
	op_plain_offset	(x,	129,	0X7000EA00);
	create_insn	(x=0X1087CA);
	op_stkvar	(x,	1);
	create_insn	(x=0X1087CE);
	op_stkvar	(x,	1);
	create_insn	(x=0X1087E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X1087F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X1087FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X10880E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10881E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10882E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10883E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10884E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10885E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10886E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10887E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10888E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10889E);
	op_stkvar	(x,	1);
	create_insn	(x=0X1088AE);
	op_stkvar	(x,	1);
	create_insn	(x=0X1088B2);
	op_stkvar	(x,	1);
	create_insn	(x=0X1088B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X1088C2);
	op_plain_offset	(x,	1,	0X7000EA00);
	op_plain_offset	(x,	129,	0X7000EA00);
	create_insn	(x=0X1089C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X1089CE);
	op_stkvar	(x,	1);
	create_dword	(x=0X1089D4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X1089D8);
	create_insn	(x=0X1089DC);
	op_plain_offset	(x,	1,	0X7000EA00);
	op_plain_offset	(x,	129,	0X7000EA00);
	create_insn	(x=0X1089DE);
	op_stkvar	(x,	1);
	create_insn	(x=0X1089EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X1089FE);
	op_stkvar	(x,	1);
	create_insn	(x=0X108A10);
	op_stkvar	(x,	1);
	create_insn	(x=0X108A22);
	op_stkvar	(x,	1);
	create_insn	(x=0X108A34);
	op_stkvar	(x,	1);
	create_insn	(x=0X108A44);
	op_stkvar	(x,	1);
	create_insn	(x=0X108A4A);
	op_stkvar	(x,	1);
	create_insn	(x=0X108A54);
	op_stkvar	(x,	1);
	create_insn	(x=0X108A5A);
	op_plain_offset	(x,	1,	0X7000EA00);
	op_plain_offset	(x,	129,	0X7000EA00);
	create_insn	(x=0X108A5E);
	op_stkvar	(x,	1);
	create_insn	(x=0X108A68);
	op_stkvar	(x,	1);
	create_insn	(x=0X108A76);
	op_stkvar	(x,	1);
	create_insn	(x=0X108A88);
	op_stkvar	(x,	1);
	create_insn	(x=0X108A98);
	op_stkvar	(x,	1);
	create_insn	(x=0X108AA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X108AB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X108AC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X108AD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X108AE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X108AF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X108B08);
	op_stkvar	(x,	1);
	create_insn	(x=0X108B18);
	op_stkvar	(x,	1);
	create_insn	(x=0X108B28);
	op_stkvar	(x,	1);
	create_insn	(x=0X108B38);
	op_stkvar	(x,	1);
	create_insn	(x=0X108B48);
	op_stkvar	(x,	1);
	create_insn	(x=0X108B58);
	op_stkvar	(x,	1);
	create_insn	(x=0X108B68);
	op_stkvar	(x,	1);
	create_insn	(x=0X108B78);
	op_stkvar	(x,	1);
	create_insn	(x=0X108B88);
	op_stkvar	(x,	1);
	create_insn	(x=0X108B98);
	op_stkvar	(x,	1);
	create_insn	(x=0X108BA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X108BB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X108BC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X108BD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X108BE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X108BF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X108C08);
	op_stkvar	(x,	1);
	create_insn	(x=0X108C18);
	op_stkvar	(x,	1);
	create_insn	(x=0X108C26);
	op_stkvar	(x,	1);
	create_insn	(x=0X108C34);
	op_stkvar	(x,	1);
	create_insn	(x=0X108C46);
	op_stkvar	(x,	1);
	create_insn	(x=0X108C56);
	op_stkvar	(x,	1);
	create_insn	(x=0X108C62);
	op_plain_offset	(x,	1,	0X7000EA00);
	op_plain_offset	(x,	129,	0X7000EA00);
	create_insn	(x=0X108C64);
	op_stkvar	(x,	1);
	create_insn	(x=0X108C68);
	op_stkvar	(x,	1);
	create_insn	(x=0X108C76);
	op_stkvar	(x,	1);
	create_insn	(x=0X108C88);
	op_stkvar	(x,	1);
	create_insn	(x=0X108C98);
	op_stkvar	(x,	1);
	create_insn	(x=0X108CA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X108CB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X108CC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X108CD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X108CE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X108CF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X108D08);
	op_stkvar	(x,	1);
	create_insn	(x=0X108D18);
	op_stkvar	(x,	1);
	create_insn	(x=0X108D28);
	op_stkvar	(x,	1);
	create_insn	(x=0X108D38);
	op_stkvar	(x,	1);
	create_insn	(x=0X108D48);
	op_stkvar	(x,	1);
	create_insn	(x=0X108D58);
	op_stkvar	(x,	1);
	create_insn	(x=0X108D68);
	op_stkvar	(x,	1);
	create_insn	(x=0X108D78);
	op_stkvar	(x,	1);
	create_insn	(x=0X108D88);
	op_stkvar	(x,	1);
	create_insn	(x=0X108D98);
	op_stkvar	(x,	1);
	create_insn	(x=0X108DA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X108DB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X108DC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X108DD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X108DE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X108DF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X108E08);
	op_stkvar	(x,	1);
	create_insn	(x=0X108E18);
	op_stkvar	(x,	1);
	create_insn	(x=0X108E26);
	op_plain_offset	(x,	1,	0X7000EA00);
	op_plain_offset	(x,	129,	0X7000EA00);
	create_insn	(x=0X108E28);
	op_stkvar	(x,	1);
	create_insn	(x=0X108E2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X108E3E);
	op_stkvar	(x,	1);
	create_insn	(x=0X108E4E);
	op_stkvar	(x,	1);
	create_insn	(x=0X108E5E);
	op_stkvar	(x,	1);
	create_insn	(x=0X108E6E);
	op_stkvar	(x,	1);
	create_insn	(x=0X108E7E);
	op_stkvar	(x,	1);
	create_insn	(x=0X108E8E);
	op_stkvar	(x,	1);
	create_insn	(x=0X108E9E);
	op_stkvar	(x,	1);
	create_insn	(x=0X108EAE);
	op_stkvar	(x,	1);
	create_insn	(x=0X108EBE);
	op_stkvar	(x,	1);
	create_insn	(x=0X108ECE);
	op_stkvar	(x,	1);
	create_insn	(x=0X108EDE);
	op_stkvar	(x,	1);
	create_insn	(x=0X108EEE);
	op_stkvar	(x,	1);
	create_insn	(x=0X108EFE);
	op_stkvar	(x,	1);
	create_insn	(x=0X108F0E);
	op_stkvar	(x,	1);
	create_insn	(x=0X108F1E);
	op_stkvar	(x,	1);
	create_insn	(x=0X108F2E);
	op_stkvar	(x,	1);
	create_insn	(x=0X108F3E);
	op_stkvar	(x,	1);
	create_insn	(x=0X108F4E);
	op_stkvar	(x,	1);
	create_insn	(x=0X108F5E);
	op_stkvar	(x,	1);
	create_insn	(x=0X108F6E);
	op_stkvar	(x,	1);
	create_insn	(x=0X108F7E);
	op_stkvar	(x,	1);
	create_insn	(x=0X108F8E);
	op_stkvar	(x,	1);
	create_insn	(x=0X108F9E);
	op_stkvar	(x,	1);
	create_insn	(x=0X108FAE);
	op_stkvar	(x,	1);
	create_insn	(x=0X108FBE);
	op_stkvar	(x,	1);
	create_insn	(x=0X108FCE);
	op_stkvar	(x,	1);
	create_insn	(x=0X108FDA);
	op_stkvar	(x,	1);
	create_insn	(x=0X108FF2);
	op_stkvar	(x,	1);
	create_insn	(x=0X109000);
	op_plain_offset	(x,	1,	0X7000EA00);
	op_plain_offset	(x,	129,	0X7000EA00);
	create_insn	(x=0X109002);
	op_stkvar	(x,	1);
	create_insn	(x=0X109006);
	op_stkvar	(x,	1);
	create_insn	(x=0X109018);
	op_stkvar	(x,	1);
	create_insn	(x=0X109028);
	op_stkvar	(x,	1);
	create_insn	(x=0X109038);
	op_stkvar	(x,	1);
	create_insn	(x=0X109048);
	op_stkvar	(x,	1);
	create_insn	(x=0X109058);
	op_stkvar	(x,	1);
	create_dword	(x=0X10905C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X109060);
	create_insn	(x=0X10906E);
	op_stkvar	(x,	1);
	create_insn	(x=0X109080);
	op_stkvar	(x,	1);
	create_insn	(x=0X109092);
	op_stkvar	(x,	1);
	create_insn	(x=0X1090A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X1090B6);
	op_stkvar	(x,	1);
	create_insn	(x=0X1090C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X1090DA);
	op_stkvar	(x,	1);
	create_insn	(x=0X1090EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X1090FE);
	op_stkvar	(x,	1);
	create_insn	(x=0X109110);
	op_stkvar	(x,	1);
	create_insn	(x=0X109122);
	op_stkvar	(x,	1);
	create_insn	(x=0X109134);
	op_stkvar	(x,	1);
	create_insn	(x=0X109146);
	op_stkvar	(x,	1);
	create_insn	(x=0X109158);
	op_stkvar	(x,	1);
	create_insn	(x=0X10916A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10917C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10918E);
	op_stkvar	(x,	1);
	create_insn	(x=0X1091A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X1091B2);
	op_stkvar	(x,	1);
	create_insn	(x=0X1091C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X1091D6);
	op_stkvar	(x,	1);
	create_insn	(x=0X1091E2);
	op_stkvar	(x,	1);
	create_insn	(x=0X1091F6);
	op_stkvar	(x,	1);
	create_insn	(x=0X109204);
	op_stkvar	(x,	1);
	create_insn	(x=0X109206);
	op_plain_offset	(x,	1,	0X7000EA00);
	op_plain_offset	(x,	129,	0X7000EA00);
	create_insn	(x=0X109208);
	op_stkvar	(x,	1);
	create_insn	(x=0X10920C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10921E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10922E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10923E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10924E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10925E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10926E);
	op_stkvar	(x,	1);
	create_insn	(x=0X109280);
	op_stkvar	(x,	1);
	create_insn	(x=0X109292);
	op_stkvar	(x,	1);
	create_insn	(x=0X1092A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X1092B6);
	op_stkvar	(x,	1);
	create_insn	(x=0X1092C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X1092DA);
	op_stkvar	(x,	1);
	create_insn	(x=0X1092EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X1092FE);
	op_stkvar	(x,	1);
	create_insn	(x=0X109310);
	op_stkvar	(x,	1);
	create_insn	(x=0X109322);
	op_stkvar	(x,	1);
	create_insn	(x=0X109334);
	op_stkvar	(x,	1);
	create_insn	(x=0X109346);
	op_stkvar	(x,	1);
	create_insn	(x=0X109358);
	op_stkvar	(x,	1);
	create_insn	(x=0X10936A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10937C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10938E);
	op_stkvar	(x,	1);
	create_insn	(x=0X1093A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X1093B2);
	op_stkvar	(x,	1);
	create_insn	(x=0X1093C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X1093D6);
	op_stkvar	(x,	1);
	create_insn	(x=0X1093E2);
	op_stkvar	(x,	1);
	create_insn	(x=0X1093F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X109402);
	op_stkvar	(x,	1);
	create_insn	(x=0X109412);
	op_stkvar	(x,	1);
	create_insn	(x=0X109414);
	op_stkvar	(x,	1);
	create_insn	(x=0X109418);
	op_stkvar	(x,	1);
	create_insn	(x=0X109424);
	op_stkvar	(x,	1);
	create_insn	(x=0X10942E);
	op_stkvar	(x,	1);
	create_insn	(x=0X109438);
	op_stkvar	(x,	1);
	create_insn	(x=0X109442);
	op_stkvar	(x,	1);
	create_insn	(x=0X10944C);
	op_stkvar	(x,	1);
	create_insn	(x=0X109456);
	op_stkvar	(x,	1);
	create_insn	(x=0X109460);
	op_stkvar	(x,	1);
	create_insn	(x=0X10946A);
	op_stkvar	(x,	1);
	create_insn	(x=0X109474);
	op_stkvar	(x,	1);
	create_insn	(x=0X109478);
	op_stkvar	(x,	1);
	create_insn	(x=0X10947A);
	op_stkvar	(x,	1);
	create_insn	(x=0X109480);
	op_stkvar	(x,	1);
	create_insn	(x=0X109490);
	op_plain_offset	(x,	1,	0X7000EA40);
	op_plain_offset	(x,	129,	0X7000EA40);
	create_insn	(x=0X109492);
	op_stkvar	(x,	1);
	create_insn	(x=0X109494);
	op_stkvar	(x,	1);
	create_insn	(x=0X109498);
	op_stkvar	(x,	1);
	create_insn	(x=0X1094A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X1094AE);
	op_stkvar	(x,	1);
	create_insn	(x=0X1094B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X1094C2);
	op_stkvar	(x,	1);
	create_insn	(x=0X1094CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X1094D6);
	op_stkvar	(x,	1);
	create_insn	(x=0X1094E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X1094EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X1094FE);
	op_stkvar	(x,	1);
	create_insn	(x=0X109500);
	op_stkvar	(x,	1);
	create_insn	(x=0X109510);
	op_plain_offset	(x,	1,	0X7000EA40);
	op_plain_offset	(x,	129,	0X7000EA40);
	create_insn	(x=0X109512);
	op_stkvar	(x,	1);
	create_insn	(x=0X109514);
	op_stkvar	(x,	1);
	create_insn	(x=0X109518);
	op_stkvar	(x,	1);
	create_insn	(x=0X109524);
	op_stkvar	(x,	1);
	create_insn	(x=0X10952E);
	op_stkvar	(x,	1);
	create_insn	(x=0X109538);
	op_stkvar	(x,	1);
	create_insn	(x=0X109542);
	op_stkvar	(x,	1);
	create_insn	(x=0X10954C);
	op_stkvar	(x,	1);
	create_insn	(x=0X109556);
	op_stkvar	(x,	1);
	create_insn	(x=0X109560);
	op_stkvar	(x,	1);
	create_insn	(x=0X10956A);
	op_stkvar	(x,	1);
	create_insn	(x=0X109578);
	op_stkvar	(x,	1);
	create_insn	(x=0X10957A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10957E);
	op_stkvar	(x,	1);
	create_insn	(x=0X109586);
	op_stkvar	(x,	1);
	create_insn	(x=0X10958C);
	op_stkvar	(x,	1);
	create_insn	(x=0X109590);
	op_plain_offset	(x,	1,	0X7000EA40);
	op_plain_offset	(x,	129,	0X7000EA40);
	create_insn	(x=0X109592);
	op_stkvar	(x,	1);
	create_insn	(x=0X1095A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X1095B2);
	op_stkvar	(x,	1);
	create_insn	(x=0X1095C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X1095D6);
	op_stkvar	(x,	1);
	create_insn	(x=0X1095DA);
	op_stkvar	(x,	1);
	create_insn	(x=0X1095E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X1095EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X1095EE);
	op_stkvar	(x,	1);
	create_dword	(x=0X109600);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X109604);
	create_insn	(x=0X109608);
	op_stkvar	(x,	1);
	create_insn	(x=0X10960A);
	op_plain_offset	(x,	1,	0X7000EA40);
	op_plain_offset	(x,	129,	0X7000EA40);
	create_insn	(x=0X10960E);
	op_stkvar	(x,	1);
	create_insn	(x=0X109612);
	op_stkvar	(x,	1);
	create_insn	(x=0X109616);
	op_stkvar	(x,	1);
	create_insn	(x=0X109622);
	op_stkvar	(x,	1);
	create_insn	(x=0X10962C);
	op_stkvar	(x,	1);
	create_insn	(x=0X109636);
	op_stkvar	(x,	1);
	create_insn	(x=0X109640);
	op_stkvar	(x,	1);
	create_insn	(x=0X10964A);
	op_stkvar	(x,	1);
	create_insn	(x=0X109654);
	op_stkvar	(x,	1);
	create_insn	(x=0X10965E);
	op_stkvar	(x,	1);
	create_insn	(x=0X109668);
	op_stkvar	(x,	1);
	create_insn	(x=0X109678);
	op_stkvar	(x,	1);
	create_insn	(x=0X109684);
	op_plain_offset	(x,	1,	0X7000EA40);
	op_plain_offset	(x,	129,	0X7000EA40);
	create_insn	(x=0X109686);
	op_stkvar	(x,	1);
	create_insn	(x=0X109688);
	op_stkvar	(x,	1);
	create_insn	(x=0X10968C);
	op_stkvar	(x,	1);
	create_insn	(x=0X109698);
	op_stkvar	(x,	1);
	create_insn	(x=0X1096A2);
	op_stkvar	(x,	1);
	create_insn	(x=0X1096AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X1096B6);
	op_stkvar	(x,	1);
	create_insn	(x=0X1096C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X1096CA);
	op_stkvar	(x,	1);
	create_insn	(x=0X1096D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X1096DE);
	op_stkvar	(x,	1);
	create_insn	(x=0X1096F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X1096FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X1096FE);
	op_plain_offset	(x,	1,	0X7000EA40);
	op_plain_offset	(x,	129,	0X7000EA40);
	create_insn	(x=0X10976E);
	op_plain_offset	(x,	1,	0X7000EA40);
	op_plain_offset	(x,	129,	0X7000EA40);
	create_insn	(x=0X1097AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X1097B6);
	op_stkvar	(x,	1);
	create_insn	(x=0X1097BE);
	op_plain_offset	(x,	1,	0X7000EA40);
	op_plain_offset	(x,	129,	0X7000EA40);
	create_insn	(x=0X1097F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X109808);
	op_stkvar	(x,	1);
	create_insn	(x=0X109818);
	op_stkvar	(x,	1);
	create_insn	(x=0X109828);
	op_stkvar	(x,	1);
	create_insn	(x=0X109838);
	op_stkvar	(x,	1);
	create_insn	(x=0X10984A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10985A);
	op_stkvar	(x,	1);
	create_insn	(x=0X109860);
	op_plain_offset	(x,	1,	0X7000EA40);
	op_plain_offset	(x,	129,	0X7000EA40);
	create_insn	(x=0X10989A);
	op_stkvar	(x,	1);
	create_insn	(x=0X1098A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X1098B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X1098BE);
	op_plain_offset	(x,	1,	0X7000EA40);
	op_plain_offset	(x,	129,	0X7000EA40);
	create_insn	(x=0X1098C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X1098C2);
	op_stkvar	(x,	1);
	create_insn	(x=0X1098C6);
	op_stkvar	(x,	1);
	create_insn	(x=0X1098D2);
	op_stkvar	(x,	1);
	create_insn	(x=0X1098D6);
	op_stkvar	(x,	1);
	create_insn	(x=0X1098E2);
	op_stkvar	(x,	1);
	create_insn	(x=0X1098E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X1098FA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10990C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10991E);
	op_stkvar	(x,	1);
	create_insn	(x=0X109930);
	op_stkvar	(x,	1);
	create_insn	(x=0X10993C);
	op_plain_offset	(x,	1,	0X7000EA40);
	op_plain_offset	(x,	129,	0X7000EA40);
	create_insn	(x=0X10993E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10994C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10995C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10996E);
	op_stkvar	(x,	1);
	create_insn	(x=0X109980);
	op_stkvar	(x,	1);
	create_insn	(x=0X109992);
	op_stkvar	(x,	1);
	create_insn	(x=0X1099A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X1099B6);
	op_stkvar	(x,	1);
	create_insn	(x=0X1099C8);
	op_stkvar	(x,	1);
	create_dword	(x=0X109A04);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X109A08);
	create_insn	(0X109A0C);
	create_insn	(x=0X109A1A);
	op_plain_offset	(x,	1,	0X7000EA40);
	op_plain_offset	(x,	129,	0X7000EA40);
	create_insn	(x=0X109A1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X109A2A);
	op_stkvar	(x,	1);
	create_insn	(x=0X109A3A);
	op_stkvar	(x,	1);
	create_insn	(x=0X109A4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X109A5E);
	op_stkvar	(x,	1);
	create_insn	(x=0X109A70);
	op_stkvar	(x,	1);
	create_insn	(x=0X109A82);
	op_stkvar	(x,	1);
	create_insn	(x=0X109A94);
	op_stkvar	(x,	1);
	create_insn	(x=0X109AA6);
	op_stkvar	(x,	1);
	create_insn	(x=0X109AB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X109ABA);
	op_stkvar	(x,	1);
	create_insn	(x=0X109AC2);
	op_plain_offset	(x,	1,	0X7000EA40);
	op_plain_offset	(x,	129,	0X7000EA40);
	create_insn	(x=0X109AC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X109AD2);
	op_stkvar	(x,	1);
	create_insn	(x=0X109AE2);
	op_stkvar	(x,	1);
	create_insn	(x=0X109AF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X109B06);
	op_stkvar	(x,	1);
	create_insn	(x=0X109B18);
	op_stkvar	(x,	1);
	create_insn	(x=0X109B2A);
	op_stkvar	(x,	1);
	create_insn	(x=0X109B3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X109B4E);
	op_stkvar	(x,	1);
	create_insn	(x=0X109B52);
	op_stkvar	(x,	1);
	create_insn	(x=0X109B5E);
	op_stkvar	(x,	1);
	create_insn	(x=0X109B64);
	op_plain_offset	(x,	1,	0X7000EA40);
	op_plain_offset	(x,	129,	0X7000EA40);
	create_insn	(x=0X109B66);
	op_stkvar	(x,	1);
	create_insn	(x=0X109B74);
	op_stkvar	(x,	1);
	create_insn	(x=0X109B84);
	op_stkvar	(x,	1);
	create_insn	(x=0X109B96);
	op_stkvar	(x,	1);
	create_insn	(x=0X109BA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X109BBA);
	op_stkvar	(x,	1);
	create_insn	(x=0X109BCC);
	op_stkvar	(x,	1);
	create_insn	(x=0X109BDE);
	op_stkvar	(x,	1);
	create_insn	(x=0X109BF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X109BF6);
	op_plain_offset	(x,	1,	0X7000EA40);
	op_plain_offset	(x,	129,	0X7000EA40);
	create_insn	(x=0X109BF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X109C06);
	op_stkvar	(x,	1);
	create_insn	(x=0X109C16);
	op_stkvar	(x,	1);
	create_insn	(x=0X109C26);
	op_stkvar	(x,	1);
	create_insn	(x=0X109C36);
	op_stkvar	(x,	1);
	create_insn	(x=0X109C46);
	op_stkvar	(x,	1);
	create_insn	(x=0X109C56);
	op_stkvar	(x,	1);
	create_insn	(x=0X109C66);
	op_stkvar	(x,	1);
	create_insn	(x=0X109C76);
	op_stkvar	(x,	1);
	create_insn	(x=0X109C88);
	op_stkvar	(x,	1);
	create_insn	(x=0X109C9A);
	op_stkvar	(x,	1);
	create_insn	(x=0X109CAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X109CBE);
	op_stkvar	(x,	1);
	create_insn	(x=0X109CD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X109CE2);
	op_stkvar	(x,	1);
	create_insn	(x=0X109CF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X109D06);
	op_stkvar	(x,	1);
	create_insn	(x=0X109D18);
	op_stkvar	(x,	1);
	create_insn	(x=0X109D2A);
	op_stkvar	(x,	1);
	create_insn	(x=0X109D3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X109D4E);
	op_stkvar	(x,	1);
	create_insn	(x=0X109D60);
	op_stkvar	(x,	1);
	create_insn	(x=0X109D72);
	op_stkvar	(x,	1);
	create_insn	(x=0X109D84);
	op_stkvar	(x,	1);
	create_insn	(x=0X109D96);
	op_stkvar	(x,	1);
	create_insn	(x=0X109DA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X109DAE);
	op_stkvar	(x,	1);
	create_insn	(x=0X109DBE);
	op_stkvar	(x,	1);
	create_insn	(x=0X109DCE);
	op_stkvar	(x,	1);
	create_insn	(x=0X109DDE);
	op_stkvar	(x,	1);
	create_insn	(x=0X109DEE);
	op_stkvar	(x,	1);
	create_insn	(x=0X109DFE);
	op_stkvar	(x,	1);
	create_insn	(x=0X109E0E);
	op_stkvar	(x,	1);
	create_dword	(x=0X109E14);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X109E18);
	create_insn	(x=0X109E24);
	op_stkvar	(x,	1);
	create_insn	(x=0X109E36);
	op_stkvar	(x,	1);
	create_insn	(x=0X109E48);
	op_stkvar	(x,	1);
	create_insn	(x=0X109E5A);
	op_stkvar	(x,	1);
	create_insn	(x=0X109E6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X109E7E);
	op_stkvar	(x,	1);
	create_insn	(x=0X109E90);
	op_stkvar	(x,	1);
	create_insn	(x=0X109EA2);
	op_stkvar	(x,	1);
	create_insn	(x=0X109EB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X109EC6);
	op_stkvar	(x,	1);
	create_insn	(x=0X109ED8);
	op_stkvar	(x,	1);
	create_insn	(x=0X109EEA);
	op_stkvar	(x,	1);
	create_insn	(x=0X109EFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X109F0E);
	op_stkvar	(x,	1);
	create_insn	(x=0X109F20);
	op_stkvar	(x,	1);
	create_insn	(x=0X109F32);
	op_stkvar	(x,	1);
	create_insn	(x=0X109F44);
	op_stkvar	(x,	1);
	create_insn	(x=0X109F4A);
	op_plain_offset	(x,	1,	0X7000EA80);
	op_plain_offset	(x,	129,	0X7000EA80);
	create_insn	(x=0X109F4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X109F50);
	op_stkvar	(x,	1);
	create_insn	(x=0X109F62);
	op_stkvar	(x,	1);
	create_insn	(x=0X109F72);
	op_stkvar	(x,	1);
	create_insn	(x=0X109F82);
	op_stkvar	(x,	1);
	create_insn	(x=0X109F92);
	op_stkvar	(x,	1);
	create_insn	(x=0X109FA2);
	op_stkvar	(x,	1);
	create_insn	(x=0X109FB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X109FC6);
	op_stkvar	(x,	1);
	create_insn	(x=0X109FD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X109FEA);
	op_stkvar	(x,	1);
	create_insn	(x=0X109FFE);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A012);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A024);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A036);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A042);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A054);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A064);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A074);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A084);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A094);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A0A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A0B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A0C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A0D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A0E2);
	op_plain_offset	(x,	1,	0X7000EA80);
	op_plain_offset	(x,	129,	0X7000EA80);
	create_insn	(x=0X10A0E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A0E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A0FA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A10A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A11A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A12A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A13A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A14A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A15A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A16A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A17A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A18A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A19A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A1AA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A1BA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A1CA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A1DA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A1EA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A1FA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A20A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A21A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A22A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A23A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A24A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A25A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A266);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A26A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A276);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A27A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A282);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A290);
	op_plain_offset	(x,	1,	0X7000EA80);
	op_plain_offset	(x,	129,	0X7000EA80);
	create_insn	(x=0X10A292);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A296);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A2AA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A2BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A2C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A2CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A2D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A2E2);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A2F0);
	op_plain_offset	(x,	1,	0X7000EA80);
	op_plain_offset	(x,	129,	0X7000EA80);
	create_insn	(x=0X10A2F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A2F6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A308);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A31A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A32C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A33E);
	op_stkvar	(x,	1);
	create_dword	(x=0X10A348);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X10A34C);
	create_insn	(x=0X10A356);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A368);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A37A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A38C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A39E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A3B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A3BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A3C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A3CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A3D6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A3E4);
	op_plain_offset	(x,	1,	0X7000EA80);
	op_plain_offset	(x,	129,	0X7000EA80);
	create_insn	(x=0X10A3E6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A3EA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A3FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A40E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A420);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A432);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A444);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A456);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A468);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A47A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A48C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A49E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A4AA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A4AE);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A4BA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A4C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A4D2);
	op_plain_offset	(x,	1,	0X7000EA80);
	op_plain_offset	(x,	129,	0X7000EA80);
	create_insn	(x=0X10A4D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A4D6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A4DA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A4E6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A4F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A4FA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A504);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A50E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A512);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A516);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A522);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A52C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A53A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A53C);
	op_plain_offset	(x,	1,	0X7000EA80);
	op_plain_offset	(x,	129,	0X7000EA80);
	create_insn	(x=0X10A53E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A542);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A554);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A564);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A574);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A584);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A594);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A5A6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A5B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A5CA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A5DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A5EE);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A600);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A612);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A624);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A636);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A648);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A65A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A66C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A680);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A694);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A6A6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A6B2);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A6C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A6D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A6D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A6DE);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A6E4);
	op_plain_offset	(x,	1,	0X7000EA80);
	op_plain_offset	(x,	129,	0X7000EA80);
	create_insn	(x=0X10A6E6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A6E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A6EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A6F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A700);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A70A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A712);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A726);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A738);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A74C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A75E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A770);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A782);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A790);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A7A2);
	op_plain_offset	(x,	1,	0X7000EA80);
	op_plain_offset	(x,	129,	0X7000EA80);
	create_insn	(x=0X10A7A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A7B2);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A7C2);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A7C6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A7D2);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A7D8);
	op_plain_offset	(x,	1,	0X7000EA80);
	op_plain_offset	(x,	129,	0X7000EA80);
	create_insn	(x=0X10A7DA);
	op_stkvar	(x,	1);
	create_dword	(x=0X10A7E0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X10A7E4);
	create_insn	(0X10A7E8);
	create_insn	(x=0X10A7F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A802);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A806);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A812);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A818);
	op_plain_offset	(x,	1,	0X7000EA80);
	op_plain_offset	(x,	129,	0X7000EA80);
	create_insn	(x=0X10A81E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A822);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A826);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A830);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A83A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A844);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A84C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A862);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A876);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A884);
	op_plain_offset	(x,	1,	0X7000EA80);
	op_plain_offset	(x,	129,	0X7000EA80);
	create_insn	(x=0X10A886);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A894);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A8A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A8A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A8B6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A8C6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A8CC);
	op_plain_offset	(x,	1,	0X7000EA80);
	op_plain_offset	(x,	129,	0X7000EA80);
	create_insn	(x=0X10A8CE);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A8DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A8EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A8F2);
	op_plain_offset	(x,	1,	0X7000EA80);
	op_plain_offset	(x,	129,	0X7000EA80);
	create_insn	(x=0X10A8F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A902);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A912);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A916);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A924);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A928);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A93C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A93E);
	op_plain_offset	(x,	1,	0X7000EA80);
	op_plain_offset	(x,	129,	0X7000EA80);
	create_insn	(x=0X10A940);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A94E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A95E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A962);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A970);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A974);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A988);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A98E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A990);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A994);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A9A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A9AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A9B6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A9BA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A9BE);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A9CA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A9D2);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A9DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A9E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A9E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A9F6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A9FA);
	op_plain_offset	(x,	1,	0X7000EAC0);
	op_plain_offset	(x,	129,	0X7000EAC0);
	create_insn	(x=0X10A9FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AA0A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AA1A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AA1E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AA2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AA30);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AA44);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AA48);
	op_plain_offset	(x,	1,	0X7000EAC0);
	op_plain_offset	(x,	129,	0X7000EAC0);
	create_insn	(x=0X10AA4A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AA4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AA50);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AA5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AA68);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AA72);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AA76);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AA7A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AA86);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AA90);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AA9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AAA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AAB2);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AAB6);
	op_plain_offset	(x,	1,	0X7000EAC0);
	op_plain_offset	(x,	129,	0X7000EAC0);
	create_insn	(x=0X10AAB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AABA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AABE);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AACA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AAD2);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AADC);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AAE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AAE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AAF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AAF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AB04);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AB0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AB1A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AB1E);
	op_plain_offset	(x,	1,	0X7000EAC0);
	op_plain_offset	(x,	129,	0X7000EAC0);
	create_insn	(x=0X10AB20);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AB22);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AB26);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AB32);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AB3A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AB44);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AB48);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AB4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AB58);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AB62);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AB6E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AB76);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AB84);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AB88);
	op_plain_offset	(x,	1,	0X7000EAC0);
	op_plain_offset	(x,	129,	0X7000EAC0);
	create_insn	(x=0X10AB8A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AB8C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AB90);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AB9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10ABA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X10ABAE);
	op_stkvar	(x,	1);
	create_insn	(x=0X10ABB2);
	op_stkvar	(x,	1);
	create_insn	(x=0X10ABB6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10ABC2);
	op_stkvar	(x,	1);
	create_insn	(x=0X10ABCC);
	op_stkvar	(x,	1);
	create_insn	(x=0X10ABD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X10ABDA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10ABDE);
	op_stkvar	(x,	1);
	create_insn	(x=0X10ABF0);
	op_plain_offset	(x,	1,	0X7000EAC0);
	op_plain_offset	(x,	129,	0X7000EAC0);
	create_dword	(0X10ABF4);
	create_dword	(x=0X10ABF8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X10ABFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AC0A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AC1A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AC1E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AC2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AC30);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AC3E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AC50);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AC60);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AC66);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AC68);
	op_plain_offset	(x,	1,	0X7000EAC0);
	op_plain_offset	(x,	129,	0X7000EAC0);
	create_insn	(x=0X10AC6A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AC78);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AC88);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AC8C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AC9A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AC9E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10ACAE);
	op_stkvar	(x,	1);
	create_insn	(x=0X10ACC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X10ACD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X10ACD6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10ACD8);
	op_plain_offset	(x,	1,	0X7000EAC0);
	op_plain_offset	(x,	129,	0X7000EAC0);
	create_insn	(x=0X10ACDA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10ACE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X10ACF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X10ACFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AD0A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AD0E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AD1E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AD30);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AD40);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AD46);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AD48);
	op_plain_offset	(x,	1,	0X7000EAC0);
	op_plain_offset	(x,	129,	0X7000EAC0);
	create_insn	(x=0X10AD4A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AD4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AD50);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AD5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AD68);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AD72);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AD76);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AD7A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AD86);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AD8A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AD92);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AD9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10ADA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X10ADAE);
	op_stkvar	(x,	1);
	create_insn	(x=0X10ADB2);
	op_stkvar	(x,	1);
	create_insn	(x=0X10ADB6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10ADC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X10ADC6);
	op_plain_offset	(x,	1,	0X7000EAC0);
	op_plain_offset	(x,	129,	0X7000EAC0);
	create_insn	(x=0X10ADC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X10ADD6);
	op_stkvar	(x,	1);
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_2(void) {
        auto x;
#define id x

	create_insn	(x=0X10ADE6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10ADEA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10ADF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X10ADFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AE2E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AE30);
	op_plain_offset	(x,	1,	0X7000EAC0);
	op_plain_offset	(x,	129,	0X7000EAC0);
	create_insn	(x=0X10AE36);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AE3A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AE3E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AE48);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AE52);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AE5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AE60);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AE64);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AE70);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AE74);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AE7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AE90);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AEA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AEB2);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AEB6);
	op_plain_offset	(x,	1,	0X7000EB00);
	op_plain_offset	(x,	129,	0X7000EB00);
	create_insn	(x=0X10AEB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AEC6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AED6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AEDA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AEE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AEEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AF24);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AF28);
	op_plain_offset	(x,	1,	0X7000EB00);
	op_plain_offset	(x,	129,	0X7000EB00);
	create_insn	(x=0X10AF2A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AF38);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AF48);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AF4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AF5A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AF5E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AF96);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AF9A);
	op_plain_offset	(x,	1,	0X7000EB00);
	op_plain_offset	(x,	129,	0X7000EB00);
	create_insn	(x=0X10AF9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AFAA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AFBA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AFBE);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AFCC);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AFD0);
	op_stkvar	(x,	1);
	create_dword	(0X10B00C);
	create_dword	(x=0X10B010);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X10B014);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B016);
	op_plain_offset	(x,	1,	0X7000EB00);
	op_plain_offset	(x,	129,	0X7000EB00);
	create_insn	(x=0X10B018);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B026);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B036);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B03A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B048);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B04C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B080);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B082);
	op_plain_offset	(x,	1,	0X7000EB00);
	op_plain_offset	(x,	129,	0X7000EB00);
	create_insn	(x=0X10B084);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B092);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B0A2);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B0A6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B0B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B0B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B0FA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B0FC);
	op_plain_offset	(x,	1,	0X7000EB00);
	op_plain_offset	(x,	129,	0X7000EB00);
	create_insn	(x=0X10B0FE);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B10C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B11C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B120);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B12E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B132);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B176);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B178);
	op_plain_offset	(x,	1,	0X7000EB00);
	op_plain_offset	(x,	129,	0X7000EB00);
	create_insn	(x=0X10B17A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B188);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B198);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B19C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B1AA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B1AE);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B1F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B1FA);
	op_plain_offset	(x,	1,	0X7000EB00);
	op_plain_offset	(x,	129,	0X7000EB00);
	create_insn	(x=0X10B1FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B20A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B21A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B21E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B22C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B230);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B27A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B27C);
	op_plain_offset	(x,	1,	0X7000EB00);
	op_plain_offset	(x,	129,	0X7000EB00);
	create_insn	(x=0X10B27E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B28C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B29C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B2A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B2AE);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B2B2);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B2FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B2FE);
	op_plain_offset	(x,	1,	0X7000EB00);
	op_plain_offset	(x,	129,	0X7000EB00);
	create_insn	(x=0X10B300);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B30E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B31E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B322);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B330);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B334);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B37A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B37C);
	op_plain_offset	(x,	1,	0X7000EB00);
	op_plain_offset	(x,	129,	0X7000EB00);
	create_insn	(x=0X10B37E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B38C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B39C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B3A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B3AE);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B3B2);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B3E6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B3E8);
	op_plain_offset	(x,	1,	0X7000EB00);
	op_plain_offset	(x,	129,	0X7000EB00);
	create_insn	(x=0X10B3EA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B3F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B408);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B40C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B41A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B41E);
	op_stkvar	(x,	1);
	create_dword	(0X10B428);
	create_dword	(x=0X10B42C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X10B430);
	create_insn	(x=0X10B45E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B460);
	op_plain_offset	(x,	1,	0X7000EB00);
	op_plain_offset	(x,	129,	0X7000EB00);
	create_insn	(x=0X10B462);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B470);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B480);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B484);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B492);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B496);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B4D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B4D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B4E6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B4F6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B4FA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B508);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B50C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B54A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B54C);
	op_plain_offset	(x,	1,	0X7000EB40);
	op_plain_offset	(x,	129,	0X7000EB40);
	create_insn	(x=0X10B54E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B55C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B56C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B570);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B57E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B582);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B5C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B5C2);
	op_plain_offset	(x,	1,	0X7000EB40);
	op_plain_offset	(x,	129,	0X7000EB40);
	create_insn	(x=0X10B5C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B5D2);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B5E2);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B5E6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B5F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B5F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B636);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B638);
	op_plain_offset	(x,	1,	0X7000EB40);
	op_plain_offset	(x,	129,	0X7000EB40);
	create_insn	(x=0X10B63A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B648);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B658);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B65C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B66A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B66E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B6AC);
	op_plain_offset	(x,	1,	0X7000EB40);
	op_plain_offset	(x,	129,	0X7000EB40);
	create_insn	(x=0X10B6AE);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B6B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B6B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B6C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B6C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B6D2);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B6D6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B6DA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B6E6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B6EE);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B6FE);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B70E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B71E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B72C);
	op_plain_offset	(x,	1,	0X7000EB40);
	op_plain_offset	(x,	129,	0X7000EB40);
	create_insn	(x=0X10B72E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B730);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B734);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B740);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B748);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B752);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B756);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B75A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B766);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B76E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B77E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B78E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B7A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B7AE);
	op_plain_offset	(x,	1,	0X7000EB40);
	op_plain_offset	(x,	129,	0X7000EB40);
	create_insn	(x=0X10B7B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B7B2);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B7B6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B7C2);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B7CA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B7D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B7D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B7DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B7E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B7F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B804);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B816);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B828);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B836);
	op_plain_offset	(x,	1,	0X7000EB40);
	op_plain_offset	(x,	129,	0X7000EB40);
	create_insn	(x=0X10B838);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B83A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B83E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B84A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B852);
	op_stkvar	(x,	1);
	create_dword	(x=0X10B85C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X10B860);
	create_insn	(0X10B864);
	create_insn	(x=0X10B866);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B86A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B86E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B87A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B884);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B896);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B8A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B8BA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B8C6);
	op_plain_offset	(x,	1,	0X7000EB40);
	op_plain_offset	(x,	129,	0X7000EB40);
	create_insn	(x=0X10B8C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B8CA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B8CE);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B8DA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B8E2);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B8EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B8F6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B8FE);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B908);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B910);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B91A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B922);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B92C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B934);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B93E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B946);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B950);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B95A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B964);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B96E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B980);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B992);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B9A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B9B0);
	op_plain_offset	(x,	1,	0X7000EB40);
	op_plain_offset	(x,	129,	0X7000EB40);
	create_insn	(x=0X10B9B2);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B9B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B9B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B9C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B9CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B9D6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B9DA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B9DE);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B9EA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B9F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BA06);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BA18);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BA2A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BA36);
	op_plain_offset	(x,	1,	0X7000EB40);
	op_plain_offset	(x,	129,	0X7000EB40);
	create_insn	(x=0X10BA38);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BA3A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BA3E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BA4A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BA52);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BA5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BA60);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BA64);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BA70);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BA7A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BA8C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BA9E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BAAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BABA);
	op_plain_offset	(x,	1,	0X7000EB40);
	op_plain_offset	(x,	129,	0X7000EB40);
	create_insn	(x=0X10BABC);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BABE);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BAC2);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BACE);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BAD6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BAE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BAE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BAE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BAF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BAFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BB0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BB1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BB2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BB38);
	op_plain_offset	(x,	1,	0X7000EB40);
	op_plain_offset	(x,	129,	0X7000EB40);
	create_insn	(x=0X10BB3A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BB3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BB40);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BB4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BB54);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BB5E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BB62);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BB66);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BB72);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BB7A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BB8A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BB9A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BBAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BBB8);
	op_plain_offset	(x,	1,	0X7000EB40);
	op_plain_offset	(x,	129,	0X7000EB40);
	create_insn	(x=0X10BBBA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BBBC);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BBC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BBCC);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BBD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BBDE);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BBE2);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BBE6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BBF2);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BBFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BC0E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BC20);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BC32);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BC3E);
	op_plain_offset	(x,	1,	0X7000EB40);
	op_plain_offset	(x,	129,	0X7000EB40);
	create_insn	(x=0X10BC40);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BC42);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BC46);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BC52);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BC5A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BC64);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BC68);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BC6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BC78);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BC82);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BC94);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BCA6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BCB8);
	op_stkvar	(x,	1);
	create_dword	(x=0X10BCC0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X10BCC4);
	create_insn	(0X10BCC8);
	create_insn	(x=0X10BCCE);
	op_plain_offset	(x,	1,	0X7000EB40);
	op_plain_offset	(x,	129,	0X7000EB40);
	create_insn	(x=0X10BCD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BCD2);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BCD6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BCE2);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BCEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BCF6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BD00);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BD0A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BD0E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BD1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BD20);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BD24);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BD30);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BD3A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BD4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BD5E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BD70);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BD80);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BD82);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BD86);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BD92);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BD9A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BDA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BDAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BDB6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BDBE);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BDC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BDD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BDDA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BDE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BDEE);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BDF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BE02);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BE06);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BE14);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BE18);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BE1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BE28);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BE30);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BE3A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BE44);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BE56);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BE68);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BE7A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BE88);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BE8A);
	op_plain_offset	(x,	1,	0X7000EB80);
	op_plain_offset	(x,	129,	0X7000EB80);
	create_insn	(x=0X10BEAE);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BEBA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BEC2);
	op_plain_offset	(x,	1,	0X7000EB80);
	op_plain_offset	(x,	129,	0X7000EB80);
	create_insn	(x=0X10BEE6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BEF2);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BEFA);
	op_plain_offset	(x,	1,	0X7000EB80);
	op_plain_offset	(x,	129,	0X7000EB80);
	create_insn	(x=0X10BEFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BEFE);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BF0E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BF12);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BF1E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BF28);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BF32);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BF36);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BF42);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BF4A);
	op_plain_offset	(x,	1,	0X7000EB80);
	op_plain_offset	(x,	129,	0X7000EB80);
	create_insn	(x=0X10BF4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BF5A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BF6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BF7E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BF82);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BF90);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BFA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BFA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BFB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BFB8);
	op_plain_offset	(x,	1,	0X7000EB80);
	op_plain_offset	(x,	129,	0X7000EB80);
	create_insn	(x=0X10BFBA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BFC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BFDA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BFEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BFFE);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C002);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C014);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C026);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C038);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C04A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C05C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C06E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C080);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C092);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C0A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C0B6);
	op_stkvar	(x,	1);
	create_dword	(x=0X10C0C8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X10C0CC);
	create_dword	(0X10C0D0);
	create_insn	(0X10C0D4);
	create_insn	(x=0X10C0D6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C0E6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C0EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C0EE);
	op_plain_offset	(x,	1,	0X7000EB80);
	op_plain_offset	(x,	129,	0X7000EB80);
	create_insn	(x=0X10C0F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C0FE);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C110);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C122);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C134);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C138);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C144);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C14A);
	op_plain_offset	(x,	1,	0X7000EB80);
	op_plain_offset	(x,	129,	0X7000EB80);
	create_insn	(x=0X10C14C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C15A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C16C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C17E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C190);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C194);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C1A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C1A6);
	op_plain_offset	(x,	1,	0X7000EB80);
	op_plain_offset	(x,	129,	0X7000EB80);
	create_insn	(x=0X10C1A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C1B6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C1C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C1DA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C1EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C21A);
	op_plain_offset	(x,	1,	0X7000EB80);
	op_plain_offset	(x,	129,	0X7000EB80);
	create_insn	(x=0X10C21E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C222);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C234);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C246);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C258);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C26A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C27C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C28E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C29A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C29E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C2AA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C2AE);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C2BA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C2BE);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C2C2);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C2CE);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C2D2);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C2DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C2E2);
	op_plain_offset	(x,	1,	0X7000EB80);
	op_plain_offset	(x,	129,	0X7000EB80);
	create_insn	(x=0X10C2E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C2E6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C2FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C30E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C320);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C32C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C330);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C33A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C340);
	op_plain_offset	(x,	1,	0X7000EB80);
	op_plain_offset	(x,	129,	0X7000EB80);
	create_insn	(x=0X10C342);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C346);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C354);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C36C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C37E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C38A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C38E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C39A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C3A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C3AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C3B2);
	op_plain_offset	(x,	1,	0X7000EB80);
	op_plain_offset	(x,	129,	0X7000EB80);
	create_insn	(x=0X10C3B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C3B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C3C6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C3DA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C3EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C3FA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C40C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C41E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C42A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C432);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C43E);
	op_plain_offset	(x,	1,	0X7000EB80);
	op_plain_offset	(x,	129,	0X7000EB80);
	create_insn	(x=0X10C440);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C444);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C458);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C46A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C47C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C488);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C48C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C498);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C49C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C4A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C4AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C4B6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C4C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C4D4);
	op_plain_offset	(x,	1,	0X7000EB80);
	op_plain_offset	(x,	129,	0X7000EB80);
	create_insn	(x=0X10C4D6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C4D8);
	op_stkvar	(x,	1);
	create_dword	(x=0X10C4E8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X10C4EC);
	create_insn	(x=0X10C4F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C506);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C518);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C526);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C538);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C544);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C548);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C554);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C55E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C568);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C572);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C57C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C582);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C594);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C5A0);
	op_plain_offset	(x,	1,	0X7000EB80);
	op_plain_offset	(x,	129,	0X7000EB80);
	create_insn	(x=0X10C5A2);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C5A6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C5BA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C5CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C5DE);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C5EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C5FE);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C60E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C61E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C62A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C62E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C63A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C642);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C652);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C662);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C664);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C668);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C674);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C67C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C686);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C68E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C698);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C6A2);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C6AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C6B6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C6C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C6CA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C6D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C6DE);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C6E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C6F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C6FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C706);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C710);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C714);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C718);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C724);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C728);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C732);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C73C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C746);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C750);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C75A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C764);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C76E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C778);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C780);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C78A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C792);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C79C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C7A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C7B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C7C2);
	op_plain_offset	(x,	1,	0X7000EBC0);
	op_plain_offset	(x,	129,	0X7000EBC0);
	create_insn	(x=0X10C7C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C7C6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C7CA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C7D6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C7DE);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C7E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C7F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C7FA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C804);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C80E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C818);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C822);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C82C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C836);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C840);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C84A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C854);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C85E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C868);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C872);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C876);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C87A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C886);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C88A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C88E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C89A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C8A2);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C8B2);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C8C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C8D6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C8E4);
	op_plain_offset	(x,	1,	0X7000EBC0);
	op_plain_offset	(x,	129,	0X7000EBC0);
	create_insn	(x=0X10C8E6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C8E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C8EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C8F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C902);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C90C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C910);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C91E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C922);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C926);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C932);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C936);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C93A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C946);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C950);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C95A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C95E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C96C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C976);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C988);
	op_stkvar	(x,	1);
	create_dword	(x=0X10C99C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X10C9A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C9B2);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C9BE);
	op_plain_offset	(x,	1,	0X7000EBC0);
	op_plain_offset	(x,	129,	0X7000EBC0);
	create_insn	(x=0X10C9C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C9C2);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C9C6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C9D2);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C9DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C9E6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C9EA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C9F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X10C9FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CA00);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CA0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CA10);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CA14);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CA20);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CA2A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CA3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CA4E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CA60);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CA6C);
	op_plain_offset	(x,	1,	0X7000EBC0);
	op_plain_offset	(x,	129,	0X7000EBC0);
	create_insn	(x=0X10CA72);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CA76);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CA7A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CA86);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CA8E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CA98);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CAA2);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CAAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CAB6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CAC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CACA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CAD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CADE);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CAE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CAEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CAEE);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CAF2);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CB00);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CB04);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CB10);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CB14);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CB18);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CB24);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CB2E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CB40);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CB52);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CB64);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CB70);
	op_plain_offset	(x,	1,	0X7000EBC0);
	op_plain_offset	(x,	129,	0X7000EBC0);
	create_insn	(x=0X10CB72);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CB74);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CB78);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CB84);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CB8C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CB96);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CBA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CBAA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CBB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CBBE);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CBC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CBD2);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CBDC);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CBE6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CBEA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CBEE);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CBFA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CBFE);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CC02);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CC0E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CC18);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CC2A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CC3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CC4E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CC5A);
	op_plain_offset	(x,	1,	0X7000EBC0);
	op_plain_offset	(x,	129,	0X7000EBC0);
	create_insn	(x=0X10CC5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CC5E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CC62);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CC6E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CC76);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CC80);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CC8A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CC94);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CC9E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CCA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CCB2);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CCBC);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CCC6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CCD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CCDA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CCEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CCFA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CD0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CD1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CD2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CD3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CD4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CD5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CD6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CD7E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CD90);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CDA2);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CDB4);
	op_stkvar	(x,	1);
	create_dword	(x=0X10CDB8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X10CDBC);
	create_insn	(x=0X10CDC6);
	op_plain_offset	(x,	1,	0X7000EBC0);
	op_plain_offset	(x,	129,	0X7000EBC0);
	create_insn	(x=0X10CDC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CDCA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CDCE);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CDDA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CDE2);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CDEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CDF6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CE00);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CE0A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CE14);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CE1E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CE28);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CE32);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CE3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CE46);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CE58);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CE6A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CE7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CE8E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CEA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CEB2);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CEC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CED6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CEE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CEFA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CF0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CF1A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CF2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CF38);
	op_plain_offset	(x,	1,	0X7000EBC0);
	op_plain_offset	(x,	129,	0X7000EBC0);
	create_insn	(x=0X10CF3A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CF3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CF40);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CF4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CF54);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CF5E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CF68);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CF72);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CF7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CF86);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CF90);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CF9A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CFA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CFAE);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CFB6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CFC6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CFD6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CFE6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10CFF6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D006);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D018);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D02A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D03C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D04E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D060);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D072);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D084);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D096);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D0A2);
	op_plain_offset	(x,	1,	0X7000EBC0);
	op_plain_offset	(x,	129,	0X7000EBC0);
	create_insn	(x=0X10D0A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D0A6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D0AA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D0B6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D0BE);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D0C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D0D2);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D0DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D0E6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D0F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D0FA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D104);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D10E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D118);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D122);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D134);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D146);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D158);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D16A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D17C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D18E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D1A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D1AC);
	op_stkvar	(x,	1);
	create_dword	(x=0X10D1C0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X10D1C4);
	create_insn	(x=0X10D1C6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D1D6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D1E6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D1F6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D206);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D212);
	op_plain_offset	(x,	1,	0X7000EBC0);
	op_plain_offset	(x,	129,	0X7000EBC0);
	create_insn	(x=0X10D214);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D216);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D21A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D226);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D22E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D238);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D242);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D24C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D256);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D260);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D26A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D274);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D27E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D288);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D290);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D2A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D2B2);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D2C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D2D6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D2E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D2FA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D30C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D31E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D330);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D342);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D354);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D366);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D378);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D384);
	op_plain_offset	(x,	1,	0X7000EBC0);
	op_plain_offset	(x,	129,	0X7000EBC0);
	create_insn	(x=0X10D386);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D388);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D38C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D398);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D3A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D3AA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D3B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D3BE);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D3C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D3D2);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D3DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D3E6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D3F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D3FA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D404);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D416);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D428);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D43A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D448);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D45A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D46A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D47A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D48A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D49A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D4AA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D4BA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D4CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D4DE);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D4EA);
	op_plain_offset	(x,	1,	0X7000EBC0);
	op_plain_offset	(x,	129,	0X7000EBC0);
	create_insn	(x=0X10D4EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D4F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D502);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D512);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D522);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D534);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D546);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D558);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D56A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D57C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D58E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D5A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D5B2);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D5C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D5D6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D5E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D5FA);
	op_stkvar	(x,	1);
	create_dword	(x=0X10D60C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X10D610);
	create_insn	(x=0X10D612);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D624);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D636);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D648);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D65A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D66C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D67E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D68A);
	op_plain_offset	(x,	1,	0X7000EBC0);
	op_plain_offset	(x,	129,	0X7000EBC0);
	create_insn	(x=0X10D7BA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D7BC);
	op_plain_offset	(x,	1,	0X7000EBC0);
	op_plain_offset	(x,	129,	0X7000EBC0);
	create_insn	(x=0X10D7BE);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D7CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D7DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D7EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D7FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D80C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D81C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D82C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D83C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D84E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D860);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D872);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D884);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D896);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D8A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D8BA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D8CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D8DE);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D8E2);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D8F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D902);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D910);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D916);
	op_plain_offset	(x,	1,	0X7000EBC0);
	op_plain_offset	(x,	129,	0X7000EBC0);
	create_insn	(x=0X10D91A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D91E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D92E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D940);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D948);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D95A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D96C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D97E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D990);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D9A2);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D9B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D9C6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D9D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D9EA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10D9F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X10DA0A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10DA1A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10DA2A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10DA3A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10DA4A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10DA4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10DA50);
	op_stkvar	(x,	1);
	create_insn	(x=0X10DA5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10DA66);
	op_stkvar	(x,	1);
	create_insn	(x=0X10DA70);
	op_stkvar	(x,	1);
	create_insn	(x=0X10DA7A);
	op_stkvar	(x,	1);
	create_dword	(x=0X10DA84);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X10DA88);
	create_insn	(x=0X10DA8A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10DA94);
	op_stkvar	(x,	1);
	create_insn	(x=0X10DA9E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10DAA6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10DAB6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10DAC6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10DAD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X10DAEA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10DAFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X10DB0E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10DB20);
	op_stkvar	(x,	1);
	create_insn	(x=0X10DB32);
	op_stkvar	(x,	1);
	create_insn	(x=0X10DB44);
	op_stkvar	(x,	1);
	create_insn	(x=0X10DB56);
	op_stkvar	(x,	1);
	create_insn	(x=0X10DB68);
	op_stkvar	(x,	1);
	create_insn	(x=0X10DB7A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10DB8C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10DB9E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10DBAA);
	op_plain_offset	(x,	1,	0X7000EC00);
	op_plain_offset	(x,	129,	0X7000EC00);
	create_insn	(x=0X10DBAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X10DBB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X10DBC2);
	op_stkvar	(x,	1);
	create_insn	(x=0X10DBD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X10DBE6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10DBF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X10DC0A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10DC1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10DC2E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10DC40);
	op_stkvar	(x,	1);
	create_insn	(x=0X10DC52);
	op_stkvar	(x,	1);
	create_insn	(x=0X10DC64);
	op_stkvar	(x,	1);
	create_insn	(x=0X10DC76);
	op_stkvar	(x,	1);
	create_insn	(x=0X10DC88);
	op_stkvar	(x,	1);
	create_insn	(x=0X10DC9A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10DCA6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10DCAA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10DCBA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10DCCA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10DCDA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10DCEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X10DCFE);
	op_stkvar	(x,	1);
	create_insn	(x=0X10DD10);
	op_stkvar	(x,	1);
	create_insn	(x=0X10DD22);
	op_stkvar	(x,	1);
	create_insn	(x=0X10DD34);
	op_stkvar	(x,	1);
	create_insn	(x=0X10DD46);
	op_stkvar	(x,	1);
	create_insn	(x=0X10DD58);
	op_stkvar	(x,	1);
	create_insn	(x=0X10DD64);
	op_stkvar	(x,	1);
	create_insn	(x=0X10DD66);
	op_plain_offset	(x,	1,	0X7000EC00);
	op_plain_offset	(x,	129,	0X7000EC00);
	create_insn	(x=0X10DD68);
	op_stkvar	(x,	1);
	create_insn	(x=0X10DD76);
	op_stkvar	(x,	1);
	create_insn	(x=0X10DD86);
	op_stkvar	(x,	1);
	create_insn	(x=0X10DDD2);
	op_plain_offset	(x,	1,	0X7000EC00);
	op_plain_offset	(x,	129,	0X7000EC00);
	create_insn	(x=0X10DDD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X10DDE2);
	op_stkvar	(x,	1);
	create_insn	(x=0X10DE1C);
	op_plain_offset	(x,	1,	0X7000EC00);
	op_plain_offset	(x,	129,	0X7000EC00);
	create_insn	(x=0X10DE1E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10DE2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10DE3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10DE4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10DE5E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10DE70);
	op_stkvar	(x,	1);
	create_insn	(x=0X10DE82);
	op_stkvar	(x,	1);
	create_insn	(x=0X10DE88);
	op_stkvar	(x,	1);
	create_insn	(x=0X10DE92);
	op_stkvar	(x,	1);
	create_insn	(x=0X10DE96);
	op_plain_offset	(x,	1,	0X7000EC00);
	op_plain_offset	(x,	129,	0X7000EC00);
	create_insn	(x=0X10DE98);
	op_stkvar	(x,	1);
	create_insn	(x=0X10DEA6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10DEB6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10DEC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X10DEDA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10DEE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X10DEEA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10DEF0);
	op_plain_offset	(x,	1,	0X7000EC00);
	op_plain_offset	(x,	129,	0X7000EC00);
	create_insn	(x=0X10DEF2);
	op_stkvar	(x,	1);
	create_insn	(x=0X10DF28);
	op_stkvar	(x,	1);
	create_dword	(x=0X10DFA4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X10DFA8);
	create_insn	(0X10DFAC);
	create_insn	(x=0X10DFC4);
	op_plain_offset	(x,	1,	0X7000EC00);
	op_plain_offset	(x,	129,	0X7000EC00);
	create_insn	(x=0X10DFF2);
	op_plain_offset	(x,	1,	0X7000E440);
	op_plain_offset	(x,	129,	0X7000E440);
	create_insn	(x=0X10DFF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X10DFFA);
	op_plain_offset	(x,	1,	0X7000E440);
	op_plain_offset	(x,	129,	0X7000E440);
	create_insn	(x=0X10DFFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X10E002);
	op_plain_offset	(x,	1,	0X7000E440);
	op_plain_offset	(x,	129,	0X7000E440);
	create_insn	(x=0X10E004);
	op_stkvar	(x,	1);
	create_insn	(x=0X10E00C);
	op_plain_offset	(x,	1,	0X7000E440);
	op_plain_offset	(x,	129,	0X7000E440);
	create_insn	(x=0X10E010);
	op_stkvar	(x,	1);
	create_insn	(x=0X10E01A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10E028);
	op_plain_offset	(x,	1,	0X7000E500);
	op_plain_offset	(x,	129,	0X7000E500);
	create_insn	(x=0X10E02C);
	op_plain_offset	(x,	1,	0X7000E500);
	op_plain_offset	(x,	129,	0X7000E500);
	create_insn	(x=0X10E030);
	op_plain_offset	(x,	1,	0X7000E500);
	op_plain_offset	(x,	129,	0X7000E500);
	create_insn	(x=0X10E034);
	op_plain_offset	(x,	1,	0X7000E500);
	op_plain_offset	(x,	129,	0X7000E500);
	create_insn	(x=0X10E03A);
	op_plain_offset	(x,	1,	0X7000E540);
	op_plain_offset	(x,	129,	0X7000E540);
	create_insn	(x=0X10E042);
	op_plain_offset	(x,	1,	0X7000E600);
	op_plain_offset	(x,	129,	0X7000E600);
	create_insn	(x=0X10E046);
	op_plain_offset	(x,	1,	0X7000E600);
	op_plain_offset	(x,	129,	0X7000E600);
	create_insn	(x=0X10E04A);
	op_plain_offset	(x,	1,	0X7000E600);
	op_plain_offset	(x,	129,	0X7000E600);
	create_insn	(x=0X10E04E);
	op_plain_offset	(x,	1,	0X7000E600);
	op_plain_offset	(x,	129,	0X7000E600);
	create_insn	(x=0X10E058);
	op_plain_offset	(x,	1,	0X7000E640);
	op_plain_offset	(x,	129,	0X7000E640);
	create_insn	(x=0X10E05C);
	op_plain_offset	(x,	1,	0X7000E640);
	op_plain_offset	(x,	129,	0X7000E640);
	create_insn	(x=0X10E06A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10E06E);
	op_plain_offset	(x,	1,	0X7000EA00);
	op_plain_offset	(x,	129,	0X7000EA00);
	create_insn	(x=0X10E070);
	op_stkvar	(x,	1);
	create_insn	(x=0X10E074);
	op_plain_offset	(x,	1,	0X7000EA00);
	op_plain_offset	(x,	129,	0X7000EA00);
	create_insn	(x=0X10E076);
	op_stkvar	(x,	1);
	create_insn	(x=0X10E07C);
	op_plain_offset	(x,	1,	0X7000EA00);
	op_plain_offset	(x,	129,	0X7000EA00);
	create_insn	(x=0X10E082);
	op_stkvar	(x,	1);
	create_insn	(x=0X10E088);
	op_stkvar	(x,	1);
	create_insn	(x=0X10E08C);
	op_plain_offset	(x,	1,	0X7000EA00);
	op_plain_offset	(x,	129,	0X7000EA00);
	create_insn	(x=0X10E09E);
	op_plain_offset	(x,	1,	0X7000EA00);
	op_plain_offset	(x,	129,	0X7000EA00);
	create_insn	(x=0X10E0AC);
	op_plain_offset	(x,	1,	0X7000EA00);
	op_plain_offset	(x,	129,	0X7000EA00);
	create_insn	(x=0X10E0AE);
	op_stkvar	(x,	1);
	create_insn	(x=0X10E0B4);
	op_plain_offset	(x,	1,	0X7000EA00);
	op_plain_offset	(x,	129,	0X7000EA00);
	create_insn	(x=0X10E0BA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10E0C4);
	op_plain_offset	(x,	1,	0X7000EA00);
	op_plain_offset	(x,	129,	0X7000EA00);
	create_insn	(x=0X10E0CC);
	op_plain_offset	(x,	1,	0X7000EA00);
	op_plain_offset	(x,	129,	0X7000EA00);
	create_insn	(x=0X10E0D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X10E0DA);
	op_plain_offset	(x,	1,	0X7000EA40);
	op_plain_offset	(x,	129,	0X7000EA40);
	create_insn	(x=0X10E0DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X10E0E2);
	op_plain_offset	(x,	1,	0X7000EA40);
	op_plain_offset	(x,	129,	0X7000EA40);
	create_insn	(x=0X10E0E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X10E0F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X10E0F6);
	op_plain_offset	(x,	1,	0X7000EA80);
	op_plain_offset	(x,	129,	0X7000EA80);
	create_insn	(x=0X10E0F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X10E0FE);
	op_plain_offset	(x,	1,	0X7000EA80);
	op_plain_offset	(x,	129,	0X7000EA80);
	create_insn	(x=0X10E100);
	op_stkvar	(x,	1);
	create_insn	(x=0X10E108);
	op_plain_offset	(x,	1,	0X7000EC00);
	op_plain_offset	(x,	129,	0X7000EC00);
	create_insn	(x=0X10E10A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10E114);
	op_stkvar	(x,	1);
	create_insn	(x=0X10E11A);
	op_plain_offset	(x,	1,	0X7000E440);
	op_plain_offset	(x,	129,	0X7000E440);
	create_insn	(x=0X10E11C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10E12A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10E12E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10E13C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10E14E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10E15C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10E162);
	op_stkvar	(x,	1);
	create_insn	(x=0X10E164);
	op_plain_offset	(x,	1,	0X7000E440);
	op_plain_offset	(x,	129,	0X7000E440);
	create_insn	(x=0X10E166);
	op_stkvar	(x,	1);
	create_insn	(x=0X10E174);
	op_stkvar	(x,	1);
	create_insn	(x=0X10E178);
	op_stkvar	(x,	1);
	create_insn	(x=0X10E186);
	op_stkvar	(x,	1);
	create_insn	(x=0X10E198);
	op_stkvar	(x,	1);
	create_insn	(x=0X10E1A0);
	op_plain_offset	(x,	1,	0X7000E440);
	op_plain_offset	(x,	129,	0X7000E440);
	create_insn	(x=0X10E1A2);
	op_stkvar	(x,	1);
	create_insn	(x=0X10E1B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X10E1B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X10E1C2);
	op_stkvar	(x,	1);
	create_insn	(x=0X10E1D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X10E1E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X10E1EA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10E1F6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10E206);
	op_stkvar	(x,	1);
	create_insn	(x=0X10E20C);
	op_stkvar	(x,	1);
	create_insn	(0X10E216);
	create_insn	(0X10E218);
	create_insn	(x=0X10E21E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10E22C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10E232);
	op_stkvar	(x,	1);
	create_insn	(x=0X10E240);
	op_stkvar	(x,	1);
	create_insn	(x=0X10E244);
	op_stkvar	(x,	1);
	create_insn	(x=0X10E248);
	op_plain_offset	(x,	1,	0X7000E440);
	op_plain_offset	(x,	129,	0X7000E440);
	create_insn	(x=0X10E24A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10E258);
	op_stkvar	(x,	1);
	create_insn	(x=0X10E26A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10E27C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10E28C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10E290);
	op_stkvar	(x,	1);
	create_insn	(x=0X10E29C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10E2AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X10E2BE);
	op_stkvar	(x,	1);
	create_insn	(x=0X10E2CE);
	op_stkvar	(x,	1);
	create_insn	(x=0X10E2DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X10E2EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X10E2F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X10E2FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X10E30C);
	op_stkvar	(x,	1);
	create_insn	(0X10E312);
	create_insn	(x=0X10E31C);
	op_plain_offset	(x,	1,	0X7000E440);
	op_plain_offset	(x,	129,	0X7000E440);
	create_insn	(x=0X10E31E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10E32E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10E33C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10E35C);
	op_plain_offset	(x,	1,	0X7000E440);
	op_plain_offset	(x,	129,	0X7000E440);
	create_insn	(x=0X10E366);
	op_stkvar	(x,	1);
	create_insn	(x=0X10E386);
	op_stkvar	(x,	1);
	create_insn	(x=0X10E398);
	op_stkvar	(x,	1);
	create_insn	(x=0X10E3BC);
	op_plain_offset	(x,	1,	0X7000E440);
	op_plain_offset	(x,	129,	0X7000E440);
	create_dword	(x=0X10E3C0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X10E3C4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X10E3C8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X10E3CC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X10E3D0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X10E3D4);
	create_insn	(x=0X10E436);
	op_plain_offset	(x,	1,	0X7000E440);
	op_plain_offset	(x,	129,	0X7000E440);
	create_insn	(x=0X10E49A);
	op_plain_offset	(x,	1,	0X7000E440);
	op_plain_offset	(x,	129,	0X7000E440);
	create_insn	(x=0X10E4FE);
	op_plain_offset	(x,	1,	0X7000E440);
	op_plain_offset	(x,	129,	0X7000E440);
	create_insn	(x=0X10E5CA);
	op_plain_offset	(x,	1,	0X7000E480);
	op_plain_offset	(x,	129,	0X7000E480);
	create_insn	(x=0X10E630);
	op_plain_offset	(x,	1,	0X7000E480);
	op_plain_offset	(x,	129,	0X7000E480);
	create_insn	(x=0X10E696);
	op_plain_offset	(x,	1,	0X7000E480);
	op_plain_offset	(x,	129,	0X7000E480);
	create_insn	(x=0X10E6E0);
	op_plain_offset	(x,	1,	0X7000E480);
	op_plain_offset	(x,	129,	0X7000E480);
	create_insn	(x=0X10E728);
	op_plain_offset	(x,	1,	0X7000E480);
	op_plain_offset	(x,	129,	0X7000E480);
	create_insn	(x=0X10E76E);
	op_plain_offset	(x,	1,	0X7000E480);
	op_plain_offset	(x,	129,	0X7000E480);
	create_insn	(x=0X10E7B4);
	op_plain_offset	(x,	1,	0X7000E480);
	op_plain_offset	(x,	129,	0X7000E480);
	create_insn	(x=0X10E7FA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10E808);
	op_stkvar	(x,	1);
	create_insn	(x=0X10E818);
	op_stkvar	(x,	1);
	create_insn	(x=0X10E82A);
	op_stkvar	(x,	1);
	create_dword	(x=0X10E830);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X10E834);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X10E838);
	create_insn	(x=0X10E846);
	op_stkvar	(x,	1);
	create_insn	(x=0X10E858);
	op_stkvar	(x,	1);
	create_insn	(x=0X10E86A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10E878);
	op_stkvar	(x,	1);
	create_insn	(x=0X10E886);
	op_stkvar	(x,	1);
	create_insn	(x=0X10E88C);
	op_plain_offset	(x,	1,	0X7000E700);
	op_plain_offset	(x,	129,	0X7000E700);
	create_insn	(x=0X10E8EC);
	op_plain_offset	(x,	1,	0X7000E700);
	op_plain_offset	(x,	129,	0X7000E700);
	create_insn	(x=0X10E94E);
	op_plain_offset	(x,	1,	0X7000E700);
	op_plain_offset	(x,	129,	0X7000E700);
	create_insn	(x=0X10E9B0);
	op_plain_offset	(x,	1,	0X7000E700);
	op_plain_offset	(x,	129,	0X7000E700);
	create_insn	(x=0X10E9BA);
	op_plain_offset	(x,	1,	0X7000E700);
	op_plain_offset	(x,	129,	0X7000E700);
	create_insn	(x=0X10E9BE);
	op_stkvar	(x,	1);
	create_insn	(x=0X10E9CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X10E9DE);
	op_stkvar	(x,	1);
	create_insn	(x=0X10E9EE);
	op_stkvar	(x,	1);
	create_insn	(x=0X10E9FE);
	op_stkvar	(x,	1);
	create_insn	(x=0X10EA28);
	op_plain_offset	(x,	1,	0X7000E700);
	op_plain_offset	(x,	129,	0X7000E700);
	create_insn	(x=0X10EA2A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10EA38);
	op_stkvar	(x,	1);
	create_insn	(x=0X10EA46);
	op_stkvar	(x,	1);
	create_insn	(x=0X10EA56);
	op_stkvar	(x,	1);
	create_insn	(x=0X10EA66);
	op_stkvar	(x,	1);
	create_insn	(x=0X10EA78);
	op_stkvar	(x,	1);
	create_insn	(x=0X10EA84);
	op_stkvar	(x,	1);
	create_insn	(x=0X10EA88);
	op_plain_offset	(x,	1,	0X7000E700);
	op_plain_offset	(x,	129,	0X7000E700);
	create_insn	(x=0X10EA8A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10EA98);
	op_stkvar	(x,	1);
	create_insn	(x=0X10EAA6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10EAB6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10EAC6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10EAD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X10EADE);
	op_stkvar	(x,	1);
	create_insn	(x=0X10EAE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X10EAF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X10EAFA);
	op_plain_offset	(x,	1,	0X7000E700);
	op_plain_offset	(x,	129,	0X7000E700);
	create_insn	(x=0X10EAFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X10EB0A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10EB18);
	op_stkvar	(x,	1);
	create_insn	(x=0X10EB28);
	op_stkvar	(x,	1);
	create_insn	(x=0X10EB38);
	op_stkvar	(x,	1);
	create_insn	(x=0X10EB42);
	op_stkvar	(x,	1);
	create_insn	(x=0X10EB4A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10EB68);
	op_plain_offset	(x,	1,	0X7000E700);
	op_plain_offset	(x,	129,	0X7000E700);
	create_insn	(x=0X10EB6A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10EB78);
	op_stkvar	(x,	1);
	create_insn	(x=0X10EB88);
	op_stkvar	(x,	1);
	create_insn	(x=0X10EB96);
	op_stkvar	(x,	1);
	create_insn	(x=0X10EBA6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10EBB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X10EBC6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10EBCA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10EBD6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10EBDC);
	op_plain_offset	(x,	1,	0X7000E700);
	op_plain_offset	(x,	129,	0X7000E700);
	create_insn	(x=0X10EBDE);
	op_stkvar	(x,	1);
	create_insn	(x=0X10EBEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X10EBFA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10EC0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10EC1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10EC20);
	op_stkvar	(x,	1);
	create_insn	(x=0X10EC30);
	op_stkvar	(x,	1);
	create_insn	(x=0X10EC50);
	op_stkvar	(x,	1);
	create_insn	(x=0X10EC5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10EC62);
	op_plain_offset	(x,	1,	0X7000E700);
	op_plain_offset	(x,	129,	0X7000E700);
	create_insn	(x=0X10EC64);
	op_stkvar	(x,	1);
	create_insn	(x=0X10EC72);
	op_stkvar	(x,	1);
	create_insn	(x=0X10EC82);
	op_stkvar	(x,	1);
	create_dword	(x=0X10EC88);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X10EC8C);
	create_insn	(x=0X10EC98);
	op_stkvar	(x,	1);
	create_insn	(x=0X10ECA6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10ECAA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10ECB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X10ECBE);
	op_plain_offset	(x,	1,	0X7000E700);
	op_plain_offset	(x,	129,	0X7000E700);
	create_insn	(x=0X10ECC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X10ECCE);
	op_stkvar	(x,	1);
	create_insn	(x=0X10ECDE);
	op_stkvar	(x,	1);
	create_insn	(x=0X10ECEE);
	op_stkvar	(x,	1);
	create_insn	(x=0X10ECFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X10ED0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10ED14);
	op_plain_offset	(x,	1,	0X7000E740);
	op_plain_offset	(x,	129,	0X7000E740);
	create_insn	(x=0X10ED16);
	op_stkvar	(x,	1);
	create_insn	(x=0X10ED28);
	op_stkvar	(x,	1);
	create_insn	(x=0X10ED3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10ED4E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10ED60);
	op_stkvar	(x,	1);
	create_insn	(x=0X10ED70);
	op_stkvar	(x,	1);
	create_insn	(x=0X10ED84);
	op_stkvar	(x,	1);
	create_insn	(x=0X10ED94);
	op_stkvar	(x,	1);
	create_insn	(x=0X10EDA6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10EDBA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10EDCE);
	op_stkvar	(x,	1);
	create_insn	(x=0X10EDE2);
	op_stkvar	(x,	1);
	create_insn	(x=0X10EDF6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10EE0A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10EE1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10EE34);
	op_stkvar	(x,	1);
	create_insn	(x=0X10EE46);
	op_stkvar	(x,	1);
	create_insn	(x=0X10EE58);
	op_stkvar	(x,	1);
	create_insn	(x=0X10EE6A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10EE7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10EE8E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10EEA2);
	op_stkvar	(x,	1);
	create_insn	(x=0X10EEB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X10EEC6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10EEDA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10EEEE);
	op_stkvar	(x,	1);
	create_insn	(x=0X10EF02);
	op_stkvar	(x,	1);
	create_insn	(x=0X10EF16);
	op_stkvar	(x,	1);
	create_insn	(x=0X10EF2A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10EF3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10EF52);
	op_plain_offset	(x,	1,	0X7000E780);
	op_plain_offset	(x,	129,	0X7000E780);
	create_insn	(x=0X10EF54);
	op_stkvar	(x,	1);
	create_insn	(x=0X10EF62);
	op_stkvar	(x,	1);
	create_insn	(x=0X10EF74);
	op_stkvar	(x,	1);
	create_insn	(x=0X10EF86);
	op_stkvar	(x,	1);
	create_insn	(x=0X10EF98);
	op_stkvar	(x,	1);
	create_insn	(x=0X10EF9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10EFAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X10EFBC);
	op_stkvar	(x,	1);
	create_insn	(x=0X10EFC2);
	op_stkvar	(x,	1);
	create_insn	(x=0X10EFC6);
	op_plain_offset	(x,	1,	0X7000E780);
	op_plain_offset	(x,	129,	0X7000E780);
	create_insn	(x=0X10EFC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X10EFD6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10EFE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X10EFFA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F00C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F01E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F02E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F036);
	op_plain_offset	(x,	1,	0X7000E780);
	op_plain_offset	(x,	129,	0X7000E780);
	create_insn	(x=0X10F038);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F046);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F058);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F06A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F07C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F08E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F0A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F0AA);
	op_plain_offset	(x,	1,	0X7000E780);
	op_plain_offset	(x,	129,	0X7000E780);
	create_insn	(x=0X10F0AC);
	op_stkvar	(x,	1);
	create_dword	(x=0X10F0BC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X10F0C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F0D2);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F0E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F0F6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F10A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F130);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F134);
	op_plain_offset	(x,	1,	0X7000E780);
	op_plain_offset	(x,	129,	0X7000E780);
	create_insn	(x=0X10F16A);
	op_plain_offset	(x,	1,	0X7000E780);
	op_plain_offset	(x,	129,	0X7000E780);
	create_insn	(x=0X10F1AE);
	op_plain_offset	(x,	1,	0X7000E780);
	op_plain_offset	(x,	129,	0X7000E780);
	create_insn	(x=0X10F1BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F1F6);
	op_plain_offset	(x,	1,	0X7000E780);
	op_plain_offset	(x,	129,	0X7000E780);
	create_insn	(x=0X10F1F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F204);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F23E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F242);
	op_plain_offset	(x,	1,	0X7000E780);
	op_plain_offset	(x,	129,	0X7000E780);
	create_insn	(x=0X10F252);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F260);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F270);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F280);
	op_plain_offset	(x,	1,	0X7000E780);
	op_plain_offset	(x,	129,	0X7000E780);
	create_insn	(x=0X10F282);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F28E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F2BA);
	op_plain_offset	(x,	1,	0X7000E780);
	op_plain_offset	(x,	129,	0X7000E780);
	create_insn	(x=0X10F2C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F2D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F2F4);
	op_plain_offset	(x,	1,	0X7000E780);
	op_plain_offset	(x,	129,	0X7000E780);
	create_insn	(x=0X10F2F6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F302);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F352);
	op_plain_offset	(x,	1,	0X7000E780);
	op_plain_offset	(x,	129,	0X7000E780);
	create_insn	(x=0X10F3D4);
	op_plain_offset	(x,	1,	0X7000E780);
	op_plain_offset	(x,	129,	0X7000E780);
	create_insn	(x=0X10F3E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F3F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F456);
	op_plain_offset	(x,	1,	0X7000E780);
	op_plain_offset	(x,	129,	0X7000E780);
	create_insn	(x=0X10F458);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F466);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F486);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F492);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F4A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F4B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F4C6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F4D6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F4E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F4F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F4F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F50A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F50E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F51E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F530);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F536);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F544);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F554);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F566);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F578);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F58A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F59A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F5A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F5AE);
	op_plain_offset	(x,	1,	0X7000E7C0);
	op_plain_offset	(x,	129,	0X7000E7C0);
	create_insn	(x=0X10F5C2);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F5D2);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F5E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F5E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F646);
	op_plain_offset	(x,	1,	0X7000E7C0);
	op_plain_offset	(x,	129,	0X7000E7C0);
	create_insn	(x=0X10F652);
	op_plain_offset	(x,	1,	0X7000E7C0);
	op_plain_offset	(x,	129,	0X7000E7C0);
	create_insn	(x=0X10F656);
	op_plain_offset	(x,	1,	0X7000E7C0);
	op_plain_offset	(x,	129,	0X7000E7C0);
	create_insn	(x=0X10F658);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F65C);
	op_plain_offset	(x,	1,	0X7000E7C0);
	op_plain_offset	(x,	129,	0X7000E7C0);
	create_insn	(x=0X10F65E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F662);
	op_plain_offset	(x,	1,	0X7000E7C0);
	op_plain_offset	(x,	129,	0X7000E7C0);
	create_insn	(x=0X10F664);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F668);
	op_plain_offset	(x,	1,	0X7000E7C0);
	op_plain_offset	(x,	129,	0X7000E7C0);
	create_insn	(x=0X10F66A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F66E);
	op_plain_offset	(x,	1,	0X7000E7C0);
	op_plain_offset	(x,	129,	0X7000E7C0);
	create_insn	(x=0X10F670);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F674);
	op_plain_offset	(x,	1,	0X7000E7C0);
	op_plain_offset	(x,	129,	0X7000E7C0);
	create_insn	(x=0X10F676);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F67A);
	op_plain_offset	(x,	1,	0X7000E7C0);
	op_plain_offset	(x,	129,	0X7000E7C0);
	create_insn	(x=0X10F67C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F680);
	op_plain_offset	(x,	1,	0X7000E7C0);
	op_plain_offset	(x,	129,	0X7000E7C0);
	create_insn	(x=0X10F682);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F686);
	op_plain_offset	(x,	1,	0X7000E7C0);
	op_plain_offset	(x,	129,	0X7000E7C0);
	create_insn	(x=0X10F688);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F68C);
	op_plain_offset	(x,	1,	0X7000E7C0);
	op_plain_offset	(x,	129,	0X7000E7C0);
	create_insn	(x=0X10F68E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F692);
	op_plain_offset	(x,	1,	0X7000E7C0);
	op_plain_offset	(x,	129,	0X7000E7C0);
	create_insn	(x=0X10F694);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F698);
	op_plain_offset	(x,	1,	0X7000E7C0);
	op_plain_offset	(x,	129,	0X7000E7C0);
	create_insn	(x=0X10F69A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F6A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F6A8);
	op_plain_offset	(x,	1,	0X7000E800);
	op_plain_offset	(x,	129,	0X7000E800);
	create_insn	(x=0X10F6AA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F6AE);
	op_plain_offset	(x,	1,	0X7000E800);
	op_plain_offset	(x,	129,	0X7000E800);
	create_insn	(x=0X10F6B2);
	op_plain_offset	(x,	1,	0X7000E800);
	op_plain_offset	(x,	129,	0X7000E800);
	create_insn	(x=0X10F6B6);
	op_plain_offset	(x,	1,	0X7000E800);
	op_plain_offset	(x,	129,	0X7000E800);
	create_insn	(x=0X10F6BA);
	op_plain_offset	(x,	1,	0X7000E800);
	op_plain_offset	(x,	129,	0X7000E800);
	create_insn	(x=0X10F6BE);
	op_plain_offset	(x,	1,	0X7000E800);
	op_plain_offset	(x,	129,	0X7000E800);
	create_insn	(x=0X10F6C2);
	op_plain_offset	(x,	1,	0X7000E800);
	op_plain_offset	(x,	129,	0X7000E800);
	create_insn	(x=0X10F6C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F6CA);
	op_plain_offset	(x,	1,	0X7000EE80);
	op_plain_offset	(x,	129,	0X7000EE80);
	create_insn	(x=0X10F6CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F6D0);
	op_plain_offset	(x,	1,	0X7000EE80);
	op_plain_offset	(x,	129,	0X7000EE80);
	create_insn	(x=0X10F6D2);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F6D6);
	op_plain_offset	(x,	1,	0X7000EE80);
	op_plain_offset	(x,	129,	0X7000EE80);
	create_insn	(x=0X10F6D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F6DC);
	op_plain_offset	(x,	1,	0X7000EE80);
	op_plain_offset	(x,	129,	0X7000EE80);
	create_insn	(x=0X10F6DE);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F6E2);
	op_plain_offset	(x,	1,	0X7000EE80);
	op_plain_offset	(x,	129,	0X7000EE80);
	create_insn	(x=0X10F6E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F6E8);
	op_plain_offset	(x,	1,	0X7000EE80);
	op_plain_offset	(x,	129,	0X7000EE80);
	create_insn	(x=0X10F6EA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F6EE);
	op_plain_offset	(x,	1,	0X7000EE80);
	op_plain_offset	(x,	129,	0X7000EE80);
	create_insn	(x=0X10F6F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F6F4);
	op_plain_offset	(x,	1,	0X7000EE80);
	op_plain_offset	(x,	129,	0X7000EE80);
	create_insn	(x=0X10F6F6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F6FA);
	op_plain_offset	(x,	1,	0X7000EE80);
	op_plain_offset	(x,	129,	0X7000EE80);
	create_insn	(x=0X10F6FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F706);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F70A);
	op_plain_offset	(x,	1,	0X7000EEC0);
	op_plain_offset	(x,	129,	0X7000EEC0);
	create_insn	(x=0X10F70C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F710);
	op_plain_offset	(x,	1,	0X7000EEC0);
	op_plain_offset	(x,	129,	0X7000EEC0);
	create_insn	(x=0X10F712);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F716);
	op_plain_offset	(x,	1,	0X7000EEC0);
	op_plain_offset	(x,	129,	0X7000EEC0);
	create_insn	(x=0X10F718);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F71C);
	op_plain_offset	(x,	1,	0X7000EEC0);
	op_plain_offset	(x,	129,	0X7000EEC0);
	create_insn	(x=0X10F720);
	op_plain_offset	(x,	1,	0X7000EEC0);
	op_plain_offset	(x,	129,	0X7000EEC0);
	create_insn	(x=0X10F724);
	op_plain_offset	(x,	1,	0X7000EEC0);
	op_plain_offset	(x,	129,	0X7000EEC0);
	create_insn	(x=0X10F728);
	op_plain_offset	(x,	1,	0X7000EEC0);
	op_plain_offset	(x,	129,	0X7000EEC0);
	create_insn	(x=0X10F72C);
	op_plain_offset	(x,	1,	0X7000EEC0);
	op_plain_offset	(x,	129,	0X7000EEC0);
	create_insn	(x=0X10F730);
	op_plain_offset	(x,	1,	0X7000EEC0);
	op_plain_offset	(x,	129,	0X7000EEC0);
	create_insn	(x=0X10F734);
	op_plain_offset	(x,	1,	0X7000EEC0);
	op_plain_offset	(x,	129,	0X7000EEC0);
	create_insn	(x=0X10F738);
	op_plain_offset	(x,	1,	0X7000EEC0);
	op_plain_offset	(x,	129,	0X7000EEC0);
	create_insn	(x=0X10F73A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F73E);
	op_plain_offset	(x,	1,	0X7000EEC0);
	op_plain_offset	(x,	129,	0X7000EEC0);
	create_insn	(x=0X10F740);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F744);
	op_plain_offset	(x,	1,	0X7000EEC0);
	op_plain_offset	(x,	129,	0X7000EEC0);
	create_insn	(x=0X10F746);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F74A);
	op_plain_offset	(x,	1,	0X7000EEC0);
	op_plain_offset	(x,	129,	0X7000EEC0);
	create_insn	(x=0X10F74C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F750);
	op_plain_offset	(x,	1,	0X7000EEC0);
	op_plain_offset	(x,	129,	0X7000EEC0);
	create_insn	(x=0X10F752);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F75C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F760);
	op_plain_offset	(x,	1,	0X7000EF00);
	op_plain_offset	(x,	129,	0X7000EF00);
	create_insn	(x=0X10F762);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F766);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F76A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F772);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F776);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F77E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F786);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F78A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F792);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F79A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F79E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F7A6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F7AE);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F7B2);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F7BA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F7C2);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F7C6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F7CE);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F7D6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F7DA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F7E2);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F7EA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F7EE);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F7F6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F7FE);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F802);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F80C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F810);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F81A);
	op_stkvar	(x,	1);
	create_dword	(x=0X10F828);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X10F82C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X10F830);
	create_dword	(0X10F834);
	create_insn	(0X10F838);
	create_insn	(x=0X10F83C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X10F83E,	"buf",	0);
	create_insn	(x=0X10F83E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X10F848);
	op_plain_offset	(x,	1,	0X700D0000);
	op_plain_offset	(x,	129,	0X700D0000);
	create_insn	(x=0X10F84A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X10F84E);
	op_plain_offset	(x,	1,	0X700D0000);
	op_plain_offset	(x,	129,	0X700D0000);
	create_insn	(x=0X10F852);
	op_plain_offset	(x,	1,	0X700D0000);
	op_plain_offset	(x,	129,	0X700D0000);
	create_insn	(x=0X10F858);
	op_plain_offset	(x,	1,	0X700D0000);
	op_plain_offset	(x,	129,	0X700D0000);
	create_insn	(x=0X10F85A);
	op_plain_offset	(x,	1,	0X700D0000);
	op_plain_offset	(x,	129,	0X700D0000);
	create_insn	(x=0X10F85C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X10F85E);
	op_plain_offset	(x,	1,	0X700D0000);
	op_plain_offset	(x,	129,	0X700D0000);
	create_insn	(x=0X10F862);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	create_insn	(x=0X10F868);
	op_plain_offset	(x,	1,	0X700D0000);
	op_plain_offset	(x,	129,	0X700D0000);
	create_insn	(x=0X10F870);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X10F87A);
	op_plain_offset	(x,	1,	0X700D0000);
	op_plain_offset	(x,	129,	0X700D0000);
	create_insn	(x=0X10F87C);
	op_plain_offset	(x,	1,	0X700D0000);
	op_plain_offset	(x,	129,	0X700D0000);
	create_insn	(x=0X10F87E);
	op_plain_offset	(x,	1,	0X700D0000);
	op_plain_offset	(x,	129,	0X700D0000);
	create_insn	(x=0X10F886);
	op_plain_offset	(x,	1,	0X700D0000);
	op_plain_offset	(x,	129,	0X700D0000);
	create_insn	(x=0X10F888);
	op_plain_offset	(x,	1,	0X700D0000);
	op_plain_offset	(x,	129,	0X700D0000);
	create_insn	(0X10F892);
	create_insn	(x=0X10F896);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X10F8A2);
	create_insn	(x=0X10F8A8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X10F8B2);
	op_stkvar	(x,	1);
	set_cmt	(0X10F8B6,	"result",	0);
	set_cmt	(0X10F8B8,	"a3",	0);
	create_insn	(x=0X10F8CC);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	create_insn	(x=0X10F8DA);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	create_insn	(x=0X10F8E2);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	create_insn	(0X10F8E8);
	set_cmt	(0X10F8EC,	"result",	0);
	create_insn	(x=0X10F8EC);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	set_cmt	(0X10F8EE,	"a3",	0);
	create_insn	(x=0X10F8F4);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	create_insn	(x=0X10F902);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	create_insn	(x=0X10F914);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	create_insn	(x=0X10F91C);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	create_insn	(x=0X10F91E);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	create_insn	(0X10F922);
	set_cmt	(0X10F926,	"result",	0);
	create_insn	(x=0X10F926);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	set_cmt	(0X10F928,	"a3",	0);
	create_insn	(x=0X10F92E);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	create_insn	(x=0X10F93C);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	create_insn	(x=0X10F94E);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	create_insn	(x=0X10F956);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	create_insn	(x=0X10F958);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	create_insn	(0X10F95C);
	create_insn	(x=0X10F95E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F960);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F96E);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	create_insn	(x=0X10F97A);
	op_plain_offset	(x,	1,	0X700D0000);
	op_plain_offset	(x,	129,	0X700D0000);
	create_insn	(x=0X10F97C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10F986);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X10F98A);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	create_insn	(0X10F9B6);
	create_insn	(x=0X10F9B8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X10F9D0);
	create_insn	(x=0X10F9F2);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	create_insn	(0X10F9F6);
	create_insn	(x=0X10F9FC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X10FA06);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	create_insn	(x=0X10FA0A);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	create_insn	(x=0X10FA1C);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	create_insn	(x=0X10FA28);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	create_insn	(x=0X10FA2C);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	create_insn	(x=0X10FA3E);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	create_insn	(x=0X10FA4A);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	create_insn	(x=0X10FA4E);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	create_insn	(x=0X10FA60);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	create_insn	(x=0X10FA76);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	create_insn	(0X10FA84);
	create_insn	(x=0X10FA8C);
	op_plain_offset	(x,	1,	0X400046E0);
	op_plain_offset	(x,	129,	0X400046E0);
	create_insn	(0X10FA96);
	create_insn	(x=0X10FA9C);
	op_plain_offset	(x,	1,	0X400046E0);
	op_plain_offset	(x,	129,	0X400046E0);
	create_insn	(x=0X10FAAA);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	create_insn	(x=0X10FAB2);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	create_insn	(x=0X10FAB4);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	create_insn	(x=0X10FAB8);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	create_insn	(x=0X10FACE);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	create_insn	(x=0X10FAD6);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	create_insn	(x=0X10FAD8);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	create_insn	(x=0X10FADC);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	create_insn	(0X10FAE0);
	create_insn	(0X10FAE8);
	create_insn	(0X10FAF0);
	create_insn	(0X10FAF6);
	create_insn	(x=0X10FAFA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X10FAFC);
	op_plain_offset	(x,	1,	0X700D0000);
	op_plain_offset	(x,	129,	0X700D0000);
	create_insn	(x=0X10FB04);
	op_plain_offset	(x,	1,	0X700D0040);
	op_plain_offset	(x,	129,	0X700D0040);
	create_insn	(x=0X10FB16);
	op_plain_offset	(x,	1,	0X700D0000);
	op_plain_offset	(x,	129,	0X700D0000);
	create_insn	(x=0X10FB18);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	create_insn	(x=0X10FB40);
	op_plain_offset	(x,	1,	0X700D0000);
	op_plain_offset	(x,	129,	0X700D0000);
	create_insn	(x=0X10FB44);
	op_plain_offset	(x,	1,	0X700D0000);
	op_plain_offset	(x,	129,	0X700D0000);
	create_insn	(x=0X10FB52);
	op_plain_offset	(x,	1,	0X700D0040);
	op_plain_offset	(x,	129,	0X700D0040);
	create_insn	(x=0X10FB58);
	op_plain_offset	(x,	1,	0X700D0040);
	op_plain_offset	(x,	129,	0X700D0040);
	create_insn	(x=0X10FB5A);
	op_plain_offset	(x,	1,	0X700D0000);
	op_plain_offset	(x,	129,	0X700D0000);
	create_insn	(x=0X10FB70);
	op_plain_offset	(x,	1,	0X700D0000);
	op_plain_offset	(x,	129,	0X700D0000);
	create_insn	(x=0X10FB74);
	op_plain_offset	(x,	1,	0X700D0000);
	op_plain_offset	(x,	129,	0X700D0000);
	create_insn	(x=0X10FB7C);
	op_plain_offset	(x,	1,	0X700D0040);
	op_plain_offset	(x,	129,	0X700D0040);
	create_insn	(x=0X10FB82);
	op_plain_offset	(x,	1,	0X700D0040);
	op_plain_offset	(x,	129,	0X700D0040);
	create_insn	(x=0X10FB8A);
	op_plain_offset	(x,	1,	0X700D0000);
	op_plain_offset	(x,	129,	0X700D0000);
	create_insn	(x=0X10FB92);
	op_plain_offset	(x,	1,	0X700D0000);
	op_plain_offset	(x,	129,	0X700D0000);
	create_insn	(x=0X10FB9A);
	op_plain_offset	(x,	1,	0X700D0000);
	op_plain_offset	(x,	129,	0X700D0000);
	create_insn	(x=0X10FBA2);
	op_plain_offset	(x,	1,	0X700D0000);
	op_plain_offset	(x,	129,	0X700D0000);
	create_insn	(0X10FBAC);
	create_insn	(x=0X10FBB8);
	op_plain_offset	(x,	1,	0X700D0040);
	op_plain_offset	(x,	129,	0X700D0040);
	create_insn	(0X10FBBC);
	create_insn	(x=0X10FBBE);
	op_plain_offset	(x,	1,	0X700D0040);
	op_plain_offset	(x,	129,	0X700D0040);
	create_insn	(0X10FBC4);
	create_insn	(x=0X10FBE0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X10FBE4);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	create_insn	(0X10FC18);
	create_insn	(x=0X10FC1A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X10FC30);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X10FC34);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X10FC34,	"buf");
	create_dword	(x=0X10FC38);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X10FC3C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X10FC40);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X10FC44);
	create_insn	(0X10FC48);
	create_insn	(x=0X10FC72);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	create_insn	(0X10FC76);
	create_insn	(x=0X10FC8C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X10FC9A);
	create_insn	(x=0X10FCA0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X10FCA6);
	create_insn	(x=0X10FCA8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X10FCB0);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	set_cmt	(0X10FCB8,	"switch 9 cases ",	0);
	create_byte	(0X10FCBC);
	set_cmt	(0X10FCBD,	"jump table for switch statement",	0);
	create_byte	(0X10FCBD);
	make_array	(0X10FCBD,	0X9);
	set_cmt	(0X10FCC6,	"jumptable 0010FCB8 case 1",	1);
	create_insn	(x=0X10FCC6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X10FCC8);
	op_plain_offset	(x,	1,	0X70000800);
	op_plain_offset	(x,	129,	0X70000800);
	create_insn	(x=0X10FCCA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X10FCD0);
	op_plain_offset	(x,	1,	0X40002BF4);
	op_plain_offset	(x,	129,	0X40002BF4);
	set_cmt	(0X10FCD2,	"result",	0);
	create_insn	(x=0X10FCD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X10FCE2);
	op_plain_offset	(x,	1,	0X40002BF4);
	op_plain_offset	(x,	129,	0X40002BF4);
	create_insn	(x=0X10FCE8);
	op_plain_offset	(x,	1,	0X40002BF4);
	op_plain_offset	(x,	129,	0X40002BF4);
	create_insn	(x=0X10FCF2);
	op_plain_offset	(x,	1,	0X40002BF4);
	op_plain_offset	(x,	129,	0X40002BF4);
	create_insn	(x=0X10FCF8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X10FD00,	"jumptable 0010FCB8 case 2",	1);
	create_insn	(x=0X10FD00);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X10FD08);
	op_plain_offset	(x,	1,	0X40002C08);
	op_plain_offset	(x,	129,	0X40002C08);
	create_insn	(x=0X10FD0A);
	op_plain_offset	(x,	1,	0X40002C08);
	op_plain_offset	(x,	129,	0X40002C08);
	create_insn	(x=0X10FD0C);
	op_plain_offset	(x,	1,	0X40002C08);
	op_plain_offset	(x,	129,	0X40002C08);
	create_insn	(x=0X10FD0E);
	op_plain_offset	(x,	1,	0X40002C08);
	op_plain_offset	(x,	129,	0X40002C08);
	create_insn	(x=0X10FD12);
	op_plain_offset	(x,	1,	0X40002C08);
	op_plain_offset	(x,	129,	0X40002C08);
	create_insn	(x=0X10FD14);
	op_plain_offset	(x,	1,	0X40002C08);
	op_plain_offset	(x,	129,	0X40002C08);
	create_insn	(x=0X10FD16);
	op_plain_offset	(x,	1,	0X40002C08);
	op_plain_offset	(x,	129,	0X40002C08);
	create_insn	(x=0X10FD18);
	op_plain_offset	(x,	1,	0X40002C08);
	op_plain_offset	(x,	129,	0X40002C08);
	create_insn	(x=0X10FD22);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X10FD2A,	"jumptable 0010FCB8 case 3",	1);
	create_insn	(0X10FD2A);
	create_insn	(x=0X10FD40);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X10FD48);
	create_insn	(x=0X10FD50);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X10FD58);
	create_insn	(x=0X10FD60);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X10FD68);
	create_insn	(x=0X10FD70);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X10FD7E,	"jumptable 0010FCB8 case 6",	1);
	create_insn	(0X10FD7E);
	create_insn	(x=0X10FD86);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X10FD8E,	"jumptable 0010FCB8 case 7",	1);
	create_insn	(x=0X10FD8E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X10FD96);
	op_plain_offset	(x,	1,	0X40002C28);
	op_plain_offset	(x,	129,	0X40002C28);
	create_insn	(x=0X10FD98);
	op_plain_offset	(x,	1,	0X40002C28);
	op_plain_offset	(x,	129,	0X40002C28);
	create_insn	(x=0X10FD9A);
	op_plain_offset	(x,	1,	0X40002C28);
	op_plain_offset	(x,	129,	0X40002C28);
	create_insn	(x=0X10FD9C);
	op_plain_offset	(x,	1,	0X40002C28);
	op_plain_offset	(x,	129,	0X40002C28);
	create_insn	(x=0X10FDA0);
	op_plain_offset	(x,	1,	0X40002C28);
	op_plain_offset	(x,	129,	0X40002C28);
	create_insn	(x=0X10FDA2);
	op_plain_offset	(x,	1,	0X40002C28);
	op_plain_offset	(x,	129,	0X40002C28);
	create_insn	(x=0X10FDA4);
	op_plain_offset	(x,	1,	0X40002C28);
	op_plain_offset	(x,	129,	0X40002C28);
	create_insn	(x=0X10FDA6);
	op_plain_offset	(x,	1,	0X40002C28);
	op_plain_offset	(x,	129,	0X40002C28);
	create_insn	(x=0X10FDB0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X10FDB8,	"jumptable 0010FCB8 default case",	1);
	create_insn	(0X10FDB8);
	create_insn	(0X10FDC4);
	create_insn	(x=0X10FDC6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X10FDD2);
	op_plain_offset	(x,	1,	0X700D0000);
	op_plain_offset	(x,	129,	0X700D0000);
	create_insn	(x=0X10FDE0);
	op_plain_offset	(x,	1,	0X700D0000);
	op_plain_offset	(x,	129,	0X700D0000);
	create_insn	(x=0X10FDE2);
	op_plain_offset	(x,	1,	0X400045E0);
	op_plain_offset	(x,	129,	0X400045E0);
	create_insn	(x=0X10FDEE);
	op_plain_offset	(x,	1,	0X400046E0);
	op_plain_offset	(x,	129,	0X400046E0);
	create_insn	(0X10FDF4);
	create_insn	(x=0X10FDF6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X10FE02);
	create_insn	(x=0X10FE08);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X10FE0E,	"len",	0);
	set_cmt	(0X10FE10,	"buf",	0);
	create_insn	(x=0X10FE22);
	op_plain_offset	(x,	1,	0X400045C0);
	op_plain_offset	(x,	129,	0X400045C0);
	create_insn	(x=0X10FE28);
	op_plain_offset	(x,	1,	0X400045C0);
	op_plain_offset	(x,	129,	0X400045C0);
	create_insn	(x=0X10FE2E);
	op_plain_offset	(x,	1,	0X400045C0);
	op_plain_offset	(x,	129,	0X400045C0);
	create_insn	(x=0X10FE30);
	op_plain_offset	(x,	1,	0X400045C0);
	op_plain_offset	(x,	129,	0X400045C0);
	create_insn	(x=0X10FE32);
	op_plain_offset	(x,	1,	0X400045C0);
	op_plain_offset	(x,	129,	0X400045C0);
	create_insn	(x=0X10FE38);
	op_plain_offset	(x,	1,	0X400045C0);
	op_plain_offset	(x,	129,	0X400045C0);
	create_insn	(x=0X10FE3A);
	op_plain_offset	(x,	1,	0X400045C0);
	op_plain_offset	(x,	129,	0X400045C0);
	create_insn	(x=0X10FE40);
	op_plain_offset	(x,	1,	0X400045C0);
	op_plain_offset	(x,	129,	0X400045C0);
	create_insn	(x=0X10FE4A);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	create_insn	(x=0X10FE4C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X10FE50);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	create_insn	(x=0X10FE54);
	op_plain_offset	(x,	1,	0X400045C0);
	op_plain_offset	(x,	129,	0X400045C0);
	create_insn	(x=0X10FE56);
	op_plain_offset	(x,	1,	0X400045C0);
	op_plain_offset	(x,	129,	0X400045C0);
	create_insn	(x=0X10FE5C);
	op_plain_offset	(x,	1,	0X400045C0);
	op_plain_offset	(x,	129,	0X400045C0);
	create_insn	(x=0X10FE5E);
	op_plain_offset	(x,	1,	0X400045C0);
	op_plain_offset	(x,	129,	0X400045C0);
	create_insn	(x=0X10FE74);
	op_plain_offset	(x,	1,	0X400043B0);
	op_plain_offset	(x,	129,	0X400043B0);
	create_insn	(x=0X10FE78);
	op_plain_offset	(x,	1,	0X400043B0);
	op_plain_offset	(x,	129,	0X400043B0);
	create_insn	(x=0X10FE84);
	op_plain_offset	(x,	1,	0X400043B0);
	op_plain_offset	(x,	129,	0X400043B0);
	create_insn	(x=0X10FE86);
	op_plain_offset	(x,	1,	0X400043B0);
	op_plain_offset	(x,	129,	0X400043B0);
	create_insn	(0X10FE96);
	create_insn	(x=0X10FE9E);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	create_insn	(x=0X10FEA0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X10FEA2);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	create_insn	(x=0X10FEA4);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	create_insn	(x=0X10FEA6);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	create_insn	(x=0X10FEA8);
	op_plain_offset	(x,	1,	0X400045C0);
	op_plain_offset	(x,	129,	0X400045C0);
	create_insn	(x=0X10FEAE);
	op_plain_offset	(x,	1,	0X400045C0);
	op_plain_offset	(x,	129,	0X400045C0);
	create_insn	(x=0X10FEB2);
	op_plain_offset	(x,	1,	0X400045C0);
	op_plain_offset	(x,	129,	0X400045C0);
	create_insn	(x=0X10FEB8);
	op_plain_offset	(x,	1,	0X400045C0);
	op_plain_offset	(x,	129,	0X400045C0);
	create_insn	(x=0X10FEBA);
	op_plain_offset	(x,	1,	0X400045C0);
	op_plain_offset	(x,	129,	0X400045C0);
	create_insn	(x=0X10FEBC);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	create_insn	(x=0X10FECC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X10FEF6);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	create_insn	(x=0X10FEF8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X10FEFA);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	create_insn	(x=0X10FEFC);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	create_insn	(x=0X10FEFE);
	op_plain_offset	(x,	1,	0X400045C0);
	op_plain_offset	(x,	129,	0X400045C0);
	create_insn	(x=0X10FF04);
	op_plain_offset	(x,	1,	0X400045C0);
	op_plain_offset	(x,	129,	0X400045C0);
	create_insn	(x=0X10FF06);
	op_plain_offset	(x,	1,	0X400045C0);
	op_plain_offset	(x,	129,	0X400045C0);
	create_insn	(x=0X10FF14);
	op_plain_offset	(x,	1,	0X400045C0);
	op_plain_offset	(x,	129,	0X400045C0);
	create_insn	(x=0X10FF16);
	op_plain_offset	(x,	1,	0X400045C0);
	op_plain_offset	(x,	129,	0X400045C0);
	create_insn	(x=0X10FF1A);
	op_plain_offset	(x,	1,	0X400045C0);
	op_plain_offset	(x,	129,	0X400045C0);
	create_insn	(x=0X10FF1C);
	op_plain_offset	(x,	1,	0X400045C0);
	op_plain_offset	(x,	129,	0X400045C0);
	create_insn	(0X10FF22);
	create_insn	(0X10FF38);
	create_insn	(x=0X10FF4E);
	op_plain_offset	(x,	1,	0X700D0040);
	op_plain_offset	(x,	129,	0X700D0040);
	create_insn	(x=0X10FF62);
	op_plain_offset	(x,	1,	0X700D0040);
	op_plain_offset	(x,	129,	0X700D0040);
	create_insn	(x=0X10FF66);
	op_plain_offset	(x,	1,	0X700D0040);
	op_plain_offset	(x,	129,	0X700D0040);
	create_insn	(x=0X10FF68);
	op_plain_offset	(x,	1,	0X700D0040);
	op_plain_offset	(x,	129,	0X700D0040);
	create_insn	(x=0X10FF6C);
	op_plain_offset	(x,	1,	0X700D0040);
	op_plain_offset	(x,	129,	0X700D0040);
	create_insn	(0X10FF70);
	create_insn	(0X10FF76);
	create_insn	(x=0X10FF7C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X10FF98);
	op_plain_offset	(x,	1,	0X700D0000);
	op_plain_offset	(x,	129,	0X700D0000);
	create_insn	(x=0X10FF9E);
	op_plain_offset	(x,	1,	0X700D0000);
	op_plain_offset	(x,	129,	0X700D0000);
	create_insn	(x=0X10FFA0);
	op_plain_offset	(x,	1,	0X700D0000);
	op_plain_offset	(x,	129,	0X700D0000);
	create_insn	(x=0X10FFA4);
	op_plain_offset	(x,	1,	0X700D0000);
	op_plain_offset	(x,	129,	0X700D0000);
	create_insn	(x=0X10FFAE);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	create_insn	(x=0X10FFB2);
	op_plain_offset	(x,	1,	0X400046E0);
	op_plain_offset	(x,	129,	0X400046E0);
	create_insn	(0X10FFB8);
	create_insn	(x=0X10FFBE);
	op_plain_offset	(x,	1,	0X700D0040);
	op_plain_offset	(x,	129,	0X700D0040);
	create_insn	(x=0X10FFC4);
	op_plain_offset	(x,	1,	0X700D0040);
	op_plain_offset	(x,	129,	0X700D0040);
	create_insn	(0X11000A);
	create_insn	(0X110024);
	create_insn	(0X110036);
	create_insn	(0X11003E);
	create_insn	(x=0X11004C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X11005C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X110060);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X110064);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X110068);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X11006C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X110070);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X110074);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X110078);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X11007C);
	create_insn	(x=0X110080);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X110084);
	create_insn	(0X11008C);
	create_insn	(x=0X110092);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X11009C);
	create_insn	(0X1100B8);
	create_insn	(0X1100C8);
	set_name	(0X1100C8,	"usb_device_something");
	create_insn	(x=0X1100CE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1100E0);
	create_insn	(x=0X1100E4);
	op_plain_offset	(x,	1,	0X700D0000);
	op_plain_offset	(x,	129,	0X700D0000);
	create_insn	(x=0X1100EA);
	op_plain_offset	(x,	1,	0X700D0000);
	op_plain_offset	(x,	129,	0X700D0000);
	create_insn	(x=0X1100EC);
	op_plain_offset	(x,	1,	0X700D0000);
	op_plain_offset	(x,	129,	0X700D0000);
	create_insn	(x=0X1100F2);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	create_insn	(x=0X1100F4);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	create_insn	(x=0X1100F8);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	create_insn	(0X110106);
	create_insn	(x=0X110110);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X110122);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	create_insn	(0X11012E);
	create_insn	(0X11013E);
	create_insn	(x=0X11014E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X110150);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	create_insn	(x=0X110156);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X11015A);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	create_insn	(x=0X11015C);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	create_insn	(x=0X110160);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	create_insn	(x=0X110162);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	create_insn	(0X110166);
	create_insn	(x=0X110168);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	create_insn	(x=0X11016A);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	create_insn	(x=0X110172);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	create_insn	(x=0X11017C);
	op_plain_offset	(x,	1,	0X700D0000);
	op_plain_offset	(x,	129,	0X700D0000);
	create_insn	(x=0X110188);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	create_insn	(x=0X110194);
	op_plain_offset	(x,	1,	0X700D0000);
	op_plain_offset	(x,	129,	0X700D0000);
	create_insn	(0X110198);
	create_insn	(x=0X1101B6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1101C0);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	create_insn	(x=0X1101C4);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	create_insn	(0X1101E6);
	create_insn	(x=0X1101FC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X110222);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	create_insn	(0X110226);
	create_insn	(x=0X110228);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X11022A);
	op_plain_offset	(x,	1,	0X600060C0);
	op_plain_offset	(x,	129,	0X600060C0);
	create_insn	(x=0X110230);
	op_plain_offset	(x,	1,	0X600060C0);
	op_plain_offset	(x,	129,	0X600060C0);
	set_cmt	(0X110232,	"us",	0);
	create_insn	(x=0X110238);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X11023C);
	op_plain_offset	(x,	1,	0X60006000);
	op_plain_offset	(x,	129,	0X60006000);
	create_insn	(x=0X110242);
	op_plain_offset	(x,	1,	0X60006000);
	op_plain_offset	(x,	129,	0X60006000);
	create_insn	(x=0X110244);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X110246);
	op_plain_offset	(x,	1,	0X60006600);
	op_plain_offset	(x,	129,	0X60006600);
	create_insn	(x=0X110256);
	op_plain_offset	(x,	1,	0X60006600);
	op_plain_offset	(x,	129,	0X60006600);
	set_cmt	(0X110258,	"us",	0);
	create_insn	(x=0X11025E);
	op_plain_offset	(x,	1,	0X60006600);
	op_plain_offset	(x,	129,	0X60006600);
	create_insn	(x=0X110268);
	op_plain_offset	(x,	1,	0X60006600);
	op_plain_offset	(x,	129,	0X60006600);
	create_insn	(x=0X11026A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X11026C);
	op_plain_offset	(x,	1,	0X60006340);
	op_plain_offset	(x,	129,	0X60006340);
	create_insn	(x=0X110272);
	op_plain_offset	(x,	1,	0X60006340);
	op_plain_offset	(x,	129,	0X60006340);
	create_insn	(x=0X110274);
	op_plain_offset	(x,	1,	0X60006600);
	op_plain_offset	(x,	129,	0X60006600);
	create_insn	(x=0X110284);
	op_plain_offset	(x,	1,	0X60006600);
	op_plain_offset	(x,	129,	0X60006600);
	create_insn	(x=0X110286);
	op_plain_offset	(x,	1,	0X60006340);
	op_plain_offset	(x,	129,	0X60006340);
	create_insn	(x=0X11028A);
	op_plain_offset	(x,	1,	0X60006340);
	op_plain_offset	(x,	129,	0X60006340);
	create_insn	(x=0X11028C);
	op_plain_offset	(x,	1,	0X60006000);
	op_plain_offset	(x,	129,	0X60006000);
	create_insn	(x=0X110292);
	op_plain_offset	(x,	1,	0X60006000);
	op_plain_offset	(x,	129,	0X60006000);
	set_cmt	(0X110294,	"us",	0);
	create_insn	(x=0X1102A8);
	op_plain_offset	(x,	1,	0X700D8000);
	op_plain_offset	(x,	129,	0X700D8000);
	create_insn	(x=0X1102B0);
	op_plain_offset	(x,	1,	0X700D8000);
	op_plain_offset	(x,	129,	0X700D8000);
	set_cmt	(0X1102B2,	"us",	0);
	create_insn	(x=0X1102BC);
	op_plain_offset	(x,	1,	0X700D8000);
	op_plain_offset	(x,	129,	0X700D8000);
	create_insn	(x=0X1102BE);
	op_plain_offset	(x,	1,	0X700D9180);
	op_plain_offset	(x,	129,	0X700D9180);
	create_insn	(x=0X1102C4);
	op_plain_offset	(x,	1,	0X700D9180);
	op_plain_offset	(x,	129,	0X700D9180);
	create_insn	(0X1102CA);
	create_insn	(x=0X1102CC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1102D0);
	op_plain_offset	(x,	1,	0X60006280);
	op_plain_offset	(x,	129,	0X60006280);
	create_insn	(x=0X1102D8);
	op_plain_offset	(x,	1,	0X60006280);
	op_plain_offset	(x,	129,	0X60006280);
	create_insn	(x=0X1102DA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1102DE);
	op_plain_offset	(x,	1,	0X600066C0);
	op_plain_offset	(x,	129,	0X600066C0);
	create_insn	(x=0X1102E0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1102F0);
	op_plain_offset	(x,	1,	0X600066C0);
	op_plain_offset	(x,	129,	0X600066C0);
	create_insn	(x=0X1102F6);
	op_plain_offset	(x,	1,	0X7009F280);
	op_plain_offset	(x,	129,	0X7009F280);
	create_insn	(x=0X1102FA);
	op_plain_offset	(x,	1,	0X7009F280);
	op_plain_offset	(x,	129,	0X7009F280);
	set_cmt	(0X1102FC,	"us",	0);
	create_insn	(x=0X110302);
	op_plain_offset	(x,	1,	0X7009F280);
	op_plain_offset	(x,	129,	0X7009F280);
	set_cmt	(0X110304,	"us",	0);
	create_insn	(x=0X11030C);
	op_plain_offset	(x,	1,	0X7009F280);
	op_plain_offset	(x,	129,	0X7009F280);
	set_cmt	(0X11030E,	"us",	0);
	create_insn	(x=0X110314);
	op_plain_offset	(x,	1,	0X7009F280);
	op_plain_offset	(x,	129,	0X7009F280);
	create_insn	(x=0X11031A);
	op_plain_offset	(x,	1,	0X7009F280);
	op_plain_offset	(x,	129,	0X7009F280);
	create_insn	(x=0X11031C);
	op_plain_offset	(x,	1,	0X60006280);
	op_plain_offset	(x,	129,	0X60006280);
	create_insn	(x=0X110320);
	op_plain_offset	(x,	1,	0X60006280);
	op_plain_offset	(x,	129,	0X60006280);
	create_insn	(0X110326);
	create_insn	(x=0X110328);
	op_plain_offset	(x,	1,	0X7009F080);
	op_plain_offset	(x,	129,	0X7009F080);
	create_insn	(x=0X110330);
	op_plain_offset	(x,	1,	0X7009F080);
	op_plain_offset	(x,	129,	0X7009F080);
	create_insn	(x=0X110332);
	op_plain_offset	(x,	1,	0X7009F080);
	op_plain_offset	(x,	129,	0X7009F080);
	create_insn	(x=0X110338);
	op_plain_offset	(x,	1,	0X7009F080);
	op_plain_offset	(x,	129,	0X7009F080);
	create_insn	(x=0X110344);
	op_plain_offset	(x,	1,	0X7009F280);
	op_plain_offset	(x,	129,	0X7009F280);
	create_insn	(x=0X11034C);
	op_plain_offset	(x,	1,	0X7009F280);
	op_plain_offset	(x,	129,	0X7009F280);
	create_insn	(x=0X11034E);
	op_plain_offset	(x,	1,	0X7009F080);
	op_plain_offset	(x,	129,	0X7009F080);
	create_insn	(x=0X110350);
	op_plain_offset	(x,	1,	0X7009F080);
	op_plain_offset	(x,	129,	0X7009F080);
	create_insn	(x=0X110356);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X11035A);
	op_plain_offset	(x,	1,	0X7000F9C0);
	op_plain_offset	(x,	129,	0X7000F9C0);
	create_insn	(x=0X110362);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X110366);
	op_plain_offset	(x,	1,	0X7000FB40);
	op_plain_offset	(x,	129,	0X7000FB40);
	create_insn	(x=0X11036A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X11036C);
	op_plain_offset	(x,	1,	0X7009F080);
	op_plain_offset	(x,	129,	0X7009F080);
	create_insn	(x=0X110374);
	op_plain_offset	(x,	1,	0X7009F080);
	op_plain_offset	(x,	129,	0X7009F080);
	create_insn	(x=0X110376);
	op_plain_offset	(x,	1,	0X7009F080);
	op_plain_offset	(x,	129,	0X7009F080);
	create_insn	(x=0X11038A);
	op_plain_offset	(x,	1,	0X7009F080);
	op_plain_offset	(x,	129,	0X7009F080);
	create_insn	(x=0X11038C);
	op_plain_offset	(x,	1,	0X7009F080);
	op_plain_offset	(x,	129,	0X7009F080);
	create_insn	(x=0X110394);
	op_plain_offset	(x,	1,	0X7009F080);
	op_plain_offset	(x,	129,	0X7009F080);
	create_insn	(0X11039A);
	set_name	(0X11039A,	"usb_configure_pll_maybe");
	create_insn	(x=0X11039C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1103A0);
	op_plain_offset	(x,	1,	0X60006500);
	op_plain_offset	(x,	129,	0X60006500);
	create_insn	(x=0X1103AA);
	op_plain_offset	(x,	1,	0X60006500);
	op_plain_offset	(x,	129,	0X60006500);
	create_insn	(x=0X1103B0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1103C2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1103E8);
	create_insn	(x=0X1103EA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X110408);
	op_plain_offset	(x,	1,	0X60006480);
	op_plain_offset	(x,	129,	0X60006480);
	create_insn	(x=0X11040C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X110424);
	create_insn	(x=0X110434);
	op_plain_offset	(x,	1,	0X60006480);
	op_plain_offset	(x,	129,	0X60006480);
	create_insn	(x=0X110436);
	op_plain_offset	(x,	1,	0X60006480);
	op_plain_offset	(x,	129,	0X60006480);
	create_insn	(0X11044E);
	create_insn	(x=0X11046A);
	op_plain_offset	(x,	1,	0X60006480);
	op_plain_offset	(x,	129,	0X60006480);
	create_insn	(x=0X11046C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X110470);
	op_plain_offset	(x,	1,	0X60006500);
	op_plain_offset	(x,	129,	0X60006500);
	set_cmt	(0X110476,	"us",	0);
	create_dword	(x=0X110480);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X110484);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X110488);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X11048C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X110490);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X110494);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X110498);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X11049C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1104A0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1104A4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1104A8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X1104AC);
	create_dword	(x=0X1104B0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X1104B4);
	create_dword	(x=0X1104B8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1104BC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1104C0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1104C4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1104C8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X1104CC);
	create_insn	(0X1104D0);
	create_insn	(x=0X1104D2);
	op_plain_offset	(x,	1,	0X60006480);
	op_plain_offset	(x,	129,	0X60006480);
	create_insn	(x=0X1104F0);
	op_plain_offset	(x,	1,	0X60006480);
	op_plain_offset	(x,	129,	0X60006480);
	set_cmt	(0X1104F2,	"us",	0);
	create_insn	(0X1104FC);
	set_name	(0X1104FC,	"xusb_init_maybe");
	create_insn	(x=0X110500);
	op_stkvar	(x,	1);
	create_insn	(x=0X110506);
	op_stkvar	(x,	1);
	create_insn	(x=0X110508);
	op_stkvar	(x,	1);
	create_insn	(x=0X110510);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X110512);
	op_stkvar	(x,	1);
	create_insn	(x=0X110516);
	op_stkvar	(x,	1);
	set_cmt	(0X110538,	"us",	0);
	create_insn	(x=0X110544);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X110544,	"xusb_init");
	create_insn	(x=0X110548);
	op_plain_offset	(x,	1,	0X60006340);
	op_plain_offset	(x,	129,	0X60006340);
	create_insn	(x=0X110550);
	op_plain_offset	(x,	1,	0X60006340);
	op_plain_offset	(x,	129,	0X60006340);
	create_insn	(x=0X110552);
	op_plain_offset	(x,	1,	0X60006340);
	op_plain_offset	(x,	129,	0X60006340);
	create_insn	(x=0X110558);
	op_plain_offset	(x,	1,	0X60006340);
	op_plain_offset	(x,	129,	0X60006340);
	set_cmt	(0X11055A,	"us",	0);
	create_insn	(x=0X110562);
	op_plain_offset	(x,	1,	0X7009F000);
	op_plain_offset	(x,	129,	0X7009F000);
	set_cmt	(0X110570,	"a2",	0);
	set_cmt	(0X110574,	"a1",	0);
	create_insn	(x=0X110576);
	op_plain_offset	(x,	1,	0X7009F000);
	op_plain_offset	(x,	129,	0X7009F000);
	create_insn	(x=0X110580);
	op_plain_offset	(x,	1,	0X7009F000);
	op_plain_offset	(x,	129,	0X7009F000);
	create_insn	(x=0X110588);
	op_plain_offset	(x,	1,	0X7009F000);
	op_plain_offset	(x,	129,	0X7009F000);
	create_insn	(x=0X11058A);
	op_plain_offset	(x,	1,	0X7009F000);
	op_plain_offset	(x,	129,	0X7009F000);
	create_insn	(x=0X110590);
	op_plain_offset	(x,	1,	0X7009F000);
	op_plain_offset	(x,	129,	0X7009F000);
	create_insn	(x=0X110592);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X110594);
	op_plain_offset	(x,	1,	0X7000E4C0);
	op_plain_offset	(x,	129,	0X7000E4C0);
	create_insn	(x=0X11059A);
	op_plain_offset	(x,	1,	0X7000E4C0);
	op_plain_offset	(x,	129,	0X7000E4C0);
	set_cmt	(0X11059C,	"us",	0);
	set_cmt	(0X1105AC,	"buf",	0);
	create_insn	(x=0X1105AC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1105AE,	"len",	0);
	create_insn	(x=0X1105C0);
	op_plain_offset	(x,	1,	0X700D0000);
	op_plain_offset	(x,	129,	0X700D0000);
	create_insn	(x=0X1105C6);
	op_plain_offset	(x,	1,	0X700D0000);
	op_plain_offset	(x,	129,	0X700D0000);
	create_insn	(x=0X1105CA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1105D2);
	set_name	(0X1105D2,	"xusb_field8");
	create_insn	(x=0X1105D4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1105D6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1105DA);
	op_plain_offset	(x,	1,	0X7009F000);
	op_plain_offset	(x,	129,	0X7009F000);
	create_insn	(x=0X1105DC);
	op_plain_offset	(x,	1,	0X7009F000);
	op_plain_offset	(x,	129,	0X7009F000);
	create_insn	(x=0X1105DE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1105E0);
	op_plain_offset	(x,	1,	0X7009FC40);
	op_plain_offset	(x,	129,	0X7009FC40);
	create_insn	(x=0X1105FA);
	op_plain_offset	(x,	1,	0X7009FC40);
	op_plain_offset	(x,	129,	0X7009FC40);
	create_insn	(x=0X1105FC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X110600);
	op_plain_offset	(x,	1,	0X700D0040);
	op_plain_offset	(x,	129,	0X700D0040);
	create_insn	(x=0X110606);
	op_plain_offset	(x,	1,	0X700D0040);
	op_plain_offset	(x,	129,	0X700D0040);
	create_insn	(x=0X110608);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X11060A);
	op_plain_offset	(x,	1,	0X700D0000);
	op_plain_offset	(x,	129,	0X700D0000);
	create_insn	(x=0X110610);
	op_plain_offset	(x,	1,	0X700D0000);
	op_plain_offset	(x,	129,	0X700D0000);
	create_insn	(x=0X110612);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X110614);
	op_plain_offset	(x,	1,	0X700D0840);
	op_plain_offset	(x,	129,	0X700D0840);
	create_insn	(x=0X11061C);
	op_plain_offset	(x,	1,	0X700D0840);
	op_plain_offset	(x,	129,	0X700D0840);
	create_insn	(x=0X11061E);
	op_plain_offset	(x,	1,	0X700D0000);
	op_plain_offset	(x,	129,	0X700D0000);
	create_insn	(x=0X11062A);
	op_plain_offset	(x,	1,	0X700D0000);
	op_plain_offset	(x,	129,	0X700D0000);
	create_insn	(x=0X11062C);
	op_plain_offset	(x,	1,	0X700D0840);
	op_plain_offset	(x,	129,	0X700D0840);
	create_insn	(x=0X110632);
	op_plain_offset	(x,	1,	0X700D0840);
	op_plain_offset	(x,	129,	0X700D0840);
	create_insn	(x=0X110634);
	op_plain_offset	(x,	1,	0X7009FC40);
	op_plain_offset	(x,	129,	0X7009FC40);
	create_insn	(x=0X110646);
	op_plain_offset	(x,	1,	0X7009FC40);
	op_plain_offset	(x,	129,	0X7009FC40);
	create_insn	(x=0X11064A);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	create_insn	(x=0X110652);
	op_plain_offset	(x,	1,	0X400046E0);
	op_plain_offset	(x,	129,	0X400046E0);
	create_insn	(x=0X11065E);
	op_plain_offset	(x,	1,	0X400046E0);
	op_plain_offset	(x,	129,	0X400046E0);
	create_insn	(0X110668);
	set_name	(0X110668,	"xusb_field14");
	create_insn	(x=0X11066A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X110670);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	create_insn	(x=0X110674);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	create_insn	(x=0X11067A);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	create_insn	(x=0X110680);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	create_insn	(0X110684);
	create_insn	(x=0X11068E);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	create_insn	(x=0X110694);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	create_insn	(0X11069C);
	set_name	(0X11069C,	"xusb_field20");
	create_insn	(x=0X11069E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1106A4);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	create_insn	(x=0X1106A8);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	create_insn	(x=0X1106AE);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	create_insn	(x=0X1106B4);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	create_insn	(0X1106B8);
	create_insn	(x=0X1106C2);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	create_insn	(x=0X1106C8);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	create_insn	(0X1106D0);
	set_name	(0X1106D0,	"xusb_fieldC");
	create_insn	(x=0X1106D2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1106D6);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	create_insn	(x=0X1106D8);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	create_insn	(x=0X1106DE);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	create_insn	(x=0X1106E2);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	create_insn	(0X1106E6);
	set_name	(0X1106E6,	"xusb_field10");
	create_insn	(x=0X1106EC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1106F2);
	create_insn	(x=0X1106FC);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	create_insn	(x=0X110702);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	create_insn	(0X110708);
	set_name	(0X110708,	"xusb_field18");
	create_insn	(x=0X11070A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X110710);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	create_insn	(x=0X110714);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	create_insn	(x=0X110716);
	op_stkvar	(x,	1);
	create_insn	(x=0X110720);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	create_insn	(x=0X110724);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	create_insn	(x=0X110726);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	create_insn	(0X110732);
	create_insn	(0X11073C);
	create_insn	(x=0X110746);
	op_stkvar	(x,	1);
	create_insn	(x=0X110750);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	create_insn	(x=0X110754);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	create_insn	(0X11075E);
	set_name	(0X11075E,	"xusb_field1C");
	create_insn	(x=0X110764);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X11076A);
	create_insn	(x=0X110774);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	create_insn	(x=0X11077A);
	op_plain_offset	(x,	1,	0X400046C0);
	op_plain_offset	(x,	129,	0X400046C0);
	create_insn	(0X110780);
	set_name	(0X110780,	"xusb_field24");
	create_insn	(0X110784);
	set_cmt	(0X11079A,	"us",	0);
	create_insn	(0X11079A);
	create_dword	(0X1107A8);
	create_dword	(x=0X1107AC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X1107B0);
	create_dword	(x=0X1107B4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1107B8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1107BC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1107C0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1107C4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1107C8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1107CC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1107D0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1107D4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X1107D8);
	set_name	(0X1107D8,	"is_block_bad");
	create_insn	(0X1107EA);
	create_insn	(x=0X110800);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X110800,	"bootdev_uart_load_config");
	create_insn	(x=0X110808);
	op_plain_offset	(x,	1,	0X40002C80);
	op_plain_offset	(x,	129,	0X40002C80);
	create_insn	(0X11080E);
	set_name	(0X11080E,	"bootdev_uart_verify_config");
	create_insn	(0X110812);
	set_name	(0X110812,	"bootdev_uart_field8");
	create_insn	(0X11081C);
	set_name	(0X11081C,	"bootdev_uart_init");
	create_insn	(x=0X11081E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X11082C,	"n",	0);
	create_insn	(x=0X110830);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X110832,	"dst",	0);
	create_insn	(x=0X110832);
	op_stkvar	(x,	1);
	create_insn	(x=0X110838);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X110846);
	create_insn	(x=0X11084A);
	op_stkvar	(x,	1);
	create_insn	(0X110858);
	create_insn	(x=0X11085C);
	op_stkvar	(x,	1);
	create_insn	(0X11086A);
	create_insn	(x=0X11086E);
	op_stkvar	(x,	1);
	create_insn	(0X11087C);
	create_insn	(x=0X110880);
	op_stkvar	(x,	1);
	create_insn	(0X11088E);
	create_insn	(x=0X110892);
	op_stkvar	(x,	1);
	create_insn	(0X1108A0);
	create_insn	(x=0X1108A4);
	op_stkvar	(x,	1);
	create_insn	(0X1108B2);
	create_insn	(x=0X1108BC);
	op_stkvar	(x,	1);
	create_insn	(0X1108C4);
	create_insn	(x=0X1108C6);
	op_stkvar	(x,	1);
	set_cmt	(0X1108CE,	"a2",	0);
	set_cmt	(0X1108D4,	"len",	0);
	set_cmt	(0X1108D6,	"a3",	0);
	create_insn	(x=0X1108D6);
	op_stkvar	(x,	1);
	set_cmt	(0X1108D8,	"a1",	0);
	create_insn	(x=0X1108D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X1108EA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1108F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X1108F8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1108FA);
	op_stkvar	(x,	1);
	create_insn	(x=0X1108FC);
	op_plain_offset	(x,	1,	0X40022300);
	op_plain_offset	(x,	129,	0X40022300);
	create_insn	(0X110916);
	create_insn	(x=0X110918);
	op_stkvar	(x,	1);
	create_insn	(x=0X11091E);
	op_stkvar	(x,	1);
	set_cmt	(0X110920,	"a2",	0);
	create_insn	(x=0X110924);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X110926,	"a1",	0);
	create_insn	(x=0X110926);
	op_plain_offset	(x,	1,	0X40022300);
	op_plain_offset	(x,	129,	0X40022300);
	create_insn	(x=0X11093E);
	op_stkvar	(x,	1);
	create_insn	(0X110948);
	set_name	(0X110948,	"bootdev_uart_read");
	create_insn	(x=0X11094C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X110956,	"a4",	0);
	create_insn	(x=0X11095E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X110962,	"src",	0);
	set_cmt	(0X110964,	"dst",	0);
	create_insn	(0X110972);
	set_name	(0X110972,	"bootdev_uart_field14");
	create_insn	(0X110976);
	set_name	(0X110976,	"bootdev_uart_disable");
	create_insn	(0X110978);
	set_name	(0X110978,	"bootdev_uart_field1C");
	create_dword	(x=0X11097C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X110980);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X110984);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X110988);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X11098C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X110990);
	set_cmt	(0X110996,	"switch 9 cases ",	0);
	create_byte	(0X11099A);
	set_cmt	(0X11099B,	"jump table for switch statement",	0);
	create_byte	(0X11099B);
	make_array	(0X11099B,	0X9);
	set_cmt	(0X1109A4,	"jumptable 00110996 case 0",	1);
	create_insn	(x=0X1109A4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1109A6,	"jumptable 00110996 default case",	1);
	set_cmt	(0X1109AA,	"jumptable 00110996 case 1",	1);
	create_insn	(x=0X1109AA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1109B0,	"jumptable 00110996 case 2",	1);
	create_insn	(x=0X1109B0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1109B6,	"jumptable 00110996 case 3",	1);
	create_insn	(x=0X1109B6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1109BC,	"jumptable 00110996 case 4",	1);
	create_insn	(x=0X1109BC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1109C2,	"jumptable 00110996 case 5",	1);
	create_insn	(x=0X1109C2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1109C8,	"jumptable 00110996 case 6",	1);
	create_insn	(x=0X1109C8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1109CE,	"jumptable 00110996 case 7",	1);
	create_insn	(x=0X1109CE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1109D4);
	set_name	(0X1109D4,	"bootdev_sata_load_config");
	create_insn	(x=0X1109EE);
	op_stkvar	(x,	1);
	create_insn	(x=0X1109F0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1109F8);
	op_plain_offset	(x,	1,	0X40004740);
	op_plain_offset	(x,	129,	0X40004740);
	create_insn	(x=0X1109FC);
	op_plain_offset	(x,	1,	0X40004740);
	op_plain_offset	(x,	129,	0X40004740);
	create_insn	(x=0X1109FE);
	op_plain_offset	(x,	1,	0X40004740);
	op_plain_offset	(x,	129,	0X40004740);
	create_insn	(x=0X110A00);
	op_plain_offset	(x,	1,	0X40004740);
	op_plain_offset	(x,	129,	0X40004740);
	create_insn	(x=0X110A02);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X110A10);
	op_plain_offset	(x,	1,	0X40004760);
	op_plain_offset	(x,	129,	0X40004760);
	create_insn	(x=0X110A14);
	op_plain_offset	(x,	1,	0X40004760);
	op_plain_offset	(x,	129,	0X40004760);
	create_insn	(x=0X110A18);
	op_plain_offset	(x,	1,	0X40004760);
	op_plain_offset	(x,	129,	0X40004760);
	create_insn	(0X110A1C);
	create_insn	(x=0X110A2A);
	op_plain_offset	(x,	1,	0X40004760);
	op_plain_offset	(x,	129,	0X40004760);
	create_insn	(x=0X110A36);
	op_plain_offset	(x,	1,	0X40004760);
	op_plain_offset	(x,	129,	0X40004760);
	create_insn	(x=0X110A42);
	op_plain_offset	(x,	1,	0X40004760);
	op_plain_offset	(x,	129,	0X40004760);
	create_insn	(x=0X110A4C);
	op_plain_offset	(x,	1,	0X40004760);
	op_plain_offset	(x,	129,	0X40004760);
	create_insn	(x=0X110A58);
	op_plain_offset	(x,	1,	0X40004760);
	op_plain_offset	(x,	129,	0X40004760);
	create_insn	(x=0X110A64);
	op_plain_offset	(x,	1,	0X40004760);
	op_plain_offset	(x,	129,	0X40004760);
	create_insn	(x=0X110A6A);
	op_plain_offset	(x,	1,	0X40004760);
	op_plain_offset	(x,	129,	0X40004760);
	create_insn	(x=0X110A6E);
	op_plain_offset	(x,	1,	0X40004760);
	op_plain_offset	(x,	129,	0X40004760);
	create_insn	(x=0X110A76);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X110A78);
	op_plain_offset	(x,	1,	0X40004740);
	op_plain_offset	(x,	129,	0X40004740);
	create_insn	(x=0X110A7C);
	op_plain_offset	(x,	1,	0X40004760);
	op_plain_offset	(x,	129,	0X40004760);
	create_insn	(x=0X110A80);
	op_plain_offset	(x,	1,	0X40004760);
	op_plain_offset	(x,	129,	0X40004760);
	create_insn	(x=0X110A84);
	op_plain_offset	(x,	1,	0X40004760);
	op_plain_offset	(x,	129,	0X40004760);
	create_insn	(x=0X110A88);
	op_plain_offset	(x,	1,	0X40004760);
	op_plain_offset	(x,	129,	0X40004760);
	create_insn	(x=0X110A90);
	op_plain_offset	(x,	1,	0X40004760);
	op_plain_offset	(x,	129,	0X40004760);
	create_insn	(x=0X110A9C);
	op_plain_offset	(x,	1,	0X40004780);
	op_plain_offset	(x,	129,	0X40004780);
	create_insn	(x=0X110AA2);
	op_plain_offset	(x,	1,	0X40004780);
	op_plain_offset	(x,	129,	0X40004780);
	create_insn	(x=0X110AAC);
	op_plain_offset	(x,	1,	0X40004780);
	op_plain_offset	(x,	129,	0X40004780);
	create_insn	(x=0X110AAE);
	op_plain_offset	(x,	1,	0X40004780);
	op_plain_offset	(x,	129,	0X40004780);
	create_insn	(x=0X110AB6);
	op_plain_offset	(x,	1,	0X40004780);
	op_plain_offset	(x,	129,	0X40004780);
	create_insn	(x=0X110ABE);
	op_plain_offset	(x,	1,	0X40004740);
	op_plain_offset	(x,	129,	0X40004740);
	create_insn	(x=0X110AC2);
	op_plain_offset	(x,	1,	0X40004740);
	op_plain_offset	(x,	129,	0X40004740);
	create_insn	(x=0X110AD2);
	op_plain_offset	(x,	1,	0X40004740);
	op_plain_offset	(x,	129,	0X40004740);
	create_insn	(x=0X110AD6);
	op_plain_offset	(x,	1,	0X40004740);
	op_plain_offset	(x,	129,	0X40004740);
	create_insn	(0X110ADA);
	create_insn	(x=0X110AE0);
	op_plain_offset	(x,	1,	0X40004740);
	op_plain_offset	(x,	129,	0X40004740);
	create_insn	(x=0X110AE2);
	op_stkvar	(x,	1);
	create_insn	(x=0X110AE8);
	op_plain_offset	(x,	1,	0X40004740);
	op_plain_offset	(x,	129,	0X40004740);
	create_insn	(x=0X110AF6);
	op_plain_offset	(x,	1,	0X40004740);
	op_plain_offset	(x,	129,	0X40004740);
	create_insn	(x=0X110AFA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X110AFC);
	op_plain_offset	(x,	1,	0X40004740);
	op_plain_offset	(x,	129,	0X40004740);
	create_insn	(x=0X110AFE);
	op_plain_offset	(x,	1,	0X40004740);
	op_plain_offset	(x,	129,	0X40004740);
	create_insn	(x=0X110B02);
	op_plain_offset	(x,	1,	0X40004740);
	op_plain_offset	(x,	129,	0X40004740);
	create_insn	(x=0X110B04);
	op_plain_offset	(x,	1,	0X40004740);
	op_plain_offset	(x,	129,	0X40004740);
	create_insn	(x=0X110B06);
	op_stkvar	(x,	1);
	create_insn	(0X110B10);
	set_name	(0X110B10,	"bootdev_sata_verify_config");
	create_insn	(x=0X110B62);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X110B66);
	op_plain_offset	(x,	1,	0X40004780);
	op_plain_offset	(x,	129,	0X40004780);
	create_insn	(x=0X110B6A);
	op_stkvar	(x,	1);
	create_insn	(x=0X110B82);
	op_stkvar	(x,	1);
	create_insn	(x=0X110B8E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X110B92);
	op_plain_offset	(x,	1,	0X40002C88);
	op_plain_offset	(x,	129,	0X40002C88);
	create_insn	(0X110BA8);
	set_name	(0X110BA8,	"bootdev_sata_field8");
	create_insn	(x=0X110BAC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X110BB0);
	op_plain_offset	(x,	1,	0X40004718);
	op_plain_offset	(x,	129,	0X40004718);
	create_insn	(0X110BB6);
	create_insn	(x=0X110BC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X110BC8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X110BD2);
	op_stkvar	(x,	1);
	set_cmt	(0X110BE6,	"a1",	0);
	set_cmt	(0X110BE8,	"a2",	0);
	create_insn	(x=0X110BE8);
	op_stkvar	(x,	1);
	set_cmt	(0X110BF6,	"a2",	0);
	create_insn	(x=0X110BF6);
	op_stkvar	(x,	1);
	set_cmt	(0X110BFC,	"a1",	0);
	create_insn	(x=0X110C06);
	op_plain_offset	(x,	1,	0X40002C88);
	op_plain_offset	(x,	129,	0X40002C88);
	create_insn	(x=0X110C12);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X110C14);
	op_plain_offset	(x,	1,	0X60006480);
	op_plain_offset	(x,	129,	0X60006480);
	create_insn	(x=0X110C1C);
	op_stkvar	(x,	1);
	set_cmt	(0X110C48,	"a2",	0);
	create_insn	(x=0X110C48);
	op_stkvar	(x,	1);
	set_cmt	(0X110C4A,	"a1",	0);
	set_cmt	(0X110C58,	"a2",	0);
	create_insn	(x=0X110C58);
	op_stkvar	(x,	1);
	set_cmt	(0X110C5E,	"a1",	0);
	create_insn	(x=0X110C6C);
	op_plain_offset	(x,	1,	0X40002C88);
	op_plain_offset	(x,	129,	0X40002C88);
	create_insn	(x=0X110C78);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X110C7C);
	op_plain_offset	(x,	1,	0X40004718);
	op_plain_offset	(x,	129,	0X40004718);
	create_insn	(x=0X110C8C);
	op_stkvar	(x,	1);
	create_insn	(x=0X110C8E);
	op_stkvar	(x,	1);
	create_insn	(x=0X110C92);
	op_stkvar	(x,	1);
	create_insn	(x=0X110C96);
	op_stkvar	(x,	1);
	create_insn	(x=0X110C9A);
	op_stkvar	(x,	1);
	create_insn	(x=0X110C9E);
	op_stkvar	(x,	1);
	create_insn	(x=0X110CA2);
	op_stkvar	(x,	1);
	create_insn	(x=0X110CA6);
	op_stkvar	(x,	1);
	create_insn	(x=0X110CAA);
	op_stkvar	(x,	1);
	create_insn	(x=0X110CAE);
	op_stkvar	(x,	1);
	create_insn	(x=0X110CB2);
	op_stkvar	(x,	1);
	create_insn	(x=0X110CB6);
	op_stkvar	(x,	1);
	set_cmt	(0X110CBE,	"a2",	0);
	create_insn	(x=0X110CBE);
	op_stkvar	(x,	1);
	set_cmt	(0X110CC0,	"a1",	0);
	set_cmt	(0X110CCE,	"a2",	0);
	create_insn	(x=0X110CCE);
	op_stkvar	(x,	1);
	set_cmt	(0X110CD4,	"a1",	0);
	create_insn	(x=0X110CE2);
	op_plain_offset	(x,	1,	0X40002C88);
	op_plain_offset	(x,	129,	0X40002C88);
	create_insn	(x=0X110CEE);
	op_plain_offset	(x,	1,	0X40002C88);
	op_plain_offset	(x,	129,	0X40002C88);
	create_insn	(0X110D00);
	create_insn	(x=0X110D0A);
	op_stkvar	(x,	1);
	create_insn	(x=0X110D1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X110D20);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X110D2A);
	op_plain_offset	(x,	1,	0X40002C88);
	op_plain_offset	(x,	129,	0X40002C88);
	create_insn	(0X110D3C);
	create_insn	(x=0X110D3E);
	op_plain_offset	(x,	1,	0X40002C88);
	op_plain_offset	(x,	129,	0X40002C88);
	create_insn	(x=0X110D58);
	op_stkvar	(x,	1);
	create_insn	(x=0X110D5C);
	op_stkvar	(x,	1);
	set_cmt	(0X110D7C,	"a2",	0);
	create_insn	(x=0X110D7C);
	op_stkvar	(x,	1);
	set_cmt	(0X110D7E,	"a1",	0);
	create_insn	(x=0X110D88);
	op_stkvar	(x,	1);
	create_dword	(x=0X110D98);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X110D9C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X110DA0);
	create_dword	(x=0X110DA4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X110DA8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X110DAC);
	create_dword	(x=0X110DB0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X110DB4);
	create_dword	(0X110DB8);
	create_dword	(0X110DBC);
	create_dword	(0X110DC0);
	create_insn	(0X110DC4);
	create_insn	(x=0X110DC6);
	op_plain_offset	(x,	1,	0X70027100);
	op_plain_offset	(x,	129,	0X70027100);
	create_insn	(x=0X110DCC);
	op_plain_offset	(x,	1,	0X70027100);
	op_plain_offset	(x,	129,	0X70027100);
	create_insn	(x=0X110DCE);
	op_plain_offset	(x,	1,	0X70027100);
	op_plain_offset	(x,	129,	0X70027100);
	create_insn	(x=0X110DD4);
	op_plain_offset	(x,	1,	0X70027100);
	op_plain_offset	(x,	129,	0X70027100);
	create_insn	(0X110DD8);
	set_name	(0X110DD8,	"bootdev_sata_init");
	create_insn	(x=0X110DEA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X110DF6);
	op_plain_offset	(x,	1,	0X40004718);
	op_plain_offset	(x,	129,	0X40004718);
	create_insn	(x=0X110DF8);
	op_plain_offset	(x,	1,	0X40004780);
	op_plain_offset	(x,	129,	0X40004780);
	create_insn	(x=0X110E04);
	op_plain_offset	(x,	1,	0X40004718);
	op_plain_offset	(x,	129,	0X40004718);
	create_insn	(x=0X110E0A);
	op_plain_offset	(x,	1,	0X40004718);
	op_plain_offset	(x,	129,	0X40004718);
	create_insn	(x=0X110E12);
	op_plain_offset	(x,	1,	0X40004718);
	op_plain_offset	(x,	129,	0X40004718);
	create_insn	(x=0X110E26);
	op_plain_offset	(x,	1,	0X40004718);
	op_plain_offset	(x,	129,	0X40004718);
	create_insn	(x=0X110E28);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X110E2C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X110E2E);
	op_plain_offset	(x,	1,	0X40004718);
	op_plain_offset	(x,	129,	0X40004718);
	create_insn	(x=0X110E30);
	op_plain_offset	(x,	1,	0X40004718);
	op_plain_offset	(x,	129,	0X40004718);
	create_insn	(x=0X110E32);
	op_plain_offset	(x,	1,	0X40002C88);
	op_plain_offset	(x,	129,	0X40002C88);
	create_insn	(x=0X110E38);
	op_plain_offset	(x,	1,	0X40004718);
	op_plain_offset	(x,	129,	0X40004718);
	create_insn	(x=0X110E44);
	op_plain_offset	(x,	1,	0X40002C88);
	op_plain_offset	(x,	129,	0X40002C88);
	create_insn	(x=0X110E46);
	op_plain_offset	(x,	1,	0X40002C88);
	op_plain_offset	(x,	129,	0X40002C88);
	set_cmt	(0X110E48,	"rst_state",	0);
	set_cmt	(0X110E4A,	"reg_offset_and_bit",	0);
	create_insn	(x=0X110E4A);
	op_dec		(x,	1);
	set_cmt	(0X110E50,	"rst_state",	0);
	set_cmt	(0X110E52,	"reg_offset_and_bit",	0);
	create_insn	(x=0X110E52);
	op_dec		(x,	1);
	set_cmt	(0X110E58,	"rst_state",	0);
	set_cmt	(0X110E5A,	"reg_offset_and_bit",	0);
	create_insn	(x=0X110E5A);
	op_dec		(x,	1);
	set_cmt	(0X110E70,	"reg_offset_and_bit",	0);
	set_cmt	(0X110E72,	"enable",	0);
	set_cmt	(0X110E78,	"reg_offset_and_bit",	0);
	set_cmt	(0X110E7A,	"enable",	0);
	set_cmt	(0X110E80,	"reg_offset_and_bit",	0);
	set_cmt	(0X110E82,	"enable",	0);
	create_insn	(x=0X110E88);
	op_plain_offset	(x,	1,	0X40004718);
	op_plain_offset	(x,	129,	0X40004718);
	create_insn	(x=0X110EA0);
	op_plain_offset	(x,	1,	0X40002C88);
	op_plain_offset	(x,	129,	0X40002C88);
	set_cmt	(0X110EAC,	"rst_state",	0);
	set_cmt	(0X110EAE,	"reg_offset_and_bit",	0);
	create_insn	(x=0X110EB4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X110EBA);
	op_plain_offset	(x,	1,	0X60006280);
	op_plain_offset	(x,	129,	0X60006280);
	create_insn	(x=0X110EC4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X110EDC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X110EF0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X110EF2);
	op_plain_offset	(x,	1,	0X7009F000);
	op_plain_offset	(x,	129,	0X7009F000);
	create_insn	(x=0X110EFA);
	op_plain_offset	(x,	1,	0X7009F000);
	op_plain_offset	(x,	129,	0X7009F000);
	create_insn	(x=0X110EFC);
	op_plain_offset	(x,	1,	0X7009F000);
	op_plain_offset	(x,	129,	0X7009F000);
	create_insn	(x=0X110F02);
	op_plain_offset	(x,	1,	0X7009F000);
	op_plain_offset	(x,	129,	0X7009F000);
	create_insn	(x=0X110F04);
	op_plain_offset	(x,	1,	0X7009F000);
	op_plain_offset	(x,	129,	0X7009F000);
	create_insn	(x=0X110F0A);
	op_plain_offset	(x,	1,	0X7009F000);
	op_plain_offset	(x,	129,	0X7009F000);
	create_insn	(x=0X110F0C);
	op_plain_offset	(x,	1,	0X7009F000);
	op_plain_offset	(x,	129,	0X7009F000);
	create_insn	(x=0X110F12);
	op_plain_offset	(x,	1,	0X7009F000);
	op_plain_offset	(x,	129,	0X7009F000);
	set_cmt	(0X110F14,	"us",	0);
	set_cmt	(0X110F1A,	"rst_state",	0);
	set_cmt	(0X110F1C,	"reg_offset_and_bit",	0);
	set_cmt	(0X110F22,	"rst_state",	0);
	set_cmt	(0X110F24,	"reg_offset_and_bit",	0);
	set_cmt	(0X110F2A,	"rst_state",	0);
	set_cmt	(0X110F2C,	"reg_offset_and_bit",	0);
	set_cmt	(0X110F32,	"us",	0);
	create_insn	(x=0X110F48);
	op_plain_offset	(x,	1,	0X70021140);
	op_plain_offset	(x,	129,	0X70021140);
	create_insn	(x=0X110F4A);
	op_plain_offset	(x,	1,	0X70021140);
	op_plain_offset	(x,	129,	0X70021140);
	create_insn	(x=0X110F50);
	op_plain_offset	(x,	1,	0X700216C0);
	op_plain_offset	(x,	129,	0X700216C0);
	create_insn	(x=0X110F54);
	op_plain_offset	(x,	1,	0X700216C0);
	op_plain_offset	(x,	129,	0X700216C0);
	create_insn	(x=0X110F58);
	op_plain_offset	(x,	1,	0X700216C0);
	op_plain_offset	(x,	129,	0X700216C0);
	create_insn	(x=0X110F5C);
	op_plain_offset	(x,	1,	0X700216C0);
	op_plain_offset	(x,	129,	0X700216C0);
	create_insn	(x=0X110F62);
	op_plain_offset	(x,	1,	0X70021100);
	op_plain_offset	(x,	129,	0X70021100);
	create_insn	(x=0X110F64);
	op_plain_offset	(x,	1,	0X70021100);
	op_plain_offset	(x,	129,	0X70021100);
	create_insn	(x=0X110F66);
	op_plain_offset	(x,	1,	0X70021100);
	op_plain_offset	(x,	129,	0X70021100);
	create_insn	(x=0X110F68);
	op_plain_offset	(x,	1,	0X70021100);
	op_plain_offset	(x,	129,	0X70021100);
	create_insn	(x=0X110F72);
	op_plain_offset	(x,	1,	0X70021100);
	op_plain_offset	(x,	129,	0X70021100);
	create_insn	(x=0X110F7A);
	op_plain_offset	(x,	1,	0X70021100);
	op_plain_offset	(x,	129,	0X70021100);
	create_insn	(x=0X110F7C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X110F7E);
	op_plain_offset	(x,	1,	0X40004718);
	op_plain_offset	(x,	129,	0X40004718);
	create_insn	(x=0X110F8A);
	op_plain_offset	(x,	1,	0X70021000);
	op_plain_offset	(x,	129,	0X70021000);
	create_insn	(x=0X110F9A);
	op_plain_offset	(x,	1,	0X40004718);
	op_plain_offset	(x,	129,	0X40004718);
	create_insn	(x=0X110FA2);
	op_plain_offset	(x,	1,	0X70021000);
	op_plain_offset	(x,	129,	0X70021000);
	create_insn	(x=0X110FBA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X110FBE);
	op_plain_offset	(x,	1,	0X40004780);
	op_plain_offset	(x,	129,	0X40004780);
	create_insn	(x=0X110FD4);
	op_plain_offset	(x,	1,	0X70027100);
	op_plain_offset	(x,	129,	0X70027100);
	create_insn	(x=0X110FDC);
	op_plain_offset	(x,	1,	0X70027100);
	op_plain_offset	(x,	129,	0X70027100);
	create_insn	(x=0X110FE6);
	op_plain_offset	(x,	1,	0X70020180);
	op_plain_offset	(x,	129,	0X70020180);
	create_insn	(x=0X110FEA);
	op_plain_offset	(x,	1,	0X70021540);
	op_plain_offset	(x,	129,	0X70021540);
	create_insn	(x=0X110FF2);
	op_plain_offset	(x,	1,	0X70021540);
	op_plain_offset	(x,	129,	0X70021540);
	create_insn	(x=0X110FFA);
	op_plain_offset	(x,	1,	0X40004718);
	op_plain_offset	(x,	129,	0X40004718);
	create_insn	(x=0X111000);
	op_plain_offset	(x,	1,	0X70021540);
	op_plain_offset	(x,	129,	0X70021540);
	create_insn	(x=0X111006);
	op_plain_offset	(x,	1,	0X70021540);
	op_plain_offset	(x,	129,	0X70021540);
	create_insn	(x=0X11100C);
	op_plain_offset	(x,	1,	0X70021480);
	op_plain_offset	(x,	129,	0X70021480);
	create_insn	(x=0X111022);
	op_plain_offset	(x,	1,	0X70021480);
	op_plain_offset	(x,	129,	0X70021480);
	create_insn	(x=0X111026);
	op_plain_offset	(x,	1,	0X70027000);
	op_plain_offset	(x,	129,	0X70027000);
	create_insn	(x=0X11102C);
	op_plain_offset	(x,	1,	0X70027000);
	op_plain_offset	(x,	129,	0X70027000);
	set_cmt	(0X11102E,	"us",	0);
	create_insn	(x=0X111036);
	op_plain_offset	(x,	1,	0X70027000);
	op_plain_offset	(x,	129,	0X70027000);
	create_insn	(x=0X11103A);
	op_plain_offset	(x,	1,	0X40002C88);
	op_plain_offset	(x,	129,	0X40002C88);
	create_insn	(x=0X111046);
	op_plain_offset	(x,	1,	0X40002C88);
	op_plain_offset	(x,	129,	0X40002C88);
	create_insn	(0X11104E);
	create_insn	(x=0X111052);
	op_plain_offset	(x,	1,	0X70027100);
	op_plain_offset	(x,	129,	0X70027100);
	create_insn	(x=0X11106C);
	op_plain_offset	(x,	1,	0X40002C88);
	op_plain_offset	(x,	129,	0X40002C88);
	create_insn	(0X111078);
	create_insn	(x=0X111080);
	op_plain_offset	(x,	1,	0X40004718);
	op_plain_offset	(x,	129,	0X40004718);
	create_insn	(x=0X111084);
	op_plain_offset	(x,	1,	0X40004718);
	op_plain_offset	(x,	129,	0X40004718);
	create_insn	(x=0X111086);
	op_plain_offset	(x,	1,	0X70027100);
	op_plain_offset	(x,	129,	0X70027100);
	create_insn	(x=0X11108E);
	op_plain_offset	(x,	1,	0X70027000);
	op_plain_offset	(x,	129,	0X70027000);
	create_insn	(x=0X111094);
	op_plain_offset	(x,	1,	0X70027000);
	op_plain_offset	(x,	129,	0X70027000);
	create_insn	(x=0X111096);
	op_plain_offset	(x,	1,	0X70027000);
	op_plain_offset	(x,	129,	0X70027000);
	create_insn	(x=0X1110A0);
	op_plain_offset	(x,	1,	0X40002C88);
	op_plain_offset	(x,	129,	0X40002C88);
	create_insn	(0X1110AE);
	create_insn	(x=0X1110B4);
	op_plain_offset	(x,	1,	0X40004718);
	op_plain_offset	(x,	129,	0X40004718);
	create_insn	(x=0X1110C0);
	op_plain_offset	(x,	1,	0X70027100);
	op_plain_offset	(x,	129,	0X70027100);
	create_insn	(x=0X1110C4);
	op_plain_offset	(x,	1,	0X70027100);
	op_plain_offset	(x,	129,	0X70027100);
	create_insn	(x=0X1110C6);
	op_plain_offset	(x,	1,	0X40004718);
	op_plain_offset	(x,	129,	0X40004718);
	create_insn	(x=0X1110CC);
	op_plain_offset	(x,	1,	0X40002C88);
	op_plain_offset	(x,	129,	0X40002C88);
	create_insn	(x=0X1110D6);
	op_plain_offset	(x,	1,	0X40004718);
	op_plain_offset	(x,	129,	0X40004718);
	create_insn	(x=0X1110D8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1110DA);
	op_stkvar	(x,	1);
	create_insn	(x=0X1110E2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1110E4);
	op_plain_offset	(x,	1,	0X40002C88);
	op_plain_offset	(x,	129,	0X40002C88);
	create_insn	(0X1110F0);
	create_insn	(x=0X111110);
	op_plain_offset	(x,	1,	0X700221C0);
	op_plain_offset	(x,	129,	0X700221C0);
	set_cmt	(0X111124,	"us",	0);
	create_insn	(x=0X11112E);
	op_plain_offset	(x,	1,	0X700221C0);
	op_plain_offset	(x,	129,	0X700221C0);
	set_cmt	(0X111154,	"us",	0);
	create_insn	(0X111154);
	create_insn	(x=0X111168);
	op_plain_offset	(x,	1,	0X700221C0);
	op_plain_offset	(x,	129,	0X700221C0);
	create_insn	(x=0X11116A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X111172);
	op_plain_offset	(x,	1,	0X700221C0);
	op_plain_offset	(x,	129,	0X700221C0);
	create_insn	(x=0X11117A);
	op_stkvar	(x,	1);
	create_insn	(x=0X11118A);
	op_plain_offset	(x,	1,	0X700221C0);
	op_plain_offset	(x,	129,	0X700221C0);
	create_insn	(x=0X111192);
	op_stkvar	(x,	1);
	create_insn	(x=0X1111A2);
	op_plain_offset	(x,	1,	0X700221C0);
	op_plain_offset	(x,	129,	0X700221C0);
	create_insn	(x=0X1111AA);
	op_stkvar	(x,	1);
	create_insn	(x=0X1111B2);
	op_stkvar	(x,	1);
	create_insn	(x=0X1111B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X1111BE);
	op_stkvar	(x,	1);
	create_dword	(x=0X1111C4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X1111C8);
	create_dword	(x=0X1111CC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1111D0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X1111D4);
	create_dword	(0X1111D8);
	create_dword	(0X1111DC);
	create_dword	(x=0X1111E0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1111E4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1111E8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1111EC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1111F0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1111F4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1111F8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1111FC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X111200);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X111204);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X111208);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X11120C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X111210);
	create_insn	(0X111214);
	create_insn	(x=0X111218);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X111230);
	op_plain_offset	(x,	1,	0X700221C0);
	op_plain_offset	(x,	129,	0X700221C0);
	create_insn	(x=0X111242);
	op_plain_offset	(x,	1,	0X700221C0);
	op_plain_offset	(x,	129,	0X700221C0);
	create_insn	(x=0X111246);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X11124C);
	op_plain_offset	(x,	1,	0X40004718);
	op_plain_offset	(x,	129,	0X40004718);
	create_insn	(x=0X111254);
	op_plain_offset	(x,	1,	0X700221C0);
	op_plain_offset	(x,	129,	0X700221C0);
	create_insn	(x=0X11125E);
	op_plain_offset	(x,	1,	0X40004718);
	op_plain_offset	(x,	129,	0X40004718);
	create_insn	(x=0X111260);
	op_stkvar	(x,	1);
	create_insn	(x=0X111262);
	op_plain_offset	(x,	1,	0X40004718);
	op_plain_offset	(x,	129,	0X40004718);
	create_insn	(x=0X111266);
	op_stkvar	(x,	1);
	create_insn	(x=0X111272);
	op_stkvar	(x,	1);
	create_insn	(x=0X111276);
	op_stkvar	(x,	1);
	create_insn	(x=0X111280);
	op_plain_offset	(x,	1,	0X700221C0);
	op_plain_offset	(x,	129,	0X700221C0);
	create_insn	(x=0X11128A);
	op_plain_offset	(x,	1,	0X700221C0);
	op_plain_offset	(x,	129,	0X700221C0);
	create_insn	(x=0X11129C);
	op_plain_offset	(x,	1,	0X700221C0);
	op_plain_offset	(x,	129,	0X700221C0);
	create_insn	(x=0X11129E);
	op_stkvar	(x,	1);
	create_insn	(x=0X1112A6);
	op_plain_offset	(x,	1,	0X700221C0);
	op_plain_offset	(x,	129,	0X700221C0);
	create_insn	(0X1112B6);
	create_insn	(0X1112B8);
	create_insn	(x=0X1112BC);
	op_plain_offset	(x,	1,	0X700221C0);
	op_plain_offset	(x,	129,	0X700221C0);
	create_insn	(x=0X1112C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X1112C8);
	op_plain_offset	(x,	1,	0X700221C0);
	op_plain_offset	(x,	129,	0X700221C0);
	create_insn	(x=0X1112DE);
	op_plain_offset	(x,	1,	0X700221C0);
	op_plain_offset	(x,	129,	0X700221C0);
	create_insn	(x=0X1112E6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1112EA);
	op_plain_offset	(x,	1,	0X40002C88);
	op_plain_offset	(x,	129,	0X40002C88);
	create_insn	(x=0X1112F8);
	op_plain_offset	(x,	1,	0X700221C0);
	op_plain_offset	(x,	129,	0X700221C0);
	create_insn	(x=0X111308);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X11130C);
	op_plain_offset	(x,	1,	0X40004718);
	op_plain_offset	(x,	129,	0X40004718);
	create_insn	(x=0X11131A);
	op_plain_offset	(x,	1,	0X700221C0);
	op_plain_offset	(x,	129,	0X700221C0);
	create_insn	(0X111330);
	create_insn	(x=0X111332);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X111336);
	op_plain_offset	(x,	1,	0X40004718);
	op_plain_offset	(x,	129,	0X40004718);
	create_insn	(x=0X11133E);
	op_plain_offset	(x,	1,	0X40004718);
	op_plain_offset	(x,	129,	0X40004718);
	create_insn	(x=0X11134A);
	op_plain_offset	(x,	1,	0X40004718);
	op_plain_offset	(x,	129,	0X40004718);
	create_insn	(x=0X111350);
	op_plain_offset	(x,	1,	0X40004718);
	op_plain_offset	(x,	129,	0X40004718);
	create_insn	(0X11139E);
	create_insn	(x=0X1113B0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1113B4);
	op_plain_offset	(x,	1,	0X40004718);
	op_plain_offset	(x,	129,	0X40004718);
	create_insn	(x=0X1113BC);
	op_plain_offset	(x,	1,	0X40004718);
	op_plain_offset	(x,	129,	0X40004718);
	create_insn	(x=0X1113C2);
	op_plain_offset	(x,	1,	0X40004718);
	op_plain_offset	(x,	129,	0X40004718);
	create_insn	(x=0X1113C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X1113D4);
	op_plain_offset	(x,	1,	0X70027100);
	op_plain_offset	(x,	129,	0X70027100);
	create_insn	(x=0X1113D8);
	op_plain_offset	(x,	1,	0X70027100);
	op_plain_offset	(x,	129,	0X70027100);
	set_cmt	(0X1113E0,	"us",	0);
	create_insn	(x=0X1113E6);
	op_plain_offset	(x,	1,	0X70027100);
	op_plain_offset	(x,	129,	0X70027100);
	create_insn	(0X1113F8);
	create_insn	(x=0X1113FA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X111402);
	op_plain_offset	(x,	1,	0X40002C88);
	op_plain_offset	(x,	129,	0X40002C88);
	create_insn	(0X11140C);
	set_cmt	(0X11140E,	"us",	0);
	create_insn	(x=0X111418);
	op_plain_offset	(x,	1,	0X70027100);
	op_plain_offset	(x,	129,	0X70027100);
	create_insn	(0X111426);
	create_insn	(x=0X11142C);
	op_plain_offset	(x,	1,	0X40002C88);
	op_plain_offset	(x,	129,	0X40002C88);
	create_insn	(0X111436);
	create_insn	(x=0X11143A);
	op_plain_offset	(x,	1,	0X70027100);
	op_plain_offset	(x,	129,	0X70027100);
	create_insn	(x=0X11144A);
	op_plain_offset	(x,	1,	0X40002C88);
	op_plain_offset	(x,	129,	0X40002C88);
	create_insn	(x=0X111454);
	op_plain_offset	(x,	1,	0X70027100);
	op_plain_offset	(x,	129,	0X70027100);
	create_insn	(x=0X111464);
	op_plain_offset	(x,	1,	0X40002C88);
	op_plain_offset	(x,	129,	0X40002C88);
	create_insn	(0X111474);
	set_name	(0X111474,	"bootdev_sata_read");
	create_insn	(x=0X111478);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X11147E);
	op_plain_offset	(x,	1,	0X40004718);
	op_plain_offset	(x,	129,	0X40004718);
	create_insn	(0X111494);
	create_insn	(x=0X1114A8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1114AA);
	op_plain_offset	(x,	1,	0X40002C88);
	op_plain_offset	(x,	129,	0X40002C88);
	create_insn	(0X1114BC);
	set_name	(0X1114BC,	"bootdev_sata_field14");
	create_insn	(0X1114C0);
	set_name	(0X1114C0,	"bootdev_sata_disable");
	set_cmt	(0X1114C2,	"reg_offset_and_bit",	0);
	set_cmt	(0X1114C4,	"enable",	0);
	set_cmt	(0X1114CA,	"reg_offset_and_bit",	0);
	set_cmt	(0X1114CC,	"enable",	0);
	set_cmt	(0X1114D2,	"reg_offset_and_bit",	0);
	set_cmt	(0X1114D4,	"enable",	0);
	set_cmt	(0X1114DA,	"us",	0);
	create_insn	(0X1114E6);
	set_name	(0X1114E6,	"bootdev_sata_field1C");
	create_insn	(x=0X1114F4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1114F6);
	op_plain_offset	(x,	1,	0X40004718);
	op_plain_offset	(x,	129,	0X40004718);
	create_insn	(x=0X1114FC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1114FE);
	op_plain_offset	(x,	1,	0X40004718);
	op_plain_offset	(x,	129,	0X40004718);
	create_insn	(x=0X111524);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X111526);
	op_plain_offset	(x,	1,	0X40000020);
	op_plain_offset	(x,	129,	0X40000020);
	create_insn	(x=0X11152C);
	op_stkvar	(x,	1);
	create_insn	(0X111538);
	create_insn	(x=0X11153E);
	op_plain_offset	(x,	1,	0X40004718);
	op_plain_offset	(x,	129,	0X40004718);
	create_insn	(0X111544);
	create_insn	(0X111548);
	create_insn	(0X11154C);
	create_insn	(x=0X11154E);
	op_plain_offset	(x,	1,	0X70020180);
	op_plain_offset	(x,	129,	0X70020180);
	create_insn	(x=0X111558);
	op_plain_offset	(x,	1,	0X70020180);
	op_plain_offset	(x,	129,	0X70020180);
	create_insn	(x=0X11155A);
	op_plain_offset	(x,	1,	0X70020180);
	op_plain_offset	(x,	129,	0X70020180);
	create_insn	(x=0X111566);
	op_plain_offset	(x,	1,	0X70020180);
	op_plain_offset	(x,	129,	0X70020180);
	create_insn	(0X11156A);
	create_insn	(x=0X11156E);
	op_stkvar	(x,	1);
	set_cmt	(0X111576,	"result",	0);
	create_insn	(x=0X111586);
	op_plain_offset	(x,	1,	0X70021680);
	op_plain_offset	(x,	129,	0X70021680);
	create_insn	(x=0X11158C);
	op_stkvar	(x,	1);
	create_insn	(x=0X1115A4);
	op_plain_offset	(x,	1,	0X70021680);
	op_plain_offset	(x,	129,	0X70021680);
	create_insn	(x=0X1115A6);
	op_plain_offset	(x,	1,	0X70021680);
	op_plain_offset	(x,	129,	0X70021680);
	create_insn	(x=0X1115BC);
	op_plain_offset	(x,	1,	0X70021680);
	op_plain_offset	(x,	129,	0X70021680);
	create_insn	(x=0X1115C2);
	op_plain_offset	(x,	1,	0X700216C0);
	op_plain_offset	(x,	129,	0X700216C0);
	create_insn	(x=0X1115D0);
	op_plain_offset	(x,	1,	0X700216C0);
	op_plain_offset	(x,	129,	0X700216C0);
	create_insn	(0X1115E0);
	create_insn	(x=0X1115E4);
	op_plain_offset	(x,	1,	0X7009F840);
	op_plain_offset	(x,	129,	0X7009F840);
	create_insn	(x=0X1115EA);
	op_plain_offset	(x,	1,	0X7009F840);
	op_plain_offset	(x,	129,	0X7009F840);
	create_insn	(x=0X1115EC);
	op_plain_offset	(x,	1,	0X7009F840);
	op_plain_offset	(x,	129,	0X7009F840);
	create_insn	(x=0X1115F2);
	op_plain_offset	(x,	1,	0X7009F840);
	op_plain_offset	(x,	129,	0X7009F840);
	create_insn	(x=0X1115F4);
	op_plain_offset	(x,	1,	0X7009F840);
	op_plain_offset	(x,	129,	0X7009F840);
	create_insn	(x=0X1115FA);
	op_plain_offset	(x,	1,	0X7009F840);
	op_plain_offset	(x,	129,	0X7009F840);
	create_insn	(x=0X1115FC);
	op_plain_offset	(x,	1,	0X7009F840);
	op_plain_offset	(x,	129,	0X7009F840);
	create_insn	(x=0X111602);
	op_plain_offset	(x,	1,	0X7009F840);
	op_plain_offset	(x,	129,	0X7009F840);
	create_insn	(x=0X111604);
	op_plain_offset	(x,	1,	0X7009F840);
	op_plain_offset	(x,	129,	0X7009F840);
	create_insn	(x=0X11160A);
	op_plain_offset	(x,	1,	0X7009F840);
	op_plain_offset	(x,	129,	0X7009F840);
	set_cmt	(0X11160C,	"us",	0);
	create_dword	(x=0X111618);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X11161C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X111620);
	create_dword	(0X111624);
	create_dword	(x=0X111628);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X11162C);
	create_dword	(0X111630);
	create_dword	(0X111634);
	create_dword	(0X111638);
	create_dword	(x=0X11163C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X111640);
	create_dword	(x=0X111644);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X111648);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X11164C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X111650);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X111654);
	op_plain_offset	(x,	1,	0X7009F840);
	op_plain_offset	(x,	129,	0X7009F840);
	create_insn	(x=0X11165A);
	op_plain_offset	(x,	1,	0X7009F840);
	op_plain_offset	(x,	129,	0X7009F840);
	set_cmt	(0X11165E,	"us",	0);
	create_insn	(x=0X111664);
	op_plain_offset	(x,	1,	0X7009F840);
	op_plain_offset	(x,	129,	0X7009F840);
	create_insn	(0X111674);
	set_cmt	(0X11167E,	"us",	0);
	create_insn	(x=0X111684);
	op_plain_offset	(x,	1,	0X7009F840);
	op_plain_offset	(x,	129,	0X7009F840);
	create_insn	(x=0X11168C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X111690);
	op_plain_offset	(x,	1,	0X40002C88);
	op_plain_offset	(x,	129,	0X40002C88);
	create_insn	(x=0X1116A0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1116A8);
	op_plain_offset	(x,	1,	0X40004718);
	op_plain_offset	(x,	129,	0X40004718);
	create_insn	(x=0X1116B6);
	op_plain_offset	(x,	1,	0X70021000);
	op_plain_offset	(x,	129,	0X70021000);
	create_insn	(x=0X1116B8);
	op_plain_offset	(x,	1,	0X70021000);
	op_plain_offset	(x,	129,	0X70021000);
	create_insn	(x=0X1116BA);
	op_plain_offset	(x,	1,	0X70021000);
	op_plain_offset	(x,	129,	0X70021000);
	create_insn	(x=0X1116BC);
	op_plain_offset	(x,	1,	0X70021000);
	op_plain_offset	(x,	129,	0X70021000);
	create_insn	(x=0X1116CC);
	op_plain_offset	(x,	1,	0X70021000);
	op_plain_offset	(x,	129,	0X70021000);
	create_insn	(x=0X1116DA);
	op_plain_offset	(x,	1,	0X70021000);
	op_plain_offset	(x,	129,	0X70021000);
	create_insn	(x=0X1116DC);
	op_plain_offset	(x,	1,	0X70020080);
	op_plain_offset	(x,	129,	0X70020080);
	create_insn	(x=0X1116E2);
	op_plain_offset	(x,	1,	0X70020080);
	op_plain_offset	(x,	129,	0X70020080);
	create_insn	(x=0X1116E4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1116E6);
	op_plain_offset	(x,	1,	0X70021000);
	op_plain_offset	(x,	129,	0X70021000);
	create_insn	(x=0X1116E8);
	op_plain_offset	(x,	1,	0X70020080);
	op_plain_offset	(x,	129,	0X70020080);
	create_insn	(x=0X1116F2);
	op_plain_offset	(x,	1,	0X70020080);
	op_plain_offset	(x,	129,	0X70020080);
	create_insn	(x=0X1116F4);
	op_plain_offset	(x,	1,	0X70020080);
	op_plain_offset	(x,	129,	0X70020080);
	create_insn	(x=0X1116FA);
	op_plain_offset	(x,	1,	0X70020080);
	op_plain_offset	(x,	129,	0X70020080);
	create_insn	(0X111700);
	create_insn	(x=0X11170A);
	op_stkvar	(x,	1);
	set_cmt	(0X11170C,	"us",	0);
	create_insn	(x=0X111712);
	op_plain_offset	(x,	1,	0X70027100);
	op_plain_offset	(x,	129,	0X70027100);
	create_insn	(x=0X111720);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X11172A);
	op_plain_offset	(x,	1,	0X40002C88);
	op_plain_offset	(x,	129,	0X40002C88);
	create_insn	(0X111730);
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_3(void) {
        auto x;
#define id x

	set_cmt	(0X11173C,	"us",	0);
	create_insn	(x=0X111746);
	op_plain_offset	(x,	1,	0X700221C0);
	op_plain_offset	(x,	129,	0X700221C0);
	create_insn	(x=0X111768);
	op_plain_offset	(x,	1,	0X40002C88);
	op_plain_offset	(x,	129,	0X40002C88);
	create_insn	(x=0X111776);
	op_plain_offset	(x,	1,	0X40002C88);
	op_plain_offset	(x,	129,	0X40002C88);
	create_insn	(0X111782);
	create_insn	(x=0X111784);
	op_stkvar	(x,	1);
	create_insn	(x=0X111786);
	op_stkvar	(x,	1);
	create_insn	(0X11178E);
	create_insn	(x=0X111792);
	op_stkvar	(x,	1);
	create_insn	(x=0X111794);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X11179A);
	op_plain_offset	(x,	1,	0X40004780);
	op_plain_offset	(x,	129,	0X40004780);
	create_insn	(x=0X1117A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X1117A6);
	op_stkvar	(x,	1);
	create_insn	(x=0X1117A8);
	op_plain_offset	(x,	1,	0X70027100);
	op_plain_offset	(x,	129,	0X70027100);
	set_cmt	(0X1117AC,	"us",	0);
	create_insn	(x=0X1117B2);
	op_plain_offset	(x,	1,	0X70027100);
	op_plain_offset	(x,	129,	0X70027100);
	create_insn	(x=0X1117B4);
	op_plain_offset	(x,	1,	0X70027100);
	op_plain_offset	(x,	129,	0X70027100);
	create_insn	(x=0X1117B6);
	op_plain_offset	(x,	1,	0X70027100);
	op_plain_offset	(x,	129,	0X70027100);
	create_insn	(x=0X1117C0);
	op_plain_offset	(x,	1,	0X70027100);
	op_plain_offset	(x,	129,	0X70027100);
	set_cmt	(0X1117C2,	"us",	0);
	create_insn	(x=0X1117CE);
	op_plain_offset	(x,	1,	0X70027100);
	op_plain_offset	(x,	129,	0X70027100);
	create_insn	(x=0X1117D6);
	op_plain_offset	(x,	1,	0X70027100);
	op_plain_offset	(x,	129,	0X70027100);
	create_insn	(x=0X1117DE);
	op_stkvar	(x,	1);
	set_cmt	(0X1117E2,	"us",	0);
	create_insn	(0X1117E2);
	create_insn	(x=0X1117EA);
	op_stkvar	(x,	1);
	create_insn	(x=0X1117F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X1117F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X111802);
	op_stkvar	(x,	1);
	create_insn	(x=0X111808);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X11180E);
	op_plain_offset	(x,	1,	0X40004780);
	op_plain_offset	(x,	129,	0X40004780);
	create_insn	(x=0X111814);
	op_stkvar	(x,	1);
	create_insn	(0X111818);
	create_insn	(x=0X11184C);
	op_plain_offset	(x,	1,	0X40000020);
	op_plain_offset	(x,	129,	0X40000020);
	create_insn	(x=0X111856);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X11185A);
	op_plain_offset	(x,	1,	0X40004718);
	op_plain_offset	(x,	129,	0X40004718);
	create_insn	(x=0X111862);
	op_plain_offset	(x,	1,	0X40004718);
	op_plain_offset	(x,	129,	0X40004718);
	create_insn	(x=0X11186E);
	op_plain_offset	(x,	1,	0X40004718);
	op_plain_offset	(x,	129,	0X40004718);
	create_insn	(0X111872);
	create_insn	(0X111878);
	create_insn	(x=0X11187C);
	op_plain_offset	(x,	1,	0X7009F840);
	op_plain_offset	(x,	129,	0X7009F840);
	create_insn	(x=0X111882);
	op_plain_offset	(x,	1,	0X7009F840);
	op_plain_offset	(x,	129,	0X7009F840);
	create_insn	(x=0X111884);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X111888,	"us",	0);
	create_insn	(x=0X11188E);
	op_plain_offset	(x,	1,	0X7009F840);
	op_plain_offset	(x,	129,	0X7009F840);
	create_insn	(0X11189E);
	set_cmt	(0X1118A8,	"us",	0);
	create_insn	(x=0X1118AE);
	op_plain_offset	(x,	1,	0X7009F840);
	op_plain_offset	(x,	129,	0X7009F840);
	create_insn	(x=0X1118B6);
	op_plain_offset	(x,	1,	0X40002C88);
	op_plain_offset	(x,	129,	0X40002C88);
	create_insn	(x=0X1118C2);
	op_plain_offset	(x,	1,	0X7009F840);
	op_plain_offset	(x,	129,	0X7009F840);
	create_insn	(x=0X1118C8);
	op_plain_offset	(x,	1,	0X7009F840);
	op_plain_offset	(x,	129,	0X7009F840);
	set_cmt	(0X1118CC,	"us",	0);
	create_insn	(x=0X1118D2);
	op_plain_offset	(x,	1,	0X7009F840);
	op_plain_offset	(x,	129,	0X7009F840);
	create_insn	(0X1118E2);
	set_cmt	(0X1118EC,	"us",	0);
	create_insn	(x=0X1118F2);
	op_plain_offset	(x,	1,	0X7009F840);
	op_plain_offset	(x,	129,	0X7009F840);
	create_insn	(x=0X1118FA);
	op_plain_offset	(x,	1,	0X40002C88);
	op_plain_offset	(x,	129,	0X40002C88);
	create_insn	(0X111908);
	create_insn	(x=0X11190C);
	op_plain_offset	(x,	1,	0X7009F840);
	op_plain_offset	(x,	129,	0X7009F840);
	create_insn	(x=0X111914);
	op_plain_offset	(x,	1,	0X7009F840);
	op_plain_offset	(x,	129,	0X7009F840);
	create_insn	(x=0X111916);
	op_plain_offset	(x,	1,	0X7009F840);
	op_plain_offset	(x,	129,	0X7009F840);
	create_insn	(x=0X11191C);
	op_plain_offset	(x,	1,	0X7009F840);
	op_plain_offset	(x,	129,	0X7009F840);
	create_insn	(x=0X11191E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X111922,	"us",	0);
	create_insn	(x=0X111928);
	op_plain_offset	(x,	1,	0X7009F840);
	op_plain_offset	(x,	129,	0X7009F840);
	create_insn	(0X111936);
	set_cmt	(0X11193E,	"us",	0);
	create_insn	(x=0X111944);
	op_plain_offset	(x,	1,	0X7009F840);
	op_plain_offset	(x,	129,	0X7009F840);
	create_insn	(x=0X11194A);
	op_plain_offset	(x,	1,	0X40002C88);
	op_plain_offset	(x,	129,	0X40002C88);
	create_insn	(x=0X111956);
	op_plain_offset	(x,	1,	0X7009F840);
	op_plain_offset	(x,	129,	0X7009F840);
	create_insn	(x=0X11195A);
	op_plain_offset	(x,	1,	0X7009F840);
	op_plain_offset	(x,	129,	0X7009F840);
	set_cmt	(0X11195E,	"us",	0);
	create_insn	(x=0X111964);
	op_plain_offset	(x,	1,	0X7009F840);
	op_plain_offset	(x,	129,	0X7009F840);
	create_insn	(0X111972);
	set_cmt	(0X11197A,	"us",	0);
	create_insn	(x=0X111980);
	op_plain_offset	(x,	1,	0X7009F840);
	op_plain_offset	(x,	129,	0X7009F840);
	create_insn	(x=0X111986);
	op_plain_offset	(x,	1,	0X40002C88);
	op_plain_offset	(x,	129,	0X40002C88);
	create_insn	(x=0X111992);
	op_plain_offset	(x,	1,	0X7009F840);
	op_plain_offset	(x,	129,	0X7009F840);
	create_insn	(x=0X11199A);
	op_plain_offset	(x,	1,	0X7009F840);
	op_plain_offset	(x,	129,	0X7009F840);
	create_dword	(x=0X1119A0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1119A4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1119A8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1119AC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1119B0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X1119B4);
	create_dword	(0X1119B8);
	create_dword	(x=0X1119BC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1119C0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X1119C4);
	create_dword	(0X1119C8);
	set_name	(0X1119C8,	"us");
	create_dword	(0X1119CC);
	create_dword	(x=0X1119D0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1119D4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X1119D8);
	set_name	(0X1119D8,	"sdmmc_reset_maybe");
	create_insn	(x=0X1119DE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1119E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X1119EA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1119F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X1119F6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1119F8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1119FA);
	op_plain_offset	(x,	1,	0X40002C98);
	op_plain_offset	(x,	129,	0X40002C98);
	create_insn	(x=0X1119FE);
	op_plain_offset	(x,	1,	0X700B0600);
	op_plain_offset	(x,	129,	0X700B0600);
	create_insn	(x=0X111A04);
	op_stkvar	(x,	1);
	create_insn	(x=0X111A06);
	op_plain_offset	(x,	1,	0X700B0600);
	op_plain_offset	(x,	129,	0X700B0600);
	create_insn	(0X111A12);
	create_insn	(0X111A1E);
	set_cmt	(0X111A26,	"a2",	0);
	set_cmt	(0X111A28,	"a1",	0);
	set_cmt	(0X111A2E,	"a2",	0);
	set_cmt	(0X111A32,	"a1",	0);
	create_insn	(x=0X111A3C);
	op_stkvar	(x,	1);
	set_cmt	(0X111A42,	"a1",	0);
	set_cmt	(0X111A48,	"a2",	0);
	set_cmt	(0X111A4C,	"a1",	0);
	create_insn	(x=0X111A66);
	op_stkvar	(x,	1);
	create_insn	(x=0X111A6E);
	op_stkvar	(x,	1);
	set_cmt	(0X111A84,	"a1",	0);
	set_cmt	(0X111A86,	"a2",	0);
	create_insn	(x=0X111AAE);
	op_stkvar	(x,	1);
	create_insn	(x=0X111ABA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X111AC0);
	op_plain_offset	(x,	1,	0X700B0600);
	op_plain_offset	(x,	129,	0X700B0600);
	create_insn	(x=0X111ACC);
	op_plain_offset	(x,	1,	0X700B0600);
	op_plain_offset	(x,	129,	0X700B0600);
	create_insn	(x=0X111AD2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X111AD6);
	op_plain_offset	(x,	1,	0X40002C98);
	op_plain_offset	(x,	129,	0X40002C98);
	set_cmt	(0X111AE6,	"a1",	0);
	set_cmt	(0X111AE8,	"a2",	0);
	create_insn	(0X111AF2);
	set_cmt	(0X111B0C,	"a1",	0);
	set_cmt	(0X111B0E,	"a2",	0);
	create_insn	(x=0X111B16);
	op_stkvar	(x,	1);
	create_insn	(x=0X111B3A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X111B3C);
	op_plain_offset	(x,	1,	0X700B0600);
	op_plain_offset	(x,	129,	0X700B0600);
	create_insn	(x=0X111B48);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X111B48,	"sdmmc_set_data_transfer_mode");
	create_insn	(x=0X111B4C);
	op_plain_offset	(x,	1,	0X700B0600);
	op_plain_offset	(x,	129,	0X700B0600);
	create_insn	(x=0X111B6C);
	op_plain_offset	(x,	1,	0X700B0600);
	op_plain_offset	(x,	129,	0X700B0600);
	create_insn	(x=0X111B6E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X111B70);
	op_plain_offset	(x,	1,	0X40002C98);
	op_plain_offset	(x,	129,	0X40002C98);
	create_insn	(0X111B78);
	set_name	(0X111B78,	"sdmmc_reset");
	create_insn	(x=0X111B7A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X111B7C);
	op_plain_offset	(x,	1,	0X40002C98);
	op_plain_offset	(x,	129,	0X40002C98);
	create_insn	(0X111B8C);
	create_insn	(x=0X111B8E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X111B90);
	op_plain_offset	(x,	1,	0X40004798);
	op_plain_offset	(x,	129,	0X40004798);
	create_insn	(x=0X111B96);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X111B98);
	op_plain_offset	(x,	1,	0X7000E4C0);
	op_plain_offset	(x,	129,	0X7000E4C0);
	create_insn	(x=0X111B9E);
	op_plain_offset	(x,	1,	0X7000E4C0);
	op_plain_offset	(x,	129,	0X7000E4C0);
	set_cmt	(0X111BA6,	"rst_state",	0);
	set_cmt	(0X111BA8,	"reg_offset_and_bit",	0);
	set_cmt	(0X111BBA,	"a2",	0);
	set_cmt	(0X111BBC,	"a1",	0);
	set_cmt	(0X111BC2,	"rst_state",	0);
	set_cmt	(0X111BC4,	"reg_offset_and_bit",	0);
	create_insn	(x=0X111BCE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X111BD0);
	op_plain_offset	(x,	1,	0X700B07C0);
	op_plain_offset	(x,	129,	0X700B07C0);
	create_insn	(x=0X111BE0);
	op_plain_offset	(x,	1,	0X700B07C0);
	op_plain_offset	(x,	129,	0X700B07C0);
	create_insn	(x=0X111BE2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X111BE6);
	op_plain_offset	(x,	1,	0X700B0780);
	op_plain_offset	(x,	129,	0X700B0780);
	create_insn	(x=0X111BEC);
	op_plain_offset	(x,	1,	0X700B0780);
	op_plain_offset	(x,	129,	0X700B0780);
	create_insn	(x=0X111BEE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X111BF4);
	op_plain_offset	(x,	1,	0X40002C98);
	op_plain_offset	(x,	129,	0X40002C98);
	create_insn	(x=0X111BF6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X111C0E);
	op_plain_offset	(x,	1,	0X115B24);
	op_plain_offset	(x,	129,	0X115B24);
	create_insn	(x=0X111C10);
	op_plain_offset	(x,	1,	0X115B24);
	op_plain_offset	(x,	129,	0X115B24);
	create_insn	(0X111C1E);
	set_cmt	(0X111C36,	"us",	0);
	create_insn	(x=0X111C3E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X111C40);
	op_plain_offset	(x,	1,	0X700B0600);
	op_plain_offset	(x,	129,	0X700B0600);
	create_insn	(x=0X111C4A);
	op_plain_offset	(x,	1,	0X700B0600);
	op_plain_offset	(x,	129,	0X700B0600);
	create_insn	(x=0X111C4C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X111C7E);
	create_insn	(0X111C88);
	create_insn	(0X111C92);
	create_insn	(x=0X111C9A);
	op_plain_offset	(x,	1,	0X700B0600);
	op_plain_offset	(x,	129,	0X700B0600);
	create_insn	(x=0X111C9C);
	op_plain_offset	(x,	1,	0X40002C98);
	op_plain_offset	(x,	129,	0X40002C98);
	create_insn	(x=0X111CB4);
	op_plain_offset	(x,	1,	0X700B0600);
	op_plain_offset	(x,	129,	0X700B0600);
	create_insn	(0X111CC2);
	set_name	(0X111CC2,	"sdmmc_read_response");
	create_insn	(x=0X111CC4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X111CC8,	"switch 10 cases ",	0);
	create_byte	(0X111CCC);
	set_cmt	(0X111CCD,	"jump table for switch statement",	0);
	create_byte	(0X111CCD);
	make_array	(0X111CCD,	0XA);
	set_cmt	(0X111CD8,	"jumptable 00111CC8 cases 1,3-8",	1);
	create_insn	(x=0X111CD8);
	op_plain_offset	(x,	1,	0X700B0600);
	op_plain_offset	(x,	129,	0X700B0600);
	set_cmt	(0X111CDC,	"jumptable 00111CC8 case 2",	1);
	create_insn	(x=0X111CDC);
	op_plain_offset	(x,	1,	0X700B0600);
	op_plain_offset	(x,	129,	0X700B0600);
	create_insn	(x=0X111CE2);
	op_plain_offset	(x,	1,	0X700B0600);
	op_plain_offset	(x,	129,	0X700B0600);
	create_insn	(x=0X111CE8);
	op_plain_offset	(x,	1,	0X700B0600);
	op_plain_offset	(x,	129,	0X700B0600);
	create_insn	(x=0X111CEE);
	op_plain_offset	(x,	1,	0X700B0600);
	op_plain_offset	(x,	129,	0X700B0600);
	set_cmt	(0X111CF8,	"jumptable 00111CC8 default case",	1);
	create_insn	(0X111CF8);
	create_insn	(0X111CFC);
	set_name	(0X111CFC,	"sdmmc_wait_dat_free");
	create_insn	(x=0X111CFE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X111D02);
	op_plain_offset	(x,	1,	0X40002C98);
	op_plain_offset	(x,	129,	0X40002C98);
	create_insn	(x=0X111D0E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X111D10);
	op_plain_offset	(x,	1,	0X700B0600);
	op_plain_offset	(x,	129,	0X700B0600);
	set_cmt	(0X111D18,	"us",	0);
	create_insn	(0X111D2A);
	create_insn	(0X111D2E);
	set_name	(0X111D2E,	"sdmmc_wait_transfer_done");
	create_insn	(x=0X111D32);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X111D38);
	op_plain_offset	(x,	1,	0X700B0600);
	op_plain_offset	(x,	129,	0X700B0600);
	create_insn	(0X111D46);
	set_cmt	(0X111D4A,	"us",	0);
	create_insn	(0X111D58);
	create_insn	(0X111D5C);
	set_name	(0X111D5C,	"sdmmc_recover_from_error_maybe");
	create_insn	(x=0X111D60);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X111D68);
	op_stkvar	(x,	1);
	create_insn	(x=0X111D6C);
	op_plain_offset	(x,	1,	0X700B0600);
	op_plain_offset	(x,	129,	0X700B0600);
	create_insn	(x=0X111D72);
	op_plain_offset	(x,	1,	0X700B0600);
	op_plain_offset	(x,	129,	0X700B0600);
	create_insn	(x=0X111D7E);
	op_plain_offset	(x,	1,	0X700B0600);
	op_plain_offset	(x,	129,	0X700B0600);
	create_insn	(x=0X111D80);
	op_plain_offset	(x,	1,	0X700B0600);
	op_plain_offset	(x,	129,	0X700B0600);
	set_cmt	(0X111D88,	"us",	0);
	create_insn	(0X111D94);
	create_insn	(x=0X111D98);
	op_stkvar	(x,	1);
	create_insn	(x=0X111DA4);
	op_plain_offset	(x,	1,	0X700B0600);
	op_plain_offset	(x,	129,	0X700B0600);
	create_insn	(x=0X111DA8);
	op_plain_offset	(x,	1,	0X700B0600);
	op_plain_offset	(x,	129,	0X700B0600);
	set_cmt	(0X111DB0,	"us",	0);
	create_insn	(0X111DBE);
	create_dword	(x=0X111DCC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X111DD0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X111DD4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X111DD8);
	create_dword	(0X111DDC);
	create_dword	(0X111DE0);
	create_dword	(0X111DE4);
	create_dword	(x=0X111DE8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X111DEC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X111DF0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X111DF4);
	create_dword	(0X111DF8);
	create_dword	(0X111DFC);
	create_insn	(x=0X111E00);
	op_plain_offset	(x,	1,	0X700B0600);
	op_plain_offset	(x,	129,	0X700B0600);
	create_insn	(x=0X111E02);
	op_stkvar	(x,	1);
	create_insn	(x=0X111E08);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X111E0C);
	op_plain_offset	(x,	1,	0X40002C98);
	op_plain_offset	(x,	129,	0X40002C98);
	create_insn	(x=0X111E12);
	op_stkvar	(x,	1);
	create_insn	(x=0X111E14);
	op_plain_offset	(x,	1,	0X700B0600);
	op_plain_offset	(x,	129,	0X700B0600);
	create_insn	(x=0X111E16);
	op_plain_offset	(x,	1,	0X700B0600);
	op_plain_offset	(x,	129,	0X700B0600);
	create_insn	(x=0X111E18);
	op_plain_offset	(x,	1,	0X700B0600);
	op_plain_offset	(x,	129,	0X700B0600);
	create_insn	(x=0X111E1C);
	op_plain_offset	(x,	1,	0X700B0600);
	op_plain_offset	(x,	129,	0X700B0600);
	create_insn	(x=0X111E1E);
	op_plain_offset	(x,	1,	0X700B0600);
	op_plain_offset	(x,	129,	0X700B0600);
	create_insn	(0X111E32);
	create_insn	(x=0X111E46);
	op_stkvar	(x,	1);
	set_cmt	(0X111E4E,	"us",	0);
	create_insn	(x=0X111E54);
	op_plain_offset	(x,	1,	0X700B0600);
	op_plain_offset	(x,	129,	0X700B0600);
	create_insn	(x=0X111E60);
	op_plain_offset	(x,	1,	0X700B0600);
	op_plain_offset	(x,	129,	0X700B0600);
	create_insn	(0X111E6A);
	create_insn	(0X111E6E);
	set_name	(0X111E6E,	"sdmmc_transfer");
	create_insn	(x=0X111E72);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X111E76);
	op_plain_offset	(x,	1,	0X40002C98);
	op_plain_offset	(x,	129,	0X40002C98);
	create_insn	(x=0X111E7E);
	op_stkvar	(x,	1);
	create_insn	(x=0X111E8C);
	op_stkvar	(x,	1);
	create_insn	(x=0X111EA0);
	op_stkvar	(x,	1);
	create_insn	(0X111ED0);
	create_insn	(0X111EDC);
	create_insn	(x=0X111EE2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X111EE4);
	op_plain_offset	(x,	1,	0X700B0600);
	op_plain_offset	(x,	129,	0X700B0600);
	create_insn	(x=0X111EE6);
	op_plain_offset	(x,	1,	0X700B0600);
	op_plain_offset	(x,	129,	0X700B0600);
	create_insn	(x=0X111EE8);
	op_plain_offset	(x,	1,	0X700B0600);
	op_plain_offset	(x,	129,	0X700B0600);
	create_insn	(x=0X111EEA);
	op_stkvar	(x,	1);
	create_insn	(x=0X111EEC);
	op_plain_offset	(x,	1,	0X700B0600);
	op_plain_offset	(x,	129,	0X700B0600);
	create_insn	(x=0X111EEE);
	op_plain_offset	(x,	1,	0X700B0600);
	op_plain_offset	(x,	129,	0X700B0600);
	create_insn	(x=0X111EF8);
	op_stkvar	(x,	1);
	create_insn	(0X111F04);
	set_cmt	(0X111F1C,	"out",	0);
	create_insn	(x=0X111F1C);
	op_stkvar	(x,	1);
	set_cmt	(0X111F1E,	"num",	0);
	create_insn	(0X111F2A);
	set_name	(0X111F2A,	"sdmmc_some_speed_divisions");
	create_insn	(x=0X111F2C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X111F2E);
	op_plain_offset	(x,	1,	0X40002C98);
	op_plain_offset	(x,	129,	0X40002C98);
	set_cmt	(0X111F34,	"a2",	0);
	set_cmt	(0X111F5C,	"a1",	0);
	set_cmt	(0X111F62,	"a2",	0);
	set_cmt	(0X111F6C,	"a1",	0);
	create_insn	(0X111F76);
	set_cmt	(0X111F82,	"a2",	0);
	set_cmt	(0X111F84,	"a1",	0);
	set_cmt	(0X111F92,	"a2",	0);
	set_cmt	(0X111F94,	"a1",	0);
	create_insn	(0X111FA6);
	set_name	(0X111FA6,	"sdmmc_check_return?");
	create_insn	(x=0X111FA8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X111FAA);
	op_plain_offset	(x,	1,	0X40002C98);
	op_plain_offset	(x,	129,	0X40002C98);
	create_insn	(x=0X111FB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X111FE6);
	op_stkvar	(x,	1);
	create_insn	(0X111FF4);
	create_insn	(0X112000);
	create_insn	(0X11200E);
	create_insn	(0X11201C);
	create_insn	(0X11202C);
	create_insn	(0X112030);
	set_name	(0X112030,	"sdmmc_get_status");
	create_insn	(x=0X112032);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X112036);
	op_plain_offset	(x,	1,	0X40002C98);
	op_plain_offset	(x,	129,	0X40002C98);
	create_insn	(x=0X112044);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X112046);
	op_plain_offset	(x,	1,	0X700B0600);
	op_plain_offset	(x,	129,	0X700B0600);
	create_insn	(0X11205A);
	create_insn	(x=0X11205E);
	op_plain_offset	(x,	1,	0X40002C98);
	op_plain_offset	(x,	129,	0X40002C98);
	create_insn	(0X11206E);
	create_insn	(x=0X112074);
	op_plain_offset	(x,	1,	0X700B0600);
	op_plain_offset	(x,	129,	0X700B0600);
	create_insn	(0X11207C);
	create_insn	(x=0X112086);
	op_plain_offset	(x,	1,	0X700B0600);
	op_plain_offset	(x,	129,	0X700B0600);
	create_insn	(x=0X1120AE);
	op_plain_offset	(x,	1,	0X40002C98);
	op_plain_offset	(x,	129,	0X40002C98);
	create_insn	(0X1120B4);
	create_insn	(x=0X1120BA);
	op_plain_offset	(x,	1,	0X40002C98);
	op_plain_offset	(x,	129,	0X40002C98);
	create_insn	(x=0X1120CA);
	op_plain_offset	(x,	1,	0X40002C98);
	op_plain_offset	(x,	129,	0X40002C98);
	create_insn	(0X1120D0);
	set_name	(0X1120D0,	"sdmmc_read_fixed");
	create_insn	(x=0X1120D2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1120D8);
	op_plain_offset	(x,	1,	0X40002C98);
	op_plain_offset	(x,	129,	0X40002C98);
	set_cmt	(0X1120EC,	"mode",	0);
	create_insn	(0X1120EC);
	set_cmt	(0X1120FA,	"block_count",	0);
	create_insn	(x=0X112102);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X112106);
	op_plain_offset	(x,	1,	0X40002C98);
	op_plain_offset	(x,	129,	0X40002C98);
	create_insn	(x=0X112112);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X112118);
	op_plain_offset	(x,	1,	0X700B0640);
	op_plain_offset	(x,	129,	0X700B0640);
	create_insn	(x=0X11212C);
	op_plain_offset	(x,	1,	0X700B0600);
	op_plain_offset	(x,	129,	0X700B0600);
	create_insn	(x=0X112132);
	op_plain_offset	(x,	1,	0X700B0600);
	op_plain_offset	(x,	129,	0X700B0600);
	create_insn	(x=0X112134);
	op_plain_offset	(x,	1,	0X700B0600);
	op_plain_offset	(x,	129,	0X700B0600);
	create_insn	(x=0X11213A);
	op_plain_offset	(x,	1,	0X700B0600);
	op_plain_offset	(x,	129,	0X700B0600);
	create_insn	(x=0X11213E);
	op_plain_offset	(x,	1,	0X700B0600);
	op_plain_offset	(x,	129,	0X700B0600);
	create_insn	(x=0X112142);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X112144);
	op_plain_offset	(x,	1,	0X700B0700);
	op_plain_offset	(x,	129,	0X700B0700);
	create_insn	(x=0X112148);
	op_plain_offset	(x,	1,	0X700B0700);
	op_plain_offset	(x,	129,	0X700B0700);
	create_insn	(x=0X11214A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X11214E);
	op_plain_offset	(x,	1,	0X700B0600);
	op_plain_offset	(x,	129,	0X700B0600);
	create_insn	(x=0X112152);
	op_plain_offset	(x,	1,	0X700B0600);
	op_plain_offset	(x,	129,	0X700B0600);
	create_insn	(x=0X112156);
	op_plain_offset	(x,	1,	0X700B0600);
	op_plain_offset	(x,	129,	0X700B0600);
	create_insn	(x=0X11216C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X112170);
	op_plain_offset	(x,	1,	0X700B0700);
	op_plain_offset	(x,	129,	0X700B0700);
	create_insn	(x=0X112172);
	op_plain_offset	(x,	1,	0X40002C98);
	op_plain_offset	(x,	129,	0X40002C98);
	create_insn	(x=0X11217C);
	op_plain_offset	(x,	1,	0X40002C98);
	op_plain_offset	(x,	129,	0X40002C98);
	create_insn	(x=0X112196);
	op_plain_offset	(x,	1,	0X40002C98);
	op_plain_offset	(x,	129,	0X40002C98);
	create_insn	(x=0X1121A2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1121A6);
	create_insn	(x=0X1121A8);
	op_plain_offset	(x,	1,	0X700B0700);
	op_plain_offset	(x,	129,	0X700B0700);
	create_insn	(x=0X1121AA);
	op_plain_offset	(x,	1,	0X700B0700);
	op_plain_offset	(x,	129,	0X700B0700);
	create_insn	(x=0X1121B6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1121B8);
	op_plain_offset	(x,	1,	0X700B0600);
	op_plain_offset	(x,	129,	0X700B0600);
	create_insn	(x=0X1121BA);
	op_plain_offset	(x,	1,	0X700B0600);
	op_plain_offset	(x,	129,	0X700B0600);
	create_insn	(0X1121C0);
	create_insn	(0X1121C6);
	create_insn	(x=0X1121C8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1121CA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1121CC);
	op_plain_offset	(x,	1,	0X40002C98);
	op_plain_offset	(x,	129,	0X40002C98);
	create_insn	(x=0X1121D2);
	op_stkvar	(x,	1);
	create_insn	(x=0X1121D4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1121EC);
	op_stkvar	(x,	1);
	create_dword	(x=0X112204);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X112208);
	create_dword	(x=0X11220C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X112210);
	create_dword	(x=0X112214);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X112218);
	create_dword	(x=0X11221C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X112220);
	op_stkvar	(x,	1);
	create_insn	(x=0X112236);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X11223A);
	op_plain_offset	(x,	1,	0X40002C98);
	op_plain_offset	(x,	129,	0X40002C98);
	create_insn	(x=0X112242);
	op_plain_offset	(x,	1,	0X40002C98);
	op_plain_offset	(x,	129,	0X40002C98);
	create_insn	(0X112248);
	create_insn	(x=0X11224C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X112250);
	op_plain_offset	(x,	1,	0X40002C98);
	op_plain_offset	(x,	129,	0X40002C98);
	create_insn	(x=0X11225C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X11225E);
	op_plain_offset	(x,	1,	0X40002C98);
	op_plain_offset	(x,	129,	0X40002C98);
	create_insn	(x=0X11226C);
	op_stkvar	(x,	1);
	create_insn	(x=0X112270);
	op_stkvar	(x,	1);
	create_insn	(x=0X11227A);
	op_stkvar	(x,	1);
	set_cmt	(0X112282,	"us",	0);
	create_insn	(0X112298);
	create_insn	(x=0X11229C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X11229E);
	op_plain_offset	(x,	1,	0X40002C98);
	op_plain_offset	(x,	129,	0X40002C98);
	create_insn	(0X1122A6);
	set_name	(0X1122A6,	"sdmmc_read_csd");
	create_insn	(x=0X1122A8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1122AC);
	op_plain_offset	(x,	1,	0X40002C98);
	op_plain_offset	(x,	129,	0X40002C98);
	create_insn	(x=0X1122C2);
	op_plain_offset	(x,	1,	0X40002C98);
	op_plain_offset	(x,	129,	0X40002C98);
	create_insn	(0X1122E0);
	create_insn	(0X1122E8);
	create_insn	(0X112350);
	set_name	(0X112350,	"sdmmc_switch");
	create_insn	(x=0X112362);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X112366);
	op_plain_offset	(x,	1,	0X40002C98);
	op_plain_offset	(x,	129,	0X40002C98);
	create_insn	(0X112380);
	create_insn	(x=0X112382);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X112386);
	op_plain_offset	(x,	1,	0X40002C98);
	op_plain_offset	(x,	129,	0X40002C98);
	create_insn	(x=0X1123A4);
	op_plain_offset	(x,	1,	0X40002C98);
	op_plain_offset	(x,	129,	0X40002C98);
	create_insn	(0X1123AA);
	set_name	(0X1123AA,	"sdmmc_get_ext_csd");
	create_insn	(x=0X1123AC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1123AE);
	op_plain_offset	(x,	1,	0X40002C98);
	op_plain_offset	(x,	129,	0X40002C98);
	set_cmt	(0X1123BA,	"block_count",	0);
	create_insn	(x=0X1123C0);
	op_plain_offset	(x,	1,	0X40002C98);
	op_plain_offset	(x,	129,	0X40002C98);
	create_insn	(x=0X1123C2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1123C8,	"type?",	0);
	set_cmt	(0X1123CA,	"argument",	0);
	set_cmt	(0X1123CC,	"cmd",	0);
	set_cmt	(0X1123CE,	"stop_transmission",	0);
	create_insn	(x=0X1123E8);
	op_plain_offset	(x,	1,	0X40002C98);
	op_plain_offset	(x,	129,	0X40002C98);
	create_insn	(x=0X1123F2);
	op_plain_offset	(x,	1,	0X40002C98);
	op_plain_offset	(x,	129,	0X40002C98);
	create_insn	(0X112406);
	create_insn	(x=0X112412);
	op_plain_offset	(x,	1,	0X40002C98);
	op_plain_offset	(x,	129,	0X40002C98);
	create_insn	(x=0X11246E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X11246E,	"sdmmc_some_field");
	create_insn	(x=0X112472);
	op_plain_offset	(x,	1,	0X40002C98);
	op_plain_offset	(x,	129,	0X40002C98);
	create_insn	(0X112490);
	create_insn	(x=0X112494);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X112498);
	op_plain_offset	(x,	1,	0X40002C98);
	op_plain_offset	(x,	129,	0X40002C98);
	create_insn	(0X1124B0);
	create_insn	(0X1124B4);
	create_insn	(0X1124BC);
	create_insn	(0X1124D0);
	create_insn	(0X1124DE);
	create_insn	(0X1124E2);
	create_insn	(x=0X1124E4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1124E8);
	op_plain_offset	(x,	1,	0X40002C98);
	op_plain_offset	(x,	129,	0X40002C98);
	create_insn	(x=0X1124F8);
	op_plain_offset	(x,	1,	0X40002C98);
	op_plain_offset	(x,	129,	0X40002C98);
	set_cmt	(0X1124FA,	"result",	0);
	create_insn	(0X112504);
	set_name	(0X112504,	"sdmmc_init_sequence");
	create_insn	(x=0X112534);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X112536,	"n",	0);
	create_insn	(x=0X112538);
	op_plain_offset	(x,	1,	0X40002C98);
	op_plain_offset	(x,	129,	0X40002C98);
	create_insn	(x=0X11253A);
	op_plain_offset	(x,	1,	0X40002C98);
	op_plain_offset	(x,	129,	0X40002C98);
	set_cmt	(0X11253C,	"src",	0);
	set_cmt	(0X11253E,	"dst",	0);
	create_insn	(x=0X112544);
	op_plain_offset	(x,	1,	0X40002C98);
	op_plain_offset	(x,	129,	0X40002C98);
	create_insn	(x=0X112562);
	op_plain_offset	(x,	1,	0X40002C98);
	op_plain_offset	(x,	129,	0X40002C98);
	create_insn	(x=0X112574);
	op_plain_offset	(x,	1,	0X40002C98);
	op_plain_offset	(x,	129,	0X40002C98);
	create_insn	(x=0X11259A);
	op_plain_offset	(x,	1,	0X40002C98);
	op_plain_offset	(x,	129,	0X40002C98);
	set_cmt	(0X1125A4,	"result",	0);
	create_insn	(x=0X1125B8);
	op_plain_offset	(x,	1,	0X40002C98);
	op_plain_offset	(x,	129,	0X40002C98);
	set_cmt	(0X1125C0,	"a1",	0);
	create_insn	(x=0X1125D8);
	op_plain_offset	(x,	1,	0X40002C98);
	op_plain_offset	(x,	129,	0X40002C98);
	create_insn	(x=0X1125FE);
	op_plain_offset	(x,	1,	0X40002C98);
	op_plain_offset	(x,	129,	0X40002C98);
	create_insn	(0X11261A);
	create_insn	(0X11261C);
	create_insn	(x=0X11262A);
	op_plain_offset	(x,	1,	0X40002C98);
	op_plain_offset	(x,	129,	0X40002C98);
	create_dword	(0X112630);
	create_dword	(x=0X112634);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X112638);
	create_dword	(0X11263C);
	create_dword	(0X112640);
	create_dword	(0X112644);
	create_dword	(x=0X112648);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X11264C);
	create_insn	(0X112650);
	create_insn	(0X112658);
	create_insn	(0X11265C);
	create_insn	(0X112664);
	create_insn	(0X112672);
	create_insn	(x=0X112674);
	op_plain_offset	(x,	1,	0X40002C98);
	op_plain_offset	(x,	129,	0X40002C98);
	create_insn	(0X11267C);
	set_name	(0X11267C,	"bootdev_sd_load_config");
	create_insn	(x=0X112682);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X11268A);
	op_dec		(x,	1);
	create_insn	(x=0X112690);
	op_dec		(x,	1);
	create_insn	(x=0X112694);
	op_plain_offset	(x,	1,	0X400047A4);
	op_plain_offset	(x,	129,	0X400047A4);
	create_insn	(x=0X112698);
	op_plain_offset	(x,	1,	0X40004798);
	op_plain_offset	(x,	129,	0X40004798);
	create_insn	(x=0X1126A2);
	op_plain_offset	(x,	1,	0X40004798);
	op_plain_offset	(x,	129,	0X40004798);
	create_insn	(x=0X1126A4);
	op_plain_offset	(x,	1,	0X40004798);
	op_plain_offset	(x,	129,	0X40004798);
	create_insn	(x=0X1126AE);
	op_plain_offset	(x,	1,	0X40004798);
	op_plain_offset	(x,	129,	0X40004798);
	create_insn	(x=0X1126B0);
	op_plain_offset	(x,	1,	0X40004798);
	op_plain_offset	(x,	129,	0X40004798);
	create_insn	(0X1126BC);
	create_insn	(x=0X1126C2);
	op_plain_offset	(x,	1,	0X400047A4);
	op_plain_offset	(x,	129,	0X400047A4);
	create_insn	(x=0X1126C4);
	op_plain_offset	(x,	1,	0X400047A4);
	op_plain_offset	(x,	129,	0X400047A4);
	create_insn	(x=0X1126C6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1126CA);
	op_plain_offset	(x,	1,	0X40002C98);
	op_plain_offset	(x,	129,	0X40002C98);
	create_insn	(x=0X1126D6);
	op_plain_offset	(x,	1,	0X400047A4);
	op_plain_offset	(x,	129,	0X400047A4);
	create_insn	(0X1126E0);
	create_insn	(x=0X1126E6);
	op_plain_offset	(x,	1,	0X400047A4);
	op_plain_offset	(x,	129,	0X400047A4);
	create_insn	(0X1126F0);
	set_name	(0X1126F0,	"bootdev_sd_verify_config");
	create_insn	(0X11271A);
	create_insn	(x=0X11271E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X11271E,	"bootdev_sd_field8");
	create_insn	(x=0X112722);
	op_plain_offset	(x,	1,	0X40002C98);
	op_plain_offset	(x,	129,	0X40002C98);
	create_insn	(0X112738);
	set_name	(0X112738,	"bootdev_sd_init");
	create_insn	(x=0X11273A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X112744);
	op_plain_offset	(x,	1,	0X40002C98);
	op_plain_offset	(x,	129,	0X40002C98);
	create_insn	(x=0X11277E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X112782);
	op_plain_offset	(x,	1,	0X40004798);
	op_plain_offset	(x,	129,	0X40004798);
	create_insn	(x=0X112788);
	op_plain_offset	(x,	1,	0X40002C98);
	op_plain_offset	(x,	129,	0X40002C98);
	set_cmt	(0X11278E,	"block_count",	0);
	set_cmt	(0X112790,	"dest",	0);
	create_insn	(x=0X1127AA);
	op_plain_offset	(x,	1,	0X40002C98);
	op_plain_offset	(x,	129,	0X40002C98);
	create_insn	(x=0X1127B0);
	op_plain_offset	(x,	1,	0X40002C98);
	op_plain_offset	(x,	129,	0X40002C98);
	set_cmt	(0X1127C6,	"type?",	0);
	set_cmt	(0X1127C8,	"stop_transmission",	0);
	set_cmt	(0X1127CC,	"cmd",	0);
	create_insn	(0X1127E0);
	set_name	(0X1127E0,	"bootdev_sd_read");
	create_insn	(x=0X1127E4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1127E8);
	op_plain_offset	(x,	1,	0X40002C98);
	op_plain_offset	(x,	129,	0X40002C98);
	create_insn	(x=0X1127FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X1127FE);
	op_stkvar	(x,	1);
	create_insn	(x=0X112808);
	op_stkvar	(x,	1);
	create_insn	(x=0X11280A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X11280E);
	op_plain_offset	(x,	1,	0X40002C98);
	op_plain_offset	(x,	129,	0X40002C98);
	create_insn	(0X11281E);
	create_insn	(x=0X112822);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X112840,	"src",	0);
	set_cmt	(0X112842,	"n",	0);
	create_insn	(x=0X112842);
	op_stkvar	(x,	1);
	set_cmt	(0X112844,	"dst",	0);
	create_insn	(0X11284E);
	create_insn	(x=0X112856);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X11285C);
	op_plain_offset	(x,	1,	0X700B0600);
	op_plain_offset	(x,	129,	0X700B0600);
	set_cmt	(0X112864,	"us",	0);
	create_insn	(x=0X112878);
	op_stkvar	(x,	1);
	create_insn	(x=0X11287A);
	op_stkvar	(x,	1);
	create_insn	(x=0X112884);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X112886);
	op_stkvar	(x,	1);
	create_insn	(x=0X112888);
	op_plain_offset	(x,	1,	0X40002C98);
	op_plain_offset	(x,	129,	0X40002C98);
	set_cmt	(0X1128A4,	"a2",	0);
	create_insn	(0X1128A4);
	set_cmt	(0X1128A6,	"a1",	0);
	create_insn	(x=0X1128A6);
	op_stkvar	(x,	1);
	create_insn	(x=0X1128AC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1128B0);
	op_plain_offset	(x,	1,	0X40002C98);
	op_plain_offset	(x,	129,	0X40002C98);
	create_insn	(x=0X1128FA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1128FE);
	op_plain_offset	(x,	1,	0X40002C98);
	op_plain_offset	(x,	129,	0X40002C98);
	create_insn	(x=0X112906);
	op_plain_offset	(x,	1,	0X40002C98);
	op_plain_offset	(x,	129,	0X40002C98);
	create_insn	(0X11290C);
	create_insn	(0X112914);
	create_insn	(x=0X112916);
	op_plain_offset	(x,	1,	0X700B0600);
	op_plain_offset	(x,	129,	0X700B0600);
	create_insn	(x=0X112922);
	op_plain_offset	(x,	1,	0X700B0600);
	op_plain_offset	(x,	129,	0X700B0600);
	create_insn	(x=0X112924);
	op_plain_offset	(x,	1,	0X700B0600);
	op_plain_offset	(x,	129,	0X700B0600);
	set_cmt	(0X11292C,	"us",	0);
	create_insn	(x=0X112936);
	op_plain_offset	(x,	1,	0X700B0600);
	op_plain_offset	(x,	129,	0X700B0600);
	create_insn	(x=0X112940);
	op_plain_offset	(x,	1,	0X700B0600);
	op_plain_offset	(x,	129,	0X700B0600);
	create_insn	(x=0X112946);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X112946,	"bootdev_sdmmc_disable");
	create_insn	(x=0X11294A);
	op_plain_offset	(x,	1,	0X700B0600);
	op_plain_offset	(x,	129,	0X700B0600);
	create_insn	(x=0X112950);
	op_plain_offset	(x,	1,	0X700B0600);
	op_plain_offset	(x,	129,	0X700B0600);
	create_insn	(x=0X112952);
	op_plain_offset	(x,	1,	0X700B0600);
	op_plain_offset	(x,	129,	0X700B0600);
	create_insn	(x=0X112958);
	op_plain_offset	(x,	1,	0X700B0600);
	op_plain_offset	(x,	129,	0X700B0600);
	set_cmt	(0X11295A,	"rst_state",	0);
	set_cmt	(0X11295C,	"reg_offset_and_bit",	0);
	set_cmt	(0X112962,	"reg_offset_and_bit",	0);
	set_cmt	(0X112964,	"enable",	0);
	create_insn	(x=0X11296A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X11296E);
	op_plain_offset	(x,	1,	0X40002C98);
	op_plain_offset	(x,	129,	0X40002C98);
	create_insn	(0X112972);
	set_name	(0X112972,	"bootdev_sd_field1C");
	create_insn	(0X112976);
	create_insn	(x=0X11297A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X11297C);
	op_plain_offset	(x,	1,	0X700B0600);
	op_plain_offset	(x,	129,	0X700B0600);
	set_cmt	(0X112984,	"us",	0);
	create_insn	(0X112992);
	create_insn	(0X112996);
	set_name	(0X112996,	"sdmmc_some_calibration");
	create_insn	(x=0X112998);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X11299A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X11299C);
	op_plain_offset	(x,	1,	0X40002C98);
	op_plain_offset	(x,	129,	0X40002C98);
	create_insn	(x=0X1129A4);
	op_plain_offset	(x,	1,	0X700B07C0);
	op_plain_offset	(x,	129,	0X700B07C0);
	create_insn	(x=0X1129AA);
	op_plain_offset	(x,	1,	0X700B07C0);
	op_plain_offset	(x,	129,	0X700B07C0);
	create_insn	(x=0X1129AC);
	op_plain_offset	(x,	1,	0X700B07C0);
	op_plain_offset	(x,	129,	0X700B07C0);
	create_insn	(x=0X1129B4);
	op_plain_offset	(x,	1,	0X700B07C0);
	op_plain_offset	(x,	129,	0X700B07C0);
	create_insn	(x=0X1129B6);
	op_plain_offset	(x,	1,	0X700B07C0);
	op_plain_offset	(x,	129,	0X700B07C0);
	set_cmt	(0X1129B8,	"us",	0);
	create_insn	(x=0X1129BE);
	op_plain_offset	(x,	1,	0X700B07C0);
	op_plain_offset	(x,	129,	0X700B07C0);
	set_cmt	(0X1129C4,	"us",	0);
	create_insn	(x=0X1129CE);
	op_plain_offset	(x,	1,	0X40002C98);
	op_plain_offset	(x,	129,	0X40002C98);
	create_insn	(x=0X1129D4);
	op_plain_offset	(x,	1,	0X700B07C0);
	op_plain_offset	(x,	129,	0X700B07C0);
	create_insn	(x=0X1129D8);
	op_plain_offset	(x,	1,	0X700B07C0);
	op_plain_offset	(x,	129,	0X700B07C0);
	create_insn	(x=0X1129DA);
	op_plain_offset	(x,	1,	0X700B07C0);
	op_plain_offset	(x,	129,	0X700B07C0);
	create_insn	(x=0X1129DC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1129DE);
	op_plain_offset	(x,	1,	0X70000A80);
	op_plain_offset	(x,	129,	0X70000A80);
	create_insn	(x=0X1129F2);
	op_plain_offset	(x,	1,	0X70000A80);
	op_plain_offset	(x,	129,	0X70000A80);
	create_insn	(x=0X1129F4);
	op_plain_offset	(x,	1,	0X700B07C0);
	op_plain_offset	(x,	129,	0X700B07C0);
	create_insn	(x=0X1129FA);
	op_plain_offset	(x,	1,	0X700B07C0);
	op_plain_offset	(x,	129,	0X700B07C0);
	create_insn	(0X1129FE);
	set_name	(0X1129FE,	"sdmmc_wait_cmd_free");
	create_insn	(x=0X112A02);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X112A04);
	op_plain_offset	(x,	1,	0X700B0600);
	op_plain_offset	(x,	129,	0X700B0600);
	set_cmt	(0X112A0C,	"us",	0);
	create_insn	(0X112A1A);
	set_name	(0X112A1A,	"sdmmc_set_block_size_count");
	create_insn	(x=0X112A28);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X112A2A);
	op_plain_offset	(x,	1,	0X700B0600);
	op_plain_offset	(x,	129,	0X700B0600);
	create_insn	(0X112A2E);
	create_insn	(x=0X112A30);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X112A34);
	op_plain_offset	(x,	1,	0X40002C98);
	op_plain_offset	(x,	129,	0X40002C98);
	create_insn	(0X112A48);
	create_insn	(0X112A52);
	create_insn	(0X112A5E);
	create_dword	(x=0X112A74);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X112A78);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X112A7C);
	create_dword	(x=0X112A80);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X112A84);
	create_dword	(0X112A88);
	set_name	(0X112A88,	"reg_offset_and_bit");
	create_dword	(x=0X112A8C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X112A90);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X112A94);
	set_name	(0X112A94,	"sdmmc_set_power_class_maybe");
	create_insn	(x=0X112A9E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X112AA4);
	create_insn	(0X112ABA);
	create_insn	(0X112ACA);
	create_insn	(x=0X112ADA);
	op_plain_offset	(x,	1,	0X40002C98);
	op_plain_offset	(x,	129,	0X40002C98);
	create_insn	(x=0X112AFA);
	op_plain_offset	(x,	1,	0X40002C98);
	op_plain_offset	(x,	129,	0X40002C98);
	create_insn	(0X112B02);
	create_insn	(x=0X112B04);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X112B06);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X112B08);
	op_plain_offset	(x,	1,	0X40002C98);
	op_plain_offset	(x,	129,	0X40002C98);
	create_insn	(x=0X112B0A);
	op_plain_offset	(x,	1,	0X700B0600);
	op_plain_offset	(x,	129,	0X700B0600);
	create_insn	(x=0X112B16);
	op_plain_offset	(x,	1,	0X700B0600);
	op_plain_offset	(x,	129,	0X700B0600);
	create_insn	(x=0X112B40);
	op_plain_offset	(x,	1,	0X40002C98);
	op_plain_offset	(x,	129,	0X40002C98);
	create_insn	(0X112B50);
	create_insn	(x=0X112B52);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X112B54);
	op_plain_offset	(x,	1,	0X40002C98);
	op_plain_offset	(x,	129,	0X40002C98);
	create_insn	(x=0X112B6A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X112B76);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X112B78);
	op_plain_offset	(x,	1,	0X700B0600);
	op_plain_offset	(x,	129,	0X700B0600);
	create_insn	(x=0X112B7E);
	op_plain_offset	(x,	1,	0X700B0600);
	op_plain_offset	(x,	129,	0X700B0600);
	create_insn	(x=0X112B80);
	op_plain_offset	(x,	1,	0X700B0600);
	op_plain_offset	(x,	129,	0X700B0600);
	create_insn	(x=0X112B86);
	op_plain_offset	(x,	1,	0X700B0600);
	op_plain_offset	(x,	129,	0X700B0600);
	create_insn	(x=0X112B8A);
	op_plain_offset	(x,	1,	0X700B0600);
	op_plain_offset	(x,	129,	0X700B0600);
	create_insn	(0X112B8E);
	create_insn	(0X112B96);
	make_array	(0X112B9A,	0X2);
	create_dword	(x=0X112B9C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X112BA0);
	create_dword	(x=0X112BA4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X112BA8);
	create_insn	(0X112BAC);
	set_name	(0X112BAC,	"bootdev_nop_load_config");
	create_insn	(0X112BAE);
	set_name	(0X112BAE,	"bootdev_nop_verify_config");
	create_insn	(0X112BB2);
	set_name	(0X112BB2,	"nullsub_4");
	create_insn	(0X112BB4);
	create_insn	(0X112BB8);
	create_insn	(0X112BBC);
	create_insn	(0X112BC0);
	set_name	(0X112BC0,	"bootdev_nop_disable");
	create_insn	(0X112BC2);
	make_array	(0X112BC6,	0X2);
	create_insn	(0X112BC8);
	create_insn	(x=0X112BD4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X112BD6);
	op_plain_offset	(x,	1,	0X70098400);
	op_plain_offset	(x,	129,	0X70098400);
	create_insn	(x=0X112BD8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X112BEC);
	create_insn	(0X112BF2);
	create_insn	(x=0X112C00);
	op_stkvar	(x,	1);
	create_insn	(x=0X112C02);
	op_stkvar	(x,	1);
	create_insn	(x=0X112C04);
	op_stkvar	(x,	1);
	create_insn	(x=0X112C06);
	op_stkvar	(x,	1);
	create_insn	(x=0X112C0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X112C12);
	op_stkvar	(x,	1);
	create_insn	(x=0X112C18);
	op_stkvar	(x,	1);
	create_insn	(x=0X112C1A);
	op_stkvar	(x,	1);
	create_insn	(x=0X112C20);
	op_stkvar	(x,	1);
	create_insn	(x=0X112C26);
	op_stkvar	(x,	1);
	create_insn	(0X112C40);
	create_insn	(x=0X112C42);
	op_stkvar	(x,	1);
	create_insn	(x=0X112C46);
	op_stkvar	(x,	1);
	create_insn	(x=0X112C4C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X112C50);
	op_stkvar	(x,	1);
	create_insn	(x=0X112C54);
	op_stkvar	(x,	1);
	create_insn	(x=0X112C5A);
	op_stkvar	(x,	1);
	create_insn	(x=0X112C68);
	op_stkvar	(x,	1);
	create_insn	(x=0X112C6A);
	op_stkvar	(x,	1);
	create_insn	(x=0X112C70);
	op_stkvar	(x,	1);
	create_insn	(x=0X112C76);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X112C7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X112C80);
	op_stkvar	(x,	1);
	create_insn	(x=0X112C82);
	op_stkvar	(x,	1);
	create_insn	(x=0X112C88);
	op_stkvar	(x,	1);
	create_insn	(x=0X112C96);
	op_stkvar	(x,	1);
	create_insn	(x=0X112C98);
	op_stkvar	(x,	1);
	create_insn	(x=0X112C9E);
	op_stkvar	(x,	1);
	create_insn	(x=0X112CA4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X112CAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X112CAE);
	op_stkvar	(x,	1);
	create_insn	(x=0X112CB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X112CB2);
	op_stkvar	(x,	1);
	create_insn	(x=0X112CB6);
	op_stkvar	(x,	1);
	create_insn	(x=0X112CBC);
	op_stkvar	(x,	1);
	create_insn	(x=0X112CC4);
	op_stkvar	(x,	1);
	set_cmt	(0X112CCA,	"us",	0);
	create_insn	(x=0X112CD4);
	op_stkvar	(x,	1);
	set_cmt	(0X112CDA,	"a1",	0);
	set_cmt	(0X112CE4,	"a1",	0);
	create_insn	(0X112CE4);
	create_insn	(x=0X112CEA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X112CF2);
	op_stkvar	(x,	1);
	create_insn	(x=0X112CF6);
	op_stkvar	(x,	1);
	create_insn	(x=0X112CFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X112D04);
	op_stkvar	(x,	1);
	create_insn	(x=0X112D06);
	op_stkvar	(x,	1);
	create_insn	(x=0X112D0C);
	op_stkvar	(x,	1);
	set_cmt	(0X112D12,	"us",	0);
	create_insn	(x=0X112D18);
	op_stkvar	(x,	1);
	create_insn	(x=0X112D1A);
	op_stkvar	(x,	1);
	create_insn	(x=0X112D1E);
	op_stkvar	(x,	1);
	create_insn	(x=0X112D24);
	op_stkvar	(x,	1);
	create_insn	(x=0X112D34);
	op_stkvar	(x,	1);
	create_insn	(x=0X112D36);
	op_stkvar	(x,	1);
	create_insn	(x=0X112D38);
	op_stkvar	(x,	1);
	create_insn	(x=0X112D3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X112D42);
	op_stkvar	(x,	1);
	create_insn	(x=0X112D44);
	op_stkvar	(x,	1);
	create_insn	(x=0X112D48);
	op_stkvar	(x,	1);
	create_insn	(x=0X112D4E);
	op_stkvar	(x,	1);
	create_insn	(x=0X112D58);
	op_stkvar	(x,	1);
	create_insn	(x=0X112D5A);
	op_stkvar	(x,	1);
	create_insn	(x=0X112D5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X112D60);
	op_stkvar	(x,	1);
	set_cmt	(0X112D66,	"us",	0);
	create_insn	(x=0X112D6C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X112D74);
	op_stkvar	(x,	1);
	create_insn	(x=0X112D78);
	op_stkvar	(x,	1);
	create_insn	(x=0X112D7E);
	op_stkvar	(x,	1);
	create_insn	(x=0X112D88);
	op_stkvar	(x,	1);
	create_insn	(x=0X112D8C);
	op_stkvar	(x,	1);
	create_insn	(x=0X112D92);
	op_stkvar	(x,	1);
	create_insn	(x=0X112D98);
	op_stkvar	(x,	1);
	create_insn	(x=0X112D9E);
	op_stkvar	(x,	1);
	set_cmt	(0X112DA8,	"us",	0);
	create_insn	(0X112DB4);
	set_cmt	(0X112DBC,	"a1",	0);
	create_insn	(0X112DBC);
	set_cmt	(0X112DC2,	"us",	0);
	create_insn	(x=0X112DC8);
	op_stkvar	(x,	1);
	create_insn	(0X112DCC);
	create_insn	(x=0X112DD2);
	op_stkvar	(x,	1);
	set_cmt	(0X112DD4,	"a1",	0);
	create_insn	(x=0X112DD4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X112DDC,	"len",	0);
	set_cmt	(0X112DDE,	"c",	0);
	create_insn	(0X112E00);
	create_insn	(x=0X112E0A);
	op_stkvar	(x,	1);
	create_insn	(0X112E0E);
	create_insn	(x=0X112E14);
	op_plain_offset	(x,	1,	0X40004800);
	op_plain_offset	(x,	129,	0X40004800);
	create_insn	(x=0X112E1C);
	op_plain_offset	(x,	1,	0X40004800);
	op_plain_offset	(x,	129,	0X40004800);
	create_insn	(x=0X112E20);
	op_plain_offset	(x,	1,	0X40004800);
	op_plain_offset	(x,	129,	0X40004800);
	create_insn	(x=0X112E26);
	op_plain_offset	(x,	1,	0X40004800);
	op_plain_offset	(x,	129,	0X40004800);
	create_insn	(x=0X112E28);
	op_plain_offset	(x,	1,	0X40004800);
	op_plain_offset	(x,	129,	0X40004800);
	create_insn	(x=0X112E30);
	op_plain_offset	(x,	1,	0X40004800);
	op_plain_offset	(x,	129,	0X40004800);
	create_insn	(x=0X112E36);
	op_plain_offset	(x,	1,	0X40004800);
	op_plain_offset	(x,	129,	0X40004800);
	create_insn	(x=0X112E52);
	op_plain_offset	(x,	1,	0X40004800);
	op_plain_offset	(x,	129,	0X40004800);
	create_insn	(0X112E64);
	create_insn	(x=0X112E68);
	op_plain_offset	(x,	1,	0X40004800);
	op_plain_offset	(x,	129,	0X40004800);
	create_insn	(x=0X112E78);
	op_plain_offset	(x,	1,	0X40004800);
	op_plain_offset	(x,	129,	0X40004800);
	create_insn	(x=0X112E80);
	op_stkvar	(x,	1);
	create_insn	(0X112E88);
	set_cmt	(0X112E90,	"len",	0);
	set_cmt	(0X112E92,	"c",	0);
	set_cmt	(0X112E94,	"a1",	0);
	create_insn	(x=0X112E9A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X112EEA);
	set_cmt	(0X112EF2,	"len",	0);
	set_cmt	(0X112EF4,	"c",	0);
	set_cmt	(0X112EF6,	"a1",	0);
	create_insn	(0X112F18);
	create_insn	(0X112F34);
	set_cmt	(0X112F3A,	"len",	0);
	set_cmt	(0X112F3C,	"c",	0);
	set_cmt	(0X112F3E,	"a1",	0);
	create_insn	(0X112F5C);
	create_insn	(x=0X112F62);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X112F68);
	create_insn	(x=0X112F78);
	op_stkvar	(x,	1);
	create_insn	(x=0X112F7A);
	op_stkvar	(x,	1);
	create_insn	(x=0X112F8E);
	op_stkvar	(x,	1);
	create_insn	(x=0X112F94);
	op_stkvar	(x,	1);
	create_insn	(x=0X112F9A);
	op_stkvar	(x,	1);
	set_cmt	(0X112FA0,	"us",	0);
	create_insn	(x=0X112FAA);
	op_stkvar	(x,	1);
	create_dword	(x=0X112FBC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X112FC0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X112FC4);
	create_dword	(x=0X112FC8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X112FCC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X112FD0);
	create_dword	(0X112FD4);
	create_dword	(0X112FD8);
	create_dword	(x=0X112FDC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X112FE0);
	create_dword	(0X112FE4);
	create_dword	(0X112FE8);
	create_insn	(0X112FEC);
	create_insn	(x=0X112FF2);
	op_stkvar	(x,	1);
	create_insn	(x=0X113000);
	op_stkvar	(x,	1);
	create_insn	(x=0X11300E);
	op_stkvar	(x,	1);
	create_insn	(x=0X11301C);
	op_stkvar	(x,	1);
	set_cmt	(0X113022,	"n",	0);
	set_cmt	(0X113024,	"src",	0);
	create_insn	(x=0X113024);
	op_stkvar	(x,	1);
	set_cmt	(0X113026,	"dst",	0);
	create_insn	(x=0X11302C);
	op_stkvar	(x,	1);
	create_insn	(x=0X113040);
	op_stkvar	(x,	1);
	create_insn	(x=0X113046);
	op_stkvar	(x,	1);
	create_insn	(x=0X11304C);
	op_stkvar	(x,	1);
	create_insn	(x=0X113052);
	op_stkvar	(x,	1);
	create_insn	(0X113068);
	create_insn	(x=0X11306E);
	op_stkvar	(x,	1);
	create_insn	(x=0X113074);
	op_stkvar	(x,	1);
	create_insn	(x=0X11307A);
	op_stkvar	(x,	1);
	create_insn	(x=0X113080);
	op_stkvar	(x,	1);
	create_insn	(x=0X11308C);
	op_stkvar	(x,	1);
	create_insn	(0X113098);
	create_insn	(x=0X11309E);
	op_stkvar	(x,	1);
	create_insn	(x=0X1130A2);
	op_stkvar	(x,	1);
	create_insn	(x=0X1130A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X1130AE);
	op_stkvar	(x,	1);
	set_cmt	(0X1130BA,	"us",	0);
	create_insn	(x=0X1130DA);
	op_stkvar	(x,	1);
	create_insn	(x=0X1130E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X1130E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X1130F0);
	op_stkvar	(x,	1);
	create_insn	(0X1130F8);
	create_insn	(x=0X1130FE);
	op_stkvar	(x,	1);
	create_insn	(x=0X11310A);
	op_stkvar	(x,	1);
	create_insn	(x=0X113110);
	op_stkvar	(x,	1);
	create_insn	(x=0X113116);
	op_stkvar	(x,	1);
	set_cmt	(0X11311C,	"us",	0);
	create_insn	(x=0X113126);
	op_stkvar	(x,	1);
	create_insn	(0X11313A);
	create_insn	(x=0X113142);
	op_stkvar	(x,	1);
	create_insn	(x=0X113148);
	op_stkvar	(x,	1);
	create_insn	(x=0X113150);
	op_stkvar	(x,	1);
	create_insn	(x=0X11315A);
	op_stkvar	(x,	1);
	create_insn	(x=0X113160);
	op_stkvar	(x,	1);
	create_insn	(x=0X113168);
	op_stkvar	(x,	1);
	create_insn	(x=0X113170);
	op_stkvar	(x,	1);
	create_insn	(x=0X113186);
	op_stkvar	(x,	1);
	create_insn	(x=0X11318C);
	op_stkvar	(x,	1);
	create_insn	(x=0X113194);
	op_stkvar	(x,	1);
	create_insn	(x=0X11319E);
	op_stkvar	(x,	1);
	create_insn	(x=0X1131A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X1131AA);
	op_stkvar	(x,	1);
	create_insn	(x=0X1131B0);
	op_stkvar	(x,	1);
	create_insn	(0X1131BC);
	set_cmt	(0X1131BE,	"us",	0);
	create_insn	(0X1131CC);
	create_insn	(0X1131D0);
	create_insn	(0X1131DC);
	create_insn	(x=0X1131E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X1131F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X1131F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X113200);
	op_stkvar	(x,	1);
	create_insn	(x=0X113208);
	op_stkvar	(x,	1);
	create_insn	(x=0X113220);
	op_stkvar	(x,	1);
	create_insn	(x=0X113226);
	op_stkvar	(x,	1);
	create_insn	(x=0X11322E);
	op_stkvar	(x,	1);
	create_insn	(x=0X113238);
	op_stkvar	(x,	1);
	create_insn	(x=0X11323E);
	op_stkvar	(x,	1);
	create_insn	(x=0X113244);
	op_stkvar	(x,	1);
	create_insn	(x=0X11324A);
	op_stkvar	(x,	1);
	create_insn	(x=0X113254);
	op_stkvar	(x,	1);
	create_insn	(x=0X113260);
	op_stkvar	(x,	1);
	create_insn	(0X11326A);
	set_cmt	(0X11326C,	"us",	0);
	create_insn	(x=0X113278);
	op_stkvar	(x,	1);
	create_insn	(0X113282);
	create_insn	(x=0X113286);
	op_stkvar	(x,	1);
	create_insn	(x=0X113290);
	op_stkvar	(x,	1);
	create_insn	(0X11329A);
	create_insn	(x=0X1132A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X1132AE);
	op_stkvar	(x,	1);
	create_insn	(x=0X1132B6);
	op_stkvar	(x,	1);
	create_insn	(x=0X1132BE);
	op_stkvar	(x,	1);
	create_insn	(x=0X1132D6);
	op_stkvar	(x,	1);
	create_insn	(x=0X1132DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X1132E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X1132F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X1132F6);
	op_stkvar	(x,	1);
	create_insn	(x=0X1132FE);
	op_stkvar	(x,	1);
	create_insn	(x=0X113306);
	op_stkvar	(x,	1);
	create_insn	(0X113312);
	set_cmt	(0X113314,	"us",	0);
	set_cmt	(0X113320,	"us",	0);
	create_insn	(x=0X113326);
	op_stkvar	(x,	1);
	create_insn	(0X113332);
	create_insn	(x=0X11333A);
	op_stkvar	(x,	1);
	create_insn	(x=0X11334C);
	op_stkvar	(x,	1);
	create_insn	(x=0X11335E);
	op_stkvar	(x,	1);
	set_cmt	(0X113372,	"us",	0);
	create_insn	(0X1133A2);
	create_insn	(0X1133AA);
	create_insn	(0X1133B8);
	create_dword	(0X1133EC);
	create_dword	(0X1133F0);
	create_dword	(x=0X1133F4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X1133F8);
	create_insn	(0X113452);
	create_insn	(0X11347E);
	create_insn	(0X11349A);
	create_insn	(x=0X1134A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X1134A6);
	op_stkvar	(x,	1);
	create_insn	(x=0X1134AA);
	op_stkvar	(x,	1);
	create_insn	(x=0X1134AE);
	op_stkvar	(x,	1);
	create_insn	(x=0X1134B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X1134BA);
	op_stkvar	(x,	1);
	create_insn	(0X1134BE);
	create_insn	(0X1134CA);
	create_insn	(x=0X1134D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X1134DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X1134E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X1134EE);
	op_stkvar	(x,	1);
	create_insn	(0X113522);
	create_insn	(x=0X11352C);
	op_stkvar	(x,	1);
	create_insn	(x=0X11353E);
	op_stkvar	(x,	1);
	create_insn	(0X11357A);
	create_insn	(0X113582);
	set_cmt	(0X113588,	"len",	0);
	set_cmt	(0X11358A,	"c",	0);
	set_cmt	(0X11358C,	"a1",	0);
	create_insn	(0X113604);
	create_insn	(x=0X11360C);
	op_stkvar	(x,	1);
	create_insn	(x=0X113610);
	op_stkvar	(x,	1);
	create_insn	(x=0X113614);
	op_stkvar	(x,	1);
	create_insn	(x=0X11361E);
	op_stkvar	(x,	1);
	create_insn	(x=0X113624);
	op_stkvar	(x,	1);
	create_insn	(x=0X113626);
	op_stkvar	(x,	1);
	create_insn	(x=0X113634);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X113638);
	op_plain_offset	(x,	1,	0X40004850);
	op_plain_offset	(x,	129,	0X40004850);
	create_insn	(x=0X113644);
	op_stkvar	(x,	1);
	create_insn	(x=0X113646);
	op_stkvar	(x,	1);
	create_insn	(x=0X113648);
	op_stkvar	(x,	1);
	create_insn	(x=0X113652);
	op_stkvar	(x,	1);
	create_insn	(x=0X113654);
	op_stkvar	(x,	1);
	create_insn	(x=0X113656);
	op_stkvar	(x,	1);
	create_insn	(x=0X113678);
	op_stkvar	(x,	1);
	create_insn	(x=0X11367A);
	op_stkvar	(x,	1);
	create_insn	(x=0X11367C);
	op_stkvar	(x,	1);
	create_insn	(x=0X113684);
	op_stkvar	(x,	1);
	create_insn	(x=0X113686);
	op_stkvar	(x,	1);
	create_insn	(x=0X11368A);
	op_stkvar	(x,	1);
	create_insn	(x=0X113698);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X11369C);
	op_plain_offset	(x,	1,	0X40004850);
	op_plain_offset	(x,	129,	0X40004850);
	create_insn	(x=0X1136A0);
	op_plain_offset	(x,	1,	0X40004850);
	op_plain_offset	(x,	129,	0X40004850);
	create_insn	(x=0X1136A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X1136AA);
	op_stkvar	(x,	1);
	create_insn	(x=0X1136AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X1136B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X1136B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X1136BA);
	op_stkvar	(x,	1);
	create_insn	(x=0X1136C8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1136CC);
	op_plain_offset	(x,	1,	0X40004850);
	op_plain_offset	(x,	129,	0X40004850);
	create_insn	(x=0X1136D0);
	op_plain_offset	(x,	1,	0X40004850);
	op_plain_offset	(x,	129,	0X40004850);
	create_insn	(x=0X1136D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X1136EE);
	op_stkvar	(x,	1);
	create_insn	(x=0X1136F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X1136F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X1136FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X1136FE);
	op_stkvar	(x,	1);
	create_insn	(x=0X113704);
	op_stkvar	(x,	1);
	set_cmt	(0X11370E,	"a1",	0);
	create_insn	(x=0X113718);
	op_stkvar	(x,	1);
	create_insn	(x=0X11371C);
	op_stkvar	(x,	1);
	create_insn	(x=0X11371E);
	op_stkvar	(x,	1);
	create_insn	(x=0X113724);
	op_stkvar	(x,	1);
	create_insn	(x=0X113728);
	op_stkvar	(x,	1);
	create_insn	(x=0X11372C);
	op_stkvar	(x,	1);
	create_insn	(0X113732);
	create_insn	(0X113734);
	create_insn	(x=0X113738);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X11373E,	"a1",	0);
	create_insn	(0X113748);
	create_insn	(x=0X11375E);
	op_plain_offset	(x,	1,	0X7009F000);
	op_plain_offset	(x,	129,	0X7009F000);
	create_insn	(x=0X11377E);
	op_plain_offset	(x,	1,	0X7009F000);
	op_plain_offset	(x,	129,	0X7009F000);
	create_insn	(x=0X113784);
	op_plain_offset	(x,	1,	0X7009F080);
	op_plain_offset	(x,	129,	0X7009F080);
	create_insn	(x=0X113788);
	op_plain_offset	(x,	1,	0X7009F080);
	op_plain_offset	(x,	129,	0X7009F080);
	create_insn	(x=0X113792);
	op_plain_offset	(x,	1,	0X7009F080);
	op_plain_offset	(x,	129,	0X7009F080);
	create_insn	(x=0X113798);
	op_plain_offset	(x,	1,	0X7009F080);
	op_plain_offset	(x,	129,	0X7009F080);
	create_insn	(x=0X11379A);
	op_plain_offset	(x,	1,	0X7009F080);
	op_plain_offset	(x,	129,	0X7009F080);
	create_insn	(x=0X11379E);
	op_plain_offset	(x,	1,	0X7009F080);
	op_plain_offset	(x,	129,	0X7009F080);
	create_insn	(x=0X1137A2);
	op_plain_offset	(x,	1,	0X7009F280);
	op_plain_offset	(x,	129,	0X7009F280);
	create_insn	(x=0X1137A8);
	op_plain_offset	(x,	1,	0X7009F280);
	op_plain_offset	(x,	129,	0X7009F280);
	create_insn	(0X1137B4);
	create_insn	(x=0X1137BE);
	op_plain_offset	(x,	1,	0X7009F000);
	op_plain_offset	(x,	129,	0X7009F000);
	create_insn	(0X1137C6);
	create_insn	(x=0X1137D0);
	op_plain_offset	(x,	1,	0X7009F000);
	op_plain_offset	(x,	129,	0X7009F000);
	create_insn	(0X1137D6);
	create_insn	(x=0X1137E0);
	op_plain_offset	(x,	1,	0X7009F000);
	op_plain_offset	(x,	129,	0X7009F000);
	create_insn	(x=0X113802);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X113804);
	op_plain_offset	(x,	1,	0X7000F9C0);
	op_plain_offset	(x,	129,	0X7000F9C0);
	create_insn	(x=0X113806);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X113808);
	op_plain_offset	(x,	1,	0X7000FB40);
	op_plain_offset	(x,	129,	0X7000FB40);
	create_insn	(0X113824);
	create_insn	(0X113832);
	create_insn	(0X11383E);
	create_insn	(x=0X11386A);
	op_plain_offset	(x,	1,	0X7009F000);
	op_plain_offset	(x,	129,	0X7009F000);
	create_insn	(x=0X11386C);
	op_plain_offset	(x,	1,	0X7009F000);
	op_plain_offset	(x,	129,	0X7009F000);
	create_insn	(0X113880);
	create_dword	(0X113890);
	create_dword	(x=0X113894);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X113898);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X11389C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1138A0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1138A4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1138A8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X1138AC);
	create_insn	(0X1138C2);
	create_insn	(x=0X1138D8);
	op_plain_offset	(x,	1,	0X7009F000);
	op_plain_offset	(x,	129,	0X7009F000);
	create_insn	(x=0X1138DA);
	op_plain_offset	(x,	1,	0X7009F000);
	op_plain_offset	(x,	129,	0X7009F000);
	create_insn	(0X1138DE);
	set_cmt	(0X1138E6,	"enable",	0);
	set_cmt	(0X1138E8,	"reg_offset_and_bit",	0);
	create_insn	(x=0X1138EA);
	op_stkvar	(x,	1);
	set_cmt	(0X1138F0,	"enable",	0);
	set_cmt	(0X1138F2,	"reg_offset_and_bit",	0);
	create_insn	(x=0X1138F8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1138FA);
	op_plain_offset	(x,	1,	0X600060C0);
	op_plain_offset	(x,	129,	0X600060C0);
	create_insn	(x=0X113900);
	op_plain_offset	(x,	1,	0X600060C0);
	op_plain_offset	(x,	129,	0X600060C0);
	set_cmt	(0X113902,	"us",	0);
	create_insn	(x=0X11390A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X113910);
	op_plain_offset	(x,	1,	0X60006600);
	op_plain_offset	(x,	129,	0X60006600);
	create_insn	(x=0X113914);
	op_plain_offset	(x,	1,	0X60006600);
	op_plain_offset	(x,	129,	0X60006600);
	create_insn	(x=0X113916);
	op_plain_offset	(x,	1,	0X60006600);
	op_plain_offset	(x,	129,	0X60006600);
	create_insn	(x=0X11391C);
	op_plain_offset	(x,	1,	0X60006600);
	op_plain_offset	(x,	129,	0X60006600);
	set_cmt	(0X11391E,	"rst_state",	0);
	set_cmt	(0X113920,	"reg_offset_and_bit",	0);
	create_insn	(x=0X11392E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X113932);
	op_plain_offset	(x,	1,	0X70098000);
	op_plain_offset	(x,	129,	0X70098000);
	create_insn	(x=0X113934);
	op_plain_offset	(x,	1,	0X70098000);
	op_plain_offset	(x,	129,	0X70098000);
	create_insn	(x=0X11393A);
	op_plain_offset	(x,	1,	0X70098000);
	op_plain_offset	(x,	129,	0X70098000);
	create_insn	(x=0X113944);
	op_stkvar	(x,	1);
	create_insn	(x=0X113954);
	op_stkvar	(x,	1);
	create_insn	(0X11395C);
	create_insn	(0X113970);
	create_insn	(x=0X113982);
	op_plain_offset	(x,	1,	0X7009F000);
	op_plain_offset	(x,	129,	0X7009F000);
	create_insn	(0X113996);
	create_insn	(0X1139A6);
	create_insn	(0X1139B8);
	create_insn	(x=0X1139CA);
	op_plain_offset	(x,	1,	0X7009F000);
	op_plain_offset	(x,	129,	0X7009F000);
	create_insn	(x=0X1139CC);
	op_plain_offset	(x,	1,	0X7009F000);
	op_plain_offset	(x,	129,	0X7009F000);
	create_insn	(0X1139DA);
	create_insn	(x=0X1139E2);
	op_plain_offset	(x,	1,	0X7009F000);
	op_plain_offset	(x,	129,	0X7009F000);
	set_cmt	(0X1139E4,	"us",	0);
	create_insn	(x=0X1139EA);
	op_plain_offset	(x,	1,	0X7009F000);
	op_plain_offset	(x,	129,	0X7009F000);
	create_insn	(0X1139FA);
	create_insn	(0X113A06);
	create_insn	(0X113A12);
	create_insn	(x=0X113A1E);
	op_plain_offset	(x,	1,	0X7009F000);
	op_plain_offset	(x,	129,	0X7009F000);
	create_insn	(0X113A22);
	create_insn	(x=0X113A24);
	op_plain_offset	(x,	1,	0X7009F000);
	op_plain_offset	(x,	129,	0X7009F000);
	create_insn	(0X113A3C);
	create_insn	(x=0X113A4E);
	op_plain_offset	(x,	1,	0X7009F000);
	op_plain_offset	(x,	129,	0X7009F000);
	create_insn	(0X113A52);
	set_cmt	(0X113A58,	"result",	0);
	set_cmt	(0X113A78,	"rst_state",	0);
	set_cmt	(0X113A7A,	"reg_offset_and_bit",	0);
	create_insn	(x=0X113A82);
	op_stkvar	(x,	1);
	set_cmt	(0X113A88,	"rst_state",	0);
	set_cmt	(0X113A8A,	"reg_offset_and_bit",	0);
	set_cmt	(0X113A90,	"rst_state",	0);
	set_cmt	(0X113A92,	"reg_offset_and_bit",	0);
	set_cmt	(0X113ABA,	"a1",	0);
	create_insn	(0X113AC4);
	set_name	(0X113AC4,	"bootdev_usbhost_disable");
	set_cmt	(0X113AC6,	"result",	0);
	set_cmt	(0X113ACC,	"rst_state",	0);
	set_cmt	(0X113ACE,	"reg_offset_and_bit",	0);
	set_cmt	(0X113AD4,	"a2",	0);
	set_cmt	(0X113AD6,	"a1",	0);
	set_cmt	(0X113ADE,	"a2",	0);
	set_cmt	(0X113AE0,	"a1",	0);
	create_insn	(x=0X113AE8);
	op_stkvar	(x,	1);
	set_cmt	(0X113AEE,	"rst_state",	0);
	set_cmt	(0X113AF0,	"reg_offset_and_bit",	0);
	set_cmt	(0X113AF6,	"a1",	0);
	create_insn	(x=0X113AFC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X113B02);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X113B04,	"len",	0);
	set_cmt	(0X113B08,	"a1",	0);
	set_cmt	(0X113B0A,	"c",	0);
	create_insn	(0X113B16);
	set_name	(0X113B16,	"bootdev_usbhost_init");
	set_cmt	(0X113B1A,	"a1",	0);
	create_insn	(x=0X113B22);
	op_stkvar	(x,	1);
	set_cmt	(0X113B24,	"len",	0);
	set_cmt	(0X113B28,	"c",	0);
	set_cmt	(0X113B2A,	"a1",	0);
	create_insn	(x=0X113B30);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X113B36);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X113B58);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X113B6A);
	op_stkvar	(x,	1);
	create_insn	(x=0X113B72);
	op_stkvar	(x,	1);
	create_insn	(x=0X113B74);
	op_stkvar	(x,	1);
	create_insn	(x=0X113B7A);
	op_stkvar	(x,	1);
	create_insn	(0X113B88);
	create_insn	(x=0X113B8A);
	op_stkvar	(x,	1);
	create_insn	(x=0X113B8C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X113B98);
	op_stkvar	(x,	1);
	create_insn	(x=0X113B9E);
	op_stkvar	(x,	1);
	create_insn	(x=0X113BA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X113BB4);
	op_stkvar	(x,	1);
	set_cmt	(0X113BC6,	"a1",	0);
	set_cmt	(0X113BE0,	"a1",	0);
	create_insn	(0X113BE0);
	create_insn	(x=0X113BEC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X113BEC,	"bootdev_usbhost_load_config");
	create_insn	(x=0X113BF2);
	op_plain_offset	(x,	1,	0X40002CB8);
	op_plain_offset	(x,	129,	0X40002CB8);
	create_insn	(x=0X113BFC);
	op_plain_offset	(x,	1,	0X40002CB8);
	op_plain_offset	(x,	129,	0X40002CB8);
	create_insn	(x=0X113BFE);
	op_plain_offset	(x,	1,	0X40002CB8);
	op_plain_offset	(x,	129,	0X40002CB8);
	create_insn	(0X113C04);
	set_name	(0X113C04,	"bootdev_usbhost_verify_config");
	create_insn	(x=0X113C08);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X113C08,	"bootdev_usbhost_field8");
	create_insn	(0X113C24);
	set_name	(0X113C24,	"bootdev_usbhost_read");
	create_insn	(x=0X113C26);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X113C3A);
	op_stkvar	(x,	1);
	create_insn	(x=0X113C3E);
	op_stkvar	(x,	1);
	create_insn	(x=0X113C48);
	op_stkvar	(x,	1);
	set_cmt	(0X113C58,	"a1",	0);
	create_insn	(x=0X113C60);
	op_stkvar	(x,	1);
	create_insn	(0X113C64);
	create_insn	(x=0X113C66);
	op_stkvar	(x,	1);
	create_insn	(x=0X113C7A);
	op_stkvar	(x,	1);
	create_insn	(x=0X113C84);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X113C84,	"bootdev_usbhost_field14");
	create_insn	(0X113C90);
	set_name	(0X113C90,	"bootdev_usbhost_field1C");
	create_insn	(0X113C94);
	create_insn	(x=0X113C98);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X113CB4);
	create_insn	(0X113CB8);
	create_insn	(x=0X113CBA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X113CC6);
	op_plain_offset	(x,	1,	0X40004850);
	op_plain_offset	(x,	129,	0X40004850);
	create_insn	(x=0X113CCC);
	op_stkvar	(x,	1);
	create_insn	(0X113CD2);
	create_insn	(x=0X113CEE);
	op_stkvar	(x,	1);
	create_insn	(x=0X113CF2);
	op_stkvar	(x,	1);
	create_dword	(x=0X113CF8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X113CFC);
	create_dword	(x=0X113D00);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X113D04);
	create_dword	(x=0X113D08);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X113D0C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X113D10);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X113D14);
	create_dword	(x=0X113D18);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X113D1C);
	create_dword	(x=0X113D20);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X113D24);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X113D28);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X113D2C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X113D30);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X113D34);
	create_insn	(0X113D48);
	create_insn	(x=0X113D54);
	op_stkvar	(x,	1);
	create_insn	(x=0X113D6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X113D72);
	op_stkvar	(x,	1);
	create_insn	(x=0X113D78);
	op_stkvar	(x,	1);
	create_insn	(0X113D86);
	create_insn	(x=0X113D92);
	op_stkvar	(x,	1);
	create_insn	(0X113DA4);
	set_cmt	(0X113DB2,	"a1",	0);
	set_cmt	(0X113DC4,	"a1",	0);
	set_cmt	(0X113DD6,	"a1",	0);
	set_cmt	(0X113DEA,	"a1",	0);
	create_insn	(0X113DEA);
	create_insn	(0X113DF4);
	create_insn	(x=0X113DF6);
	op_plain_offset	(x,	1,	0X70410000);
	op_plain_offset	(x,	129,	0X70410000);
	create_insn	(x=0X113DFC);
	op_plain_offset	(x,	1,	0X70410000);
	op_plain_offset	(x,	129,	0X70410000);
	create_insn	(0X113E02);
	create_insn	(0X113E06);
	create_insn	(0X113E1A);
	create_insn	(x=0X113E1C);
	op_plain_offset	(x,	1,	0X70410000);
	op_plain_offset	(x,	129,	0X70410000);
	create_insn	(x=0X113E1E);
	op_plain_offset	(x,	1,	0X70410000);
	op_plain_offset	(x,	129,	0X70410000);
	create_insn	(0X113E26);
	create_insn	(x=0X113E2A);
	op_plain_offset	(x,	1,	0X70410000);
	op_plain_offset	(x,	129,	0X70410000);
	create_insn	(x=0X113E30);
	op_plain_offset	(x,	1,	0X70410000);
	op_plain_offset	(x,	129,	0X70410000);
	create_insn	(0X113E46);
	create_insn	(0X113E6A);
	create_insn	(0X113E86);
	create_insn	(x=0X113E96);
	op_plain_offset	(x,	1,	0X70410000);
	op_plain_offset	(x,	129,	0X70410000);
	create_insn	(x=0X113E9C);
	op_stkvar	(x,	1);
	create_insn	(0X113EA8);
	create_insn	(0X113EB0);
	create_insn	(x=0X113EB4);
	op_plain_offset	(x,	1,	0X70410100);
	op_plain_offset	(x,	129,	0X70410100);
	create_insn	(0X113EC6);
	create_insn	(0X113EDE);
	create_insn	(x=0X113EE6);
	op_stkvar	(x,	1);
	create_insn	(x=0X113EEE);
	op_plain_offset	(x,	1,	0X70410000);
	op_plain_offset	(x,	129,	0X70410000);
	create_insn	(x=0X113F10);
	op_stkvar	(x,	1);
	create_insn	(x=0X113F12);
	op_stkvar	(x,	1);
	create_insn	(x=0X113F22);
	op_stkvar	(x,	1);
	create_insn	(x=0X113F24);
	op_stkvar	(x,	1);
	set_cmt	(0X113F36,	"us",	0);
	create_insn	(x=0X113F3C);
	op_plain_offset	(x,	1,	0X70410000);
	op_plain_offset	(x,	129,	0X70410000);
	create_insn	(x=0X113F44);
	op_plain_offset	(x,	1,	0X70410000);
	op_plain_offset	(x,	129,	0X70410000);
	create_insn	(x=0X113F4A);
	op_stkvar	(x,	1);
	create_insn	(x=0X113F4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X113F68);
	op_plain_offset	(x,	1,	0X70410000);
	op_plain_offset	(x,	129,	0X70410000);
	create_insn	(x=0X113F6A);
	op_plain_offset	(x,	1,	0X70410000);
	op_plain_offset	(x,	129,	0X70410000);
	create_insn	(0X113F74);
	create_insn	(x=0X113F84);
	op_plain_offset	(x,	1,	0X70410000);
	op_plain_offset	(x,	129,	0X70410000);
	create_insn	(x=0X113F8A);
	op_stkvar	(x,	1);
	create_insn	(0X113F96);
	create_insn	(x=0X113F9A);
	op_plain_offset	(x,	1,	0X70410180);
	op_plain_offset	(x,	129,	0X70410180);
	create_insn	(0X113FA4);
	create_insn	(0X113FB0);
	create_insn	(0X113FC8);
	create_insn	(x=0X113FD4);
	op_plain_offset	(x,	1,	0X70410000);
	op_plain_offset	(x,	129,	0X70410000);
	set_cmt	(0X113FE8,	"us",	0);
	create_insn	(x=0X113FF4);
	op_plain_offset	(x,	1,	0X70410000);
	op_plain_offset	(x,	129,	0X70410000);
	create_insn	(x=0X113FFC);
	op_plain_offset	(x,	1,	0X70410000);
	op_plain_offset	(x,	129,	0X70410000);
	create_insn	(x=0X113FFE);
	op_stkvar	(x,	1);
	create_insn	(x=0X11401A);
	op_plain_offset	(x,	1,	0X70410000);
	op_plain_offset	(x,	129,	0X70410000);
	create_insn	(x=0X11401C);
	op_plain_offset	(x,	1,	0X70410000);
	op_plain_offset	(x,	129,	0X70410000);
	create_insn	(0X114020);
	create_insn	(x=0X114046);
	op_stkvar	(x,	1);
	create_insn	(0X11405A);
	set_name	(0X11405A,	"bootdev_qspi_read");
	create_insn	(x=0X11405C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X114060);
	op_plain_offset	(x,	1,	0X40002CC0);
	op_plain_offset	(x,	129,	0X40002CC0);
	create_insn	(x=0X11407A);
	op_stkvar	(x,	1);
	create_insn	(x=0X114096);
	op_stkvar	(x,	1);
	create_insn	(0X11409A);
	create_insn	(x=0X11409E);
	op_stkvar	(x,	1);
	create_insn	(x=0X1140A2);
	op_stkvar	(x,	1);
	create_insn	(x=0X1140A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X1140AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X1140AE);
	op_stkvar	(x,	1);
	create_insn	(x=0X1140B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X1140BA);
	op_plain_offset	(x,	1,	0X40002CC0);
	op_plain_offset	(x,	129,	0X40002CC0);
	create_insn	(x=0X1140C8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X1140C8,	"bootdev_qspi_load_config");
	create_insn	(x=0X1140D2);
	op_plain_offset	(x,	1,	0X40002CC8);
	op_plain_offset	(x,	129,	0X40002CC8);
	create_insn	(x=0X1140DC);
	op_plain_offset	(x,	1,	0X40002CC8);
	op_plain_offset	(x,	129,	0X40002CC8);
	create_insn	(x=0X1140DE);
	op_plain_offset	(x,	1,	0X40002CC8);
	op_plain_offset	(x,	129,	0X40002CC8);
	create_insn	(x=0X1140E0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1140E2);
	op_plain_offset	(x,	1,	0X40002CC0);
	op_plain_offset	(x,	129,	0X40002CC0);
	create_insn	(x=0X1140EA);
	op_plain_offset	(x,	1,	0X40002CC8);
	op_plain_offset	(x,	129,	0X40002CC8);
	create_insn	(0X114104);
	set_name	(0X114104,	"bootdev_qspi_verify_config");
	create_insn	(x=0X114120);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X114122);
	op_plain_offset	(x,	1,	0X40002CC0);
	op_plain_offset	(x,	129,	0X40002CC0);
	create_insn	(x=0X114128);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X114128,	"bootdev_qspi_field8");
	create_insn	(0X114136);
	set_name	(0X114136,	"bootdev_qspi_init");
	create_insn	(x=0X114138);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X114158);
	op_plain_offset	(x,	1,	0X40002CC0);
	op_plain_offset	(x,	129,	0X40002CC0);
	set_cmt	(0X114164,	"rst_state",	0);
	set_cmt	(0X114166,	"reg_offset_and_bit",	0);
	set_cmt	(0X11416C,	"rst_state",	0);
	set_cmt	(0X11416E,	"reg_offset_and_bit",	0);
	set_cmt	(0X114186,	"enable",	0);
	set_cmt	(0X114188,	"reg_offset_and_bit",	0);
	set_cmt	(0X11418E,	"enable",	0);
	set_cmt	(0X114190,	"reg_offset_and_bit",	0);
	set_cmt	(0X114196,	"rst_state",	0);
	set_cmt	(0X114198,	"reg_offset_and_bit",	0);
	set_cmt	(0X11419E,	"rst_state",	0);
	set_cmt	(0X1141A0,	"reg_offset_and_bit",	0);
	create_insn	(x=0X1141AE);
	op_plain_offset	(x,	1,	0X40002CC0);
	op_plain_offset	(x,	129,	0X40002CC0);
	create_insn	(x=0X1141DC);
	op_plain_offset	(x,	1,	0X70410000);
	op_plain_offset	(x,	129,	0X70410000);
	create_insn	(x=0X1141E2);
	op_plain_offset	(x,	1,	0X70410000);
	op_plain_offset	(x,	129,	0X70410000);
	create_dword	(x=0X1141F4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X1141F8);
	create_dword	(x=0X1141FC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X114200);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X114204);
	create_insn	(x=0X11420A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X11420A,	"bootdev_qspi_field14");
	create_insn	(x=0X11420E);
	op_plain_offset	(x,	1,	0X40002CC0);
	op_plain_offset	(x,	129,	0X40002CC0);
	create_insn	(x=0X11421C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X11421C,	"bootdev_qspi_disable");
	set_cmt	(0X114224,	"rst_state",	0);
	set_cmt	(0X114226,	"reg_offset_and_bit",	0);
	set_cmt	(0X11422C,	"rst_state",	0);
	set_cmt	(0X11422E,	"reg_offset_and_bit",	0);
	set_cmt	(0X114236,	"enable",	0);
	set_cmt	(0X114238,	"reg_offset_and_bit",	0);
	set_cmt	(0X11423E,	"enable",	0);
	set_cmt	(0X114240,	"reg_offset_and_bit",	0);
	create_insn	(0X114248);
	set_name	(0X114248,	"bootdev_qspi_field1C");
	create_dword	(x=0X11424C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X114250);
	create_insn	(x=0X114252);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X11425A);
	op_stkvar	(x,	1);
	create_insn	(x=0X11426E);
	op_stkvar	(x,	1);
	create_insn	(x=0X114288);
	op_plain_offset	(x,	1,	0X40004950);
	op_plain_offset	(x,	129,	0X40004950);
	create_insn	(x=0X11428C);
	op_plain_offset	(x,	1,	0X40004950);
	op_plain_offset	(x,	129,	0X40004950);
	create_insn	(x=0X114290);
	op_stkvar	(x,	1);
	create_insn	(x=0X114292);
	op_plain_offset	(x,	1,	0X4000495F);
	op_plain_offset	(x,	129,	0X4000495F);
	create_insn	(x=0X1142A0);
	op_plain_offset	(x,	1,	0X4000495F);
	op_plain_offset	(x,	129,	0X4000495F);
	create_insn	(x=0X1142A4);
	op_plain_offset	(x,	1,	0X4000495F);
	op_plain_offset	(x,	129,	0X4000495F);
	create_insn	(0X1142A8);
	create_insn	(x=0X1142C0);
	op_plain_offset	(x,	1,	0X40004950);
	op_plain_offset	(x,	129,	0X40004950);
	create_insn	(x=0X1142C4);
	op_plain_offset	(x,	1,	0X4000495F);
	op_plain_offset	(x,	129,	0X4000495F);
	create_insn	(x=0X1142C8);
	op_plain_offset	(x,	1,	0X4000495F);
	op_plain_offset	(x,	129,	0X4000495F);
	create_insn	(x=0X1142CC);
	op_plain_offset	(x,	1,	0X4000495F);
	op_plain_offset	(x,	129,	0X4000495F);
	create_insn	(x=0X1142D0);
	op_plain_offset	(x,	1,	0X4000495F);
	op_plain_offset	(x,	129,	0X4000495F);
	create_insn	(x=0X1142D4);
	op_plain_offset	(x,	1,	0X4000495F);
	op_plain_offset	(x,	129,	0X4000495F);
	create_insn	(x=0X1142D8);
	op_plain_offset	(x,	1,	0X4000495F);
	op_plain_offset	(x,	129,	0X4000495F);
	create_insn	(x=0X1142DC);
	op_plain_offset	(x,	1,	0X40004950);
	op_plain_offset	(x,	129,	0X40004950);
	create_insn	(0X1142E0);
	create_insn	(x=0X1142E8);
	op_plain_offset	(x,	1,	0X40004950);
	op_plain_offset	(x,	129,	0X40004950);
	create_insn	(x=0X1142EA);
	op_plain_offset	(x,	1,	0X40004950);
	op_plain_offset	(x,	129,	0X40004950);
	create_insn	(x=0X1142EE);
	op_plain_offset	(x,	1,	0X4000495F);
	op_plain_offset	(x,	129,	0X4000495F);
	create_insn	(x=0X1142F2);
	op_plain_offset	(x,	1,	0X4000495F);
	op_plain_offset	(x,	129,	0X4000495F);
	create_insn	(x=0X1142F6);
	op_plain_offset	(x,	1,	0X4000495F);
	op_plain_offset	(x,	129,	0X4000495F);
	create_insn	(x=0X1142FA);
	op_plain_offset	(x,	1,	0X4000495F);
	op_plain_offset	(x,	129,	0X4000495F);
	create_insn	(x=0X1142FE);
	op_plain_offset	(x,	1,	0X4000495F);
	op_plain_offset	(x,	129,	0X4000495F);
	create_insn	(0X114304);
	create_insn	(x=0X11430C);
	op_plain_offset	(x,	1,	0X40004950);
	op_plain_offset	(x,	129,	0X40004950);
	create_insn	(x=0X11430E);
	op_plain_offset	(x,	1,	0X40004950);
	op_plain_offset	(x,	129,	0X40004950);
	create_insn	(0X114312);
	create_insn	(x=0X114318);
	op_plain_offset	(x,	1,	0X40004950);
	op_plain_offset	(x,	129,	0X40004950);
	create_insn	(0X11431C);
	create_insn	(x=0X114322);
	op_plain_offset	(x,	1,	0X40004950);
	op_plain_offset	(x,	129,	0X40004950);
	create_insn	(0X114326);
	create_insn	(x=0X11432E);
	op_plain_offset	(x,	1,	0X40004950);
	op_plain_offset	(x,	129,	0X40004950);
	create_insn	(x=0X114330);
	op_plain_offset	(x,	1,	0X40004950);
	op_plain_offset	(x,	129,	0X40004950);
	create_insn	(x=0X114334);
	op_plain_offset	(x,	1,	0X4000495F);
	op_plain_offset	(x,	129,	0X4000495F);
	create_insn	(x=0X114338);
	op_plain_offset	(x,	1,	0X4000495F);
	op_plain_offset	(x,	129,	0X4000495F);
	create_insn	(x=0X114342);
	op_stkvar	(x,	1);
	create_insn	(x=0X114344);
	op_plain_offset	(x,	1,	0X4000495F);
	op_plain_offset	(x,	129,	0X4000495F);
	create_insn	(x=0X114352);
	op_plain_offset	(x,	1,	0X4000495F);
	op_plain_offset	(x,	129,	0X4000495F);
	create_insn	(x=0X114354);
	op_stkvar	(x,	1);
	create_insn	(0X11435C);
	create_insn	(x=0X11435E);
	op_stkvar	(x,	1);
	create_insn	(0X114362);
	set_cmt	(0X114368,	"a1",	0);
	create_insn	(x=0X114368);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X11436A,	"len",	0);
	set_cmt	(0X11436C,	"c",	0);
	create_insn	(x=0X114372);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X114388);
	op_plain_offset	(x,	1,	0X40004950);
	op_plain_offset	(x,	129,	0X40004950);
	create_insn	(0X114396);
	create_insn	(x=0X114398);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1143A2,	"len",	0);
	set_cmt	(0X1143A4,	"c",	0);
	set_cmt	(0X1143A6,	"a1",	0);
	create_insn	(x=0X1143AE);
	op_plain_offset	(x,	1,	0X40004800);
	op_plain_offset	(x,	129,	0X40004800);
	create_insn	(x=0X1143BA);
	op_plain_offset	(x,	1,	0X40004800);
	op_plain_offset	(x,	129,	0X40004800);
	create_insn	(x=0X1143C0);
	op_plain_offset	(x,	1,	0X40004800);
	op_plain_offset	(x,	129,	0X40004800);
	create_insn	(x=0X1143D8);
	op_plain_offset	(x,	1,	0X40004800);
	op_plain_offset	(x,	129,	0X40004800);
	create_insn	(0X1143E6);
	create_insn	(x=0X1143EA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1143F0);
	op_plain_offset	(x,	1,	0X40004850);
	op_plain_offset	(x,	129,	0X40004850);
	create_insn	(0X114406);
	create_insn	(x=0X11440A);
	op_plain_offset	(x,	1,	0X40004850);
	op_plain_offset	(x,	129,	0X40004850);
	create_insn	(x=0X114412);
	op_plain_offset	(x,	1,	0X40004850);
	op_plain_offset	(x,	129,	0X40004850);
	create_insn	(x=0X114420);
	op_plain_offset	(x,	1,	0X40004850);
	op_plain_offset	(x,	129,	0X40004850);
	create_insn	(x=0X114422);
	op_plain_offset	(x,	1,	0X40004850);
	op_plain_offset	(x,	129,	0X40004850);
	create_insn	(x=0X114428);
	op_plain_offset	(x,	1,	0X40004850);
	op_plain_offset	(x,	129,	0X40004850);
	create_insn	(x=0X11442A);
	op_plain_offset	(x,	1,	0X40004850);
	op_plain_offset	(x,	129,	0X40004850);
	set_cmt	(0X114434,	"a2",	0);
	set_cmt	(0X114444,	"a1",	0);
	create_insn	(0X114450);
	create_insn	(x=0X114458);
	op_plain_offset	(x,	1,	0X40004850);
	op_plain_offset	(x,	129,	0X40004850);
	create_insn	(x=0X11445A);
	op_plain_offset	(x,	1,	0X40004850);
	op_plain_offset	(x,	129,	0X40004850);
	create_insn	(x=0X11445C);
	op_plain_offset	(x,	1,	0X40004850);
	op_plain_offset	(x,	129,	0X40004850);
	create_insn	(x=0X11446C);
	op_plain_offset	(x,	1,	0X40004850);
	op_plain_offset	(x,	129,	0X40004850);
	create_insn	(x=0X11446E);
	op_plain_offset	(x,	1,	0X40004850);
	op_plain_offset	(x,	129,	0X40004850);
	create_insn	(x=0X114470);
	op_plain_offset	(x,	1,	0X40004850);
	op_plain_offset	(x,	129,	0X40004850);
	create_insn	(x=0X114476);
	op_plain_offset	(x,	1,	0X40004850);
	op_plain_offset	(x,	129,	0X40004850);
	create_insn	(0X114490);
	create_insn	(0X114496);
	create_insn	(x=0X114498);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1144BA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1144C8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1144D2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1144DE);
	op_plain_offset	(x,	1,	0X40004970);
	op_plain_offset	(x,	129,	0X40004970);
	create_insn	(x=0X1144F6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X11450C);
	create_insn	(0X114512);
	create_insn	(x=0X114520);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X114524);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X114544);
	create_insn	(0X114554);
	create_insn	(x=0X11455C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X11457C);
	create_insn	(x=0X11457E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X114582);
	op_stkvar	(x,	1);
	set_cmt	(0X114586,	"a1",	0);
	create_insn	(x=0X114586);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X11458A,	"len",	0);
	set_cmt	(0X11458C,	"c",	0);
	create_insn	(x=0X114592);
	op_stkvar	(x,	1);
	create_insn	(x=0X1145A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X1145AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X1145B6);
	op_stkvar	(x,	1);
	create_insn	(x=0X1145C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X1145EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X1145FC);
	op_stkvar	(x,	1);
	create_dword	(x=0X11460C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X114610);
	create_dword	(x=0X114614);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X114618);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X11461C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X114620);
	create_dword	(0X114624);
	create_insn	(0X114634);
	set_name	(0X114634,	"j2_memcpy_libc");
	make_array	(0X114636,	0X2);
	create_insn	(0X114638);
	set_name	(0X114638,	"j3_memcpy_libc");
	create_insn	(0X114648);
	set_name	(0X114648,	"j_memset_maybe");
	make_array	(0X11464A,	0X2);
	create_insn	(x=0X11464C);
	op_hex		(x,	1);
	set_name	(0X11464C,	"memset_maybe_weird_arg_order");
	set_cmt	(0X114654,	"a3",	0);
	create_insn	(0X11465C);
	set_name	(0X11465C,	"memcpy_libc_thumb");
	make_array	(0X11465E,	0X2);
	create_insn	(0X114660);
	set_name	(0X114660,	"memcpy_libc");
	create_insn	(x=0X114668);
	op_hex		(x,	1);
	create_insn	(x=0X114694);
	op_hex		(x,	1);
	create_insn	(0X1146D4);
	create_insn	(0X1146F4);
	create_insn	(0X114734);
	set_name	(0X114734,	"j_memcpy_libc_child");
	make_array	(0X114736,	0X2);
	create_insn	(0X114738);
	set_name	(0X114738,	"memcpy_libc_child");
	create_insn	(0X11479C);
	set_name	(0X11479C,	"memzero");
	make_array	(0X11479E,	0X2);
	create_insn	(0X1147A0);
	set_name	(0X1147A0,	"memzero2");
	create_insn	(0X1147A4);
	set_name	(0X1147A4,	"memset_optimized_child");
	create_insn	(x=0X1147E8);
	op_hex		(x,	1);
	create_insn	(0X1147F4);
	make_array	(0X1147F6,	0X2);
	create_insn	(0X1147F8);
	create_insn	(0X114818);
	make_array	(0X11481A,	0X2);
	create_insn	(0X11481C);
	create_insn	(0X114868);
	create_insn	(0X1148EC);
	create_insn	(x=0X1148F4);
	op_hex		(x,	1);
	create_insn	(x=0X114904);
	op_hex		(x,	1);
	create_insn	(x=0X114914);
	op_hex		(x,	1);
	create_insn	(x=0X11491C);
	op_hex		(x,	1);
	create_insn	(0X1149A0);
	create_insn	(0X1149A8);
	set_name	(0X1149A8,	"j___rt_switch8");
	make_array	(0X1149AA,	0X2);
	create_insn	(0X1149AC);
	set_name	(0X1149AC,	"__rt_switch8");
	create_insn	(0X1149C4);
	set_name	(0X1149C4,	"thumb_thunk_0args");
	create_insn	(0X1149C6);
	set_name	(0X1149C6,	"thumb_thunk_1arg");
	create_insn	(0X1149C8);
	set_name	(0X1149C8,	"thumb_thunk_2args");
	create_insn	(0X1149CA);
	set_name	(0X1149CA,	"thumb_thunk_3args");
	create_insn	(0X1149CC);
	set_name	(0X1149CC,	"thumb_thunk_4args");
	create_insn	(0X1149CE);
	set_name	(0X1149CE,	"thumb_thunk_5args");
	create_insn	(0X1149D0);
	set_name	(0X1149D0,	"thumb_thunk_6args");
	create_insn	(0X1149D2);
	set_name	(0X1149D2,	"thumb_thunk_7args");
	create_insn	(0X1149D4);
	set_name	(0X1149D4,	"prepare_for_cmain");
	create_insn	(x=0X114A00);
	op_hex		(x,	1);
	create_insn	(x=0X114A04);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X114A10);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X114A18);
	create_dword	(x=0X114A1C);
	op_plain_offset	(x,	0,	0X114A04);
	op_plain_offset	(x,	128,	0X114A04);
	create_insn	(0X114A20);
	create_insn	(0X114A38);
	create_insn	(0X114A3C);
	create_insn	(0X114A44);
	create_insn	(x=0X114A4C);
	op_hex		(x,	1);
	set_cmt	(0X114A60,	"a2",	0);
	create_insn	(0X114A6C);
	create_insn	(0X114A80);
	set_name	(0X114A80,	"reset_everything_if_production____");
	create_insn	(0X114A94);
	create_insn	(0X114AAC);
	create_insn	(x=0X114B5C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X114B5C,	"ram_pokes");
	create_insn	(0X114B64);
	create_insn	(x=0X114B76);
	op_stkvar	(x,	1);
	create_insn	(x=0X114B78);
	op_stkvar	(x,	1);
	create_insn	(x=0X114B7E);
	op_stkvar	(x,	1);
	create_insn	(x=0X114B80);
	op_stkvar	(x,	1);
	create_insn	(x=0X114B8A);
	op_stkvar	(x,	1);
	create_insn	(x=0X114B8C);
	op_stkvar	(x,	1);
	create_insn	(x=0X114BAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X114BBA);
	op_stkvar	(x,	1);
	create_insn	(x=0X114BC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X114BD6);
	op_stkvar	(x,	1);
	create_insn	(x=0X114BE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X114C0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X114C12);
	op_stkvar	(x,	1);
	create_insn	(0X114C20);
	create_insn	(0X114C3C);
	set_name	(0X114C3C,	"nop2");
	create_insn	(0X114C48);
	set_name	(0X114C48,	"nop");
	create_insn	(0X114C58);
	create_insn	(x=0X114C6C);
	op_hex		(x,	1);
	create_insn	(x=0X114CA0);
	op_hex		(x,	1);
	create_insn	(0X114CB8);
	create_dword	(0X114CC4);
	create_insn	(0X114CC8);
	make_array	(0X114CCA,	0X2);
	create_insn	(0X114CCC);
	create_dword	(x=0X114CD8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X114CDC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X114CDC,	"reset_everything_if_production___");
	create_insn	(0X114CE4);
	set_name	(0X114CE4,	"reset_everything_if_production__");
	create_insn	(0X114CF8);
	create_insn	(0X114D00);
	create_dword	(0X114D08);
	create_insn	(0X114D0C);
	create_dword	(0X114D18);
	create_insn	(0X114D1C);
	set_name	(0X114D1C,	"j_divide_integer");
	make_array	(0X114D1E,	0X2);
	create_insn	(0X114D20);
	set_name	(0X114D20,	"divide_integer");
	create_insn	(x=0X114D3C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X114D44);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X114D48);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X114D50);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X114D54);
	set_name	(0X114D54,	"jump_into_nvtboot");
	make_array	(0X114D56,	0X2);
	create_insn	(0X114D58);
	create_insn	(x=0X114D5C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X114D64);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X114D68);
	make_array	(0X114D6A,	0X2);
	create_insn	(0X114D6C);
	create_insn	(0X114D70);
	set_name	(0X114D70,	"reset_everything_if_production_");
	make_array	(0X114D72,	0X2);
	create_insn	(0X114D74);
	create_insn	(0X114D80);
	create_insn	(0X114D8C);
	set_name	(0X114D8C,	"reset_everything_if_production");
	create_insn	(0X114DC0);
	create_dword	(0X114E0C);
	create_dword	(x=0X114E10);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X114E14);
	create_dword	(x=0X114E18);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X114E1C);
	make_array	(0X114E1E,	0X2);
	create_insn	(0X114E20);
	create_dword	(x=0X114E38);
	make_array	(x,	0X6);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X114EB8);
	make_array	(0X114EB8,	0XD);
	set_name	(0X114EB8,	"us_timer_config");
	create_word	(0X114EEC);
	make_array	(0X114EEC,	0X4);
	create_dword	(0X114EF4);
	create_byte	(0X114EFC);
	make_array	(0X114EFC,	0X10);
	create_dword	(0X114FA0);
	make_array	(0X114FA0,	0X3F);
	create_word	(0X1150A4);
	make_array	(0X1150A4,	0X4C);
	create_dword	(0X115140);
	make_array	(0X115140,	0X1E7);
	create_dword	(0X1158DC);
	make_array	(0X1158DC,	0X27);
	create_dword	(0X115978);
	make_array	(0X115978,	0X34);
	create_strlit	(0X115A48,	0X115A68);
	set_name	(0X115A48,	"aNvProdBootT210");
	create_word	(0X115B24);
	create_word	(0X115B26);
	create_dword	(0X115B88);
	create_dword	(0X115B8C);
	MakeStruct	(0X115B94,	"data_copy_table_struct");
	make_array	(0X115B94,	0X5);
	set_name	(0X115B94,	"meminit_copy_table");
	create_dword	(0X115BE4);
	create_byte	(0X115BE8);
	make_array	(0X115BE8,	0X20);
	create_byte	(0X115C08);
	make_array	(0X115C08,	0X15C);
	create_byte	(0X115D64);
	make_array	(0X115D64,	0XA9C);
	create_byte	(0X116800);
	make_array	(0X116800,	0X8);
	create_byte	(0X116808);
	make_array	(0X116808,	0X7F8);
	MakeStruct	(0X117000,	"some_key");
	make_array	(0X117000,	0X80);
	set_name	(0X117000,	"g_hardkeys");
	MakeStruct	(0X40000000,	"handoff");
	set_name	(0X40000000,	"nvtboot_handoff");
	MakeStruct	(0X40000100,	"boot_config_table");
	set_name	(0X40000100,	"g_bct");
	set_name	(0X40002900,	"g_bct_end_maybe");
	create_byte	(0X40002924);
	set_name	(0X40002924,	"mem_controller_enabled");
	create_dword	(0X40002928);
	make_array	(0X40002928,	0X6);
	set_name	(0X40002928,	"fuse_bootdev_for_strap");
	create_dword	(0X40002940);
	make_array	(0X40002940,	0X6);
	set_name	(0X40002940,	"fuse_bootdev_info_for_strap");
	create_dword	(x=0X40002958);
	make_array	(x,	0X6);
	op_dec		(x,	0);
	set_name	(0X40002958,	"storage_adapter_id_for_fuse");
	create_dword	(0X40002970);
	set_name	(0X40002970,	"debug_wut");
	create_dword	(0X40002974);
	set_name	(0X40002974,	"debug_known_calls");
	create_byte	(0X40002978);
	create_byte	(0X4000297C);
	create_byte	(0X4000297D);
	set_name	(0X4000297D,	"charger_detect_enabled");
	create_dword	(x=0X40002980);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X40002984);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X40002988);
	create_dword	(0X4000298C);
	set_name	(0X4000298C,	"g_storage_buffer");
	create_dword	(x=0X40002990);
	make_array	(x,	0X2);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X40002990,	"usb_buffers");
	MakeStruct	(0X40002998,	"storage_adapter");
	make_array	(0X40002998,	0XC);
	set_name	(0X40002998,	"storage_adapters");
	create_dword	(0X40002B18);
	make_array	(0X40002B18,	0X8);
	create_dword	(0X40002B38);
	set_name	(0X40002B38,	"g_usbd_reqp");
	create_dword	(0X40002B3C);
	set_name	(0X40002B3C,	"response_descriptor_ptr");
	create_dword	(0X40002B40);
	set_name	(0X40002B40,	"g_usbdp");
	create_dword	(0X40002B44);
	create_byte	(0X40002B48);
	make_array	(0X40002B48,	0X8);
	set_name	(0X40002B48,	"device_string_descriptor");
	MakeStruct	(0X40002B50,	"device_descriptor");
	set_name	(0X40002B50,	"g_device_descrptor");
	create_byte	(0X40002B7A);
	create_byte	(0X40002B7B);
	create_byte	(0X40002B81);
	create_byte	(0X40002B82);
	create_byte	(0X40002B8C);
	create_byte	(0X40002B9A);
	create_byte	(0X40002B9B);
	create_byte	(0X40002BA1);
	create_byte	(0X40002BA2);
	create_byte	(0X40002BA4);
	set_name	(0X40002BA4,	"vendor_string_descriptor");
	create_byte	(0X40002BC0);
	make_array	(0X40002BC0,	0XC);
	set_name	(0X40002BC0,	"serial_string_descriptor");
	create_byte	(0X40002BDA);
	create_dword	(0X40002BDC);
	create_byte	(0X40002BEC);
	make_array	(0X40002BEC,	0X4);
	create_byte	(0X40002BFE);
	create_byte	(0X40002BFF);
	create_byte	(0X40002C00);
	create_byte	(0X40002C01);
	create_byte	(0X40002C1E);
	create_byte	(0X40002C1F);
	create_byte	(0X40002C25);
	create_byte	(0X40002C26);
	create_byte	(0X40002C3E);
	create_byte	(0X40002C3F);
	create_byte	(0X40002C45);
	create_byte	(0X40002C46);
	create_dword	(0X40002C7C);
	MakeStruct	(0X40002C80,	"boot_device_uart_config");
	set_name	(0X40002C80,	"g_bootdev_uart_config");
	create_byte	(0X40002C88);
	create_dword	(0X40002C8C);
	create_dword	(0X40002C90);
	create_dword	(0X40002C94);
	create_byte	(0X40002C98);
	set_name	(0X40002C98,	"g_sdmmc_did_first_transfer");
	MakeStruct	(0X40002C9C,	"boot_device_sd_state");
	set_name	(0X40002C9C,	"g_sd_adapter_state");
	create_dword	(0X40002CB4);
	create_dword	(0X40002CC0);
	create_dword	(0X40002CC4);
	create_dword	(0X40002CC8);
	create_byte	(0X40002CCC);
	create_byte	(0X40002CCD);
	create_byte	(0X40002CCE);
	MakeStruct	(0X40002CF0,	"storage_context");
	set_name	(0X40002CF0,	"g_storage_context");
	create_dword	(x=0X40002D30);
	op_enum		(x,	0,	GetEnum("RCM_OP_MODE"),0);
	set_name	(0X40002D30,	"g_rcm_op_mode");
	create_dword	(0X40002D34);
	make_array	(0X40002D34,	0X4);
	set_name	(0X40002E30,	"g_rcm_state");
	set_name	(0X40002E44,	"valid_pubkey_loaded");
	set_name	(0X40002E48,	"rcm_field298");
	create_dword	(0X40002E4C);
	set_name	(0X40002E4C,	"g_selected_usb_buf");
	create_byte	(0X40002E50);
	set_name	(0X40002E50,	"g_rcm_requested_key");
	create_byte	(x=0X40002E51);
	op_enum		(x,	0,	GetEnum("SE_KEY_SIZE"),0);
	set_name	(0X40002E51,	"g_some_rcm_keysize");
	create_byte	(0X40002E52);
	set_name	(0X40002E52,	"g_rcm_hardkey_index");
	create_byte	(0X40002E53);
	set_name	(0X40002E53,	"g_some_rcm_ki_1");
	create_byte	(0X40002E54);
	set_name	(0X40002E54,	"g_some_rcm_ki_2");
	create_byte	(0X40002E55);
	set_name	(0X40002E55,	"second_rcm_attempt");
	MakeStruct	(0X40002E58,	"rcm_msg_t");
	set_name	(0X40002E58,	"rcm_msg_buf");
	create_dword	(0X40003100);
	create_dword	(0X40003104);
	create_dword	(0X40003108);
	create_dword	(0X4000310C);
	create_dword	(0X40003110);
	set_name	(0X40003110,	"rcm_msg_len_payload");
	MakeStruct	(0X40003114,	"main_populated_table");
	set_name	(0X40003114,	"usb_callback_table");
	MakeStruct	(0X4000313C,	"se_dma_desc");
	set_name	(0X4000313C,	"se_rsa_dma_desc_in");
	MakeStruct	(0X40003148,	"se_dma_desc");
	set_name	(0X40003148,	"se_rsa_dma_desc_out");
	create_dword	(0X400031D8);
	make_array	(0X400031D8,	0X44);
	create_dword	(0X400032E8);
	MakeStruct	(0X40003318,	"secure_load_desc");
	set_name	(0X40003318,	"g_secure_load_desc");
	create_dword	(0X40003330);
	make_array	(0X40003330,	0X18);
	set_name	(0X40003330,	"g_bls_load_descs");
	MakeStruct	(0X40003390,	"load_context");
	set_name	(0X40003390,	"g_load_context");
	MakeStruct	(0X40003510,	"boot_device_shared_state");
	set_name	(0X40003510,	"g_bootdev_shared_state");
	MakeStruct	(0X40003970,	"usb_request");
	set_name	(0X40003970,	"g_usb_req");
	MakeStruct	(0X40004000,	"usbd");
	set_name	(0X40004000,	"g_usbd");
	create_dword	(0X400046C0);
	create_dword	(0X400046C8);
	create_dword	(0X400046CC);
	create_dword	(0X400046D4);
	create_dword	(0X400046D8);
	create_dword	(0X400046E0);
	create_byte	(0X400046F0);
	create_dword	(0X400046FC);
	create_dword	(0X40004700);
	create_dword	(0X40004710);
	create_dword	(0X40004714);
	create_dword	(0X40004718);
	create_dword	(0X4000471C);
	create_byte	(0X40004720);
	create_dword	(0X40004724);
	create_dword	(0X40004728);
	create_dword	(0X4000472C);
	create_dword	(0X40004730);
	create_dword	(0X40004738);
	create_dword	(0X4000473C);
	create_dword	(0X40004740);
	create_byte	(0X40004744);
	create_dword	(0X40004748);
	create_byte	(0X4000474C);
	create_dword	(0X40004750);
	create_dword	(0X40004754);
	create_byte	(0X40004758);
	create_dword	(0X4000475C);
	create_dword	(0X40004760);
	create_byte	(0X40004764);
	create_byte	(0X40004765);
	create_byte	(0X40004766);
	create_byte	(0X4000476C);
	create_byte	(0X4000476D);
	create_byte	(0X4000476E);
	create_word	(0X40004776);
	create_byte	(0X40004778);
	create_byte	(0X40004779);
	create_byte	(0X4000477A);
	create_byte	(0X4000477B);
	create_byte	(0X4000477C);
	create_byte	(0X4000477E);
	create_byte	(0X4000477F);
	create_dword	(0X40004780);
	create_dword	(0X40004784);
	create_dword	(0X40004788);
	create_dword	(0X4000478C);
	create_dword	(0X40004790);
	create_dword	(0X40004794);
	create_dword	(0X40004798);
	set_name	(0X40004798,	"g_sd_devinfo_voltage_range");
	create_byte	(0X4000479C);
	set_name	(0X4000479C,	"g_sd_devinfo_disable_boot_mode");
	create_byte	(0X4000479D);
	set_name	(0X4000479D,	"g_sd_devinfo_ddr_is_8bit");
	create_byte	(0X4000479E);
	set_name	(0X4000479E,	"g_sd_devinfo_pads_voltage");
	create_byte	(0X4000479F);
	set_name	(0X4000479F,	"g_sd_devinfo_clock_divider");
	create_byte	(0X400047A0);
	set_name	(0X400047A0,	"g_sd_devinfo_multipage_support");
	MakeStruct	(0X400047A4,	"boot_device_sd_config");
	set_name	(0X400047A4,	"g_bootdev_sd_config");
	create_byte	(0X4000495C);
	create_byte	(0X4000495E);
	create_byte	(0X4000495F);
	create_byte	(0X40004960);
	create_byte	(0X40004961);
	create_byte	(0X40004962);
	create_byte	(0X40004963);
	create_byte	(0X40004964);
	create_byte	(0X40004966);
	create_byte	(0X40004967);
	create_dword	(0X400049F0);
	create_byte	(0X40004A00);
	make_array	(0X40004A00,	0X100);
	set_name	(0X40004A00,	"some_pubkey");
	create_dword	(0X40004C20);
	create_dword	(0X40004C24);
	set_name	(0X40004C24,	"g_warmboot_start");
	create_dword	(0X40004C28);
	set_name	(0X40004C28,	"g_warmboot_entry");
	create_dword	(0X40004C2C);
	set_name	(0X40004C2C,	"g_warmboot_size");
	create_byte	(0X40004C30);
	make_array	(0X40004C30,	0X48);
	set_name	(0X40004C30,	"software_int_handler_loc");
	set_name	(0X40004C78,	"syscall_handler_table");
	create_byte	(0X40005000);
	make_array	(0X40005000,	0X4000);
	set_name	(0X40005000,	"usb_buf1");
	create_byte	(0X40009000);
	make_array	(0X40009000,	0X4000);
	set_name	(0X40009000,	"usb_buf2");
	create_byte	(0X4000D000);
	make_array	(0X4000D000,	0X3000);
	set_name	(0X4000D000,	"stack_should_end_here");
	create_byte	(0X40010000);
	make_array	(0X40010000,	0X10000);
	set_name	(0X40010000,	"rcm_extra_data");
	create_byte	(0X40020000);
	make_array	(0X40020000,	0X2300);
	create_byte	(0X40022300);
	make_array	(0X40022300,	0X34);
	create_dword	(0X40022334);
	create_dword	(0X4002233C);
	create_byte	(0X40022340);
	make_array	(0X40022340,	0XDCC0);
	create_byte	(0X40030000);
	make_array	(0X40030000,	0X8000);
	create_dword	(0X40038000);
	set_name	(0X40038000,	"debug_magic");
	create_dword	(0X40038004);
	set_name	(0X40038004,	"debug_strings_count");
	create_dword	(0X40038008);
	set_name	(0X40038008,	"debug_strings");
	create_byte	(0X4003800C);
	make_array	(0X4003800C,	0X6FF4);
	create_byte	(0X4003F001);
	make_array	(0X4003F001,	0XFFF);
	create_dword	(0X60005000);
	set_name	(0X60005000,	"TIMER_TMR0_TMR_PTV_0");
	create_dword	(0X60005004);
	set_name	(0X60005004,	"TIMER_TMR0_TMR_PCR_0");
	create_dword	(0X60005010);
	set_name	(0X60005010,	"TMRUS");
	set_name	(0X60005014,	"TIMERUS_USEC_CFG_0");
	create_dword	(0X60005180);
	set_name	(0X60005180,	"TIMER_WDT4_CONFIG_0");
	create_dword	(0X60005184);
	set_name	(0X60005184,	"TIMER_WDT4_STATUS_0");
	create_dword	(0X60005188);
	set_name	(0X60005188,	"TIMER_WDT4_COMMAND_0");
	create_dword	(0X6000518C);
	set_name	(0X6000518C,	"TIMER_WDT4_UNLOCK_PATTERN_0");
	create_dword	(0X60006000);
	set_name	(0X60006000,	"CLK_RST_CONTROLLER_RST_SOURCE_0");
	create_dword	(0X6000600C);
	set_name	(0X6000600C,	"CLK_RST_CONTROLLER_RST_DEVICES_U_0");
	set_name	(0X60006014,	"CLK_RST_CONTROLLER_CLK_OUT_ENB_H_0");
	create_dword	(0X60006018);
	set_name	(0X60006018,	"CLK_RST_CONTROLLER_CLK_OUT_ENB_U_0");
	create_dword	(0X60006020);
	create_dword	(0X60006024);
	set_name	(0X60006024,	"CLK_RST_CONTROLLER_SUPER_CCLK_DIVIDER_0");
	set_name	(0X60006028,	"CLK_RST_CONTROLLER_SCLK_BURST_POLICY_0");
	create_dword	(0X60006030);
	set_name	(0X60006030,	"CLK_RST_CONTROLLER_CLK_SYSTEM_RATE_0");
	create_dword	(0X60006040);
	create_dword	(0X60006048);
	set_name	(0X60006048,	"CLK_RST_CONTROLLER_MISC_CLK_ENB_0");
	create_dword	(0X60006050);
	set_name	(0X60006050,	"CLK_RST_CONTROLLER_OSC_CTRL_0");
	create_dword	(0X60006058);
	set_name	(0X60006058,	"CLK_RST_CONTROLLER_OSC_FREQ_DET_0");
	create_word	(0X6000605C);
	make_array	(0X6000605C,	0X12);
	set_name	(0X6000605C,	"CLK_RST_CONTROLLER_OSC_FREQ_DET_STATUS_0");
	set_name	(0X60006080,	"CLK_RST_CONTROLLER_PLLC_BASE_0");
	create_word	(0X60006098);
	set_name	(0X6000609C,	"CLK_RST_CONTROLLER_PLLM_MISC2_0");
	set_name	(0X600060A0,	"CLK_RST_CONTROLLER_PLLP_BASE_0");
	create_dword	(0X600060A4);
	set_name	(0X600060A4,	"CLK_RST_CONTROLLER_PLLP_OUTA_0");
	create_dword	(0X600060A8);
	set_name	(0X600060A8,	"CLK_RST_CONTROLLER_PLLP_OUTB_0");
	set_name	(0X600060AC,	"CLK_RST_CONTROLLER_PLLP_MISC_0");
	create_dword	(0X600060C0);
	set_name	(0X600060C0,	"CLK_RST_CONTROLLER_PLLU_BASE_0");
	create_dword	(0X600060C4);
	set_name	(0X600060C4,	"CLK_RST_CONTROLLER_PLLU_OUTA_0");
	create_dword	(0X600060CC);
	set_name	(0X600060CC,	"CLK_RST_CONTROLLER_PLLU_MISC_0");
	create_dword	(0X600060E4);
	set_name	(0X600060E4,	"CLK_RST_CONTROLLER_PLLX_MISC_0");
	create_dword	(0X600060F0);
	set_name	(0X600060F0,	"CLK_RST_CONTROLLER_PLLE_SS_CNTL1_0");
	create_dword	(0X600060F4);
	set_name	(0X600060F4,	"CLK_RST_CONTROLLER_PLLE_SS_CNTL2_0");
	set_name	(0X60006178,	"CLK_RST_CONTROLLER_CLK_SOURCE_UARTA_0");
	create_dword	(0X60006180);
	set_name	(0X60006180,	"CLK_RST_CONTROLLER_CLK_SOURCE_HOST1X_0");
	create_dword	(0X6000619C);
	set_name	(0X6000619C,	"CLK_RST_CONTROLLER_CLK_SOURCE_EMC_0");
	create_dword	(0X60006280);
	set_name	(0X60006280,	"CLK_RST_CONTROLLER_CLK_OUT_ENB_X_0");
	create_dword	(0X60006284);
	set_name	(0X60006284,	"CLK_RST_CONTROLLER_CLK_ENB_X_SET_0");
	create_dword	(0X60006290);
	set_name	(0X60006290,	"CLK_RST_CONTROLLER_RST_DEV_X_SET_0");
	create_dword	(0X60006298);
	set_name	(0X60006298,	"CLK_RST_CONTROLLER_CLK_OUT_ENB_Y_0");
	create_dword	(0X6000629C);
	set_name	(0X6000629C,	"CLK_RST_CONTROLLER_CLK_ENB_Y_SET_0");
	create_dword	(0X600062A8);
	set_name	(0X600062A8,	"CLK_RST_CONTROLLER_RST_DEV_Y_SET_0");
	create_dword	(0X600062AC);
	set_name	(0X600062AC,	"CLK_RST_CONTROLLER_RST_DEV_Y_CLR_0");
	create_dword	(0X60006300);
	set_name	(0X60006300,	"CLK_RST_CONTROLLER_RST_DEV_L_SET_0");
	create_dword	(0X60006308);
	set_name	(0X60006308,	"CLK_RST_CONTROLLER_RST_DEV_H_SET_0");
	create_dword	(0X60006310);
	set_name	(0X60006310,	"CLK_RST_CONTROLLER_RST_DEV_U_SET_0");
	create_dword	(0X60006320);
	set_name	(0X60006320,	"CLK_RST_CONTROLLER_CLK_ENB_L_SET_0");
	create_dword	(0X60006328);
	set_name	(0X60006328,	"CLK_RST_CONTROLLER_CLK_ENB_H_SET_0");
	create_dword	(0X60006330);
	set_name	(0X60006330,	"CLK_RST_CONTROLLER_CLK_ENB_U_SET_0");
	create_dword	(0X60006340);
	set_name	(0X60006340,	"CLK_RST_CONTROLLER_RST_CPU_CMPLX_SET_0");
	create_dword	(0X6000635C);
	set_name	(0X6000635C,	"CLK_RST_CONTROLLER_RST_DEVICES_W_0");
	create_dword	(0X60006364);
	set_name	(0X60006364,	"CLK_RST_CONTROLLER_CLK_OUT_ENB_W_0");
	create_dword	(0X60006380);
	set_name	(0X60006380,	"CLK_RST_CONTROLLER_CPU_SOFTRST_CTRL_0");
	set_cmt	(0X600063A4,	"Contains Fusebit clock enable bit - undocumented",	0);
	create_dword	(0X600063A4);
	set_name	(0X600063A4,	"CLK_RST_CONTROLLER_LVL2_CLK_GATE_OVRD_0");
	create_dword	(0X60006400);
	set_name	(0X60006400,	"CLK_RST_CONTROLLER_CLK_SOURCE_SYS_0");
	create_dword	(0X60006424);
	set_name	(0X60006424,	"CLK_RST_CONTROLLER_CLK_SOURCE_SATA_0");
	create_dword	(0X60006428);
	set_name	(0X60006428,	"CLK_RST_CONTROLLER_CLK_SOURCE_HDA_0");
	create_dword	(0X6000642C);
	set_name	(0X6000642C,	"CLK_RST_CONTROLLER_UNKNOWN");
	create_dword	(0X60006430);
	set_name	(0X60006430,	"CLK_RST_CONTROLLER_RST_DEV_V_SET_0");
	create_dword	(0X60006438);
	set_name	(0X60006438,	"CLK_RST_CONTROLLER_RST_DEV_W_SET_0");
	create_dword	(0X60006440);
	set_name	(0X60006440,	"CLK_RST_CONTROLLER_CLK_ENB_V_SET_0");
	create_dword	(0X60006448);
	set_name	(0X60006448,	"CLK_RST_CONTROLLER_CLK_ENB_W_SET_0");
	create_dword	(0X6000644C);
	set_name	(0X6000644C,	"CLK_RST_CONTROLLER_CLK_ENB_W_CLR_0");
	create_dword	(0X60006480);
	set_name	(0X60006480,	"CLK_RST_CONTROLLER_UTMIP_PLL_CFG0_0");
	create_dword	(0X60006484);
	set_name	(0X60006484,	"CLK_RST_CONTROLLER_UTMIP_PLL_CFG1_0");
	create_dword	(0X60006488);
	set_name	(0X60006488,	"CLK_RST_CONTROLLER_UTMIP_PLL_CFG2_0");
	create_dword	(0X6000648C);
	set_name	(0X6000648C,	"CLK_RST_CONTROLLER_PLLE_AUX_0");
	create_dword	(0X600064C0);
	set_name	(0X600064C0,	"CLK_RST_CONTROLLER_UTMIP_PLL_CFG3_0");
	create_dword	(0X600064CC);
	set_name	(0X600064CC,	"CLK_RST_CONTROLLER_PLLREFE_OUT_0");
	create_dword	(0X60006500);
	set_name	(0X60006500,	"CLK_RST_CONTROLLER_PLLC3_MISC_0_0");
	create_dword	(0X60006510);
	set_name	(0X60006510,	"CLK_RST_CONTROLLER_PLLX_MISC_1_0");
	create_dword	(0X60006518);
	set_name	(0X60006518,	"CLK_RST_CONTROLLER_PLLX_MISC_3_0");
	create_dword	(0X6000652C);
	set_name	(0X6000652C,	"CLK_RST_CONTROLLER_UTMIPLL_HW_PWRDN_CFG0_0");
	create_dword	(0X60006580);
	create_dword	(0X600065A4);
	set_name	(0X600065A4,	"CLK_RST_CONTROLLER_PLLC4_BASE_0");
	create_dword	(0X600065A8);
	set_name	(0X600065A8,	"CLK_RST_CONTROLLER_PLLC4_MISC_0");
	create_dword	(0X60006600);
	create_dword	(0X60006604);
	create_dword	(0X60006608);
	create_dword	(0X6000660C);
	create_dword	(0X60006610);
	set_name	(0X60006664,	"CLK_RST_CONTROLLER_CLK_SOURCE_EMC_DLL_0");
	create_dword	(0X6000667C);
	set_name	(0X6000667C,	"CLK_RST_CONTROLLER_PLLP_OUTC_0");
	create_dword	(0X600066CC);
	set_name	(0X6000C110,	"AHB_AHB_SPARE_REG_0");
	set_name	(0X6000C200,	"SB_CSR_0");
	create_dword	(0X6000D534);
	create_dword	(0X6000F200);
	set_name	(0X6000F200,	"vec_bpmp_reset");
	create_dword	(0X6000F204);
	set_name	(0X6000F204,	"vec_bpmp_undefined_instruction");
	create_dword	(0X6000F208);
	set_name	(0X6000F208,	"vec_bpmp_software_interrupt");
	create_dword	(0X6000F20C);
	set_name	(0X6000F20C,	"vec_bpmp_prefetch_abort");
	create_dword	(0X6000F210);
	set_name	(0X6000F210,	"vec_bpmp_data_abort");
	create_dword	(0X6000F214);
	create_dword	(0X6000F218);
	set_name	(0X6000F218,	"vec_bpmp_irq");
	create_dword	(0X6000F21C);
	set_name	(0X6000F21C,	"vec_bpmp_fiq");
	create_dword	(0X6001DC00);
	create_dword	(0X70000000);
	make_array	(0X70000000,	0X2);
	create_dword	(0X70000008);
	set_name	(0X70000008,	"APB_MISC_PP_STRAPPING_OPT_A_0");
	create_dword	(0X70000804);
	set_name	(0X70000804,	"PRODUCT_ID");
	create_dword	(0X70000AB4);
	create_dword	(0X70003000);
	set_name	(0X700030E4,	"PINMUX_AUX_UART1_TX_0");
	set_name	(0X700030E8,	"PINMUX_AUX_UART1_RX_0");
	set_name	(0X700031AC,	"PINMUX_AUX_USB_VBUS_EN0_0");
	set_name	(0X70003208,	"PINMUX_AUX_LCD_GPIO1_0");
	create_byte	(0X70006000);
	create_byte	(0X70006014);
	make_array	(0X70006014,	0X2B);
	create_word	(0X7000D01C);
	create_dword	(0X7000D06C);
	create_dword	(0X7000E400);
	set_name	(0X7000E400,	"APBDEV_PMC_CNTRL_0");
	create_dword	(0X7000E420);
	set_name	(0X7000E420,	"APBDEV_PMC_DPD_SAMPLE_0");
	create_dword	(0X7000E424);
	set_name	(0X7000E424,	"APBDEV_PMC_DPD_ENABLE_0");
	create_dword	(0X7000E440);
	set_name	(0X7000E440,	"APBDEV_PMC_BLINK_TIMER_0");
	create_dword	(0X7000E444);
	set_name	(0X7000E444,	"APBDEV_PMC_NO_IOPOWER_0");
	create_dword	(0X7000E450);
	set_name	(0X7000E450,	"APBDEV_PMC_SCRATCH0_0");
	create_dword	(0X7000E458);
	set_name	(0X7000E458,	"APBDEV_PMC_SCRATCH2_0");
	create_byte	(0X7000E45C);
	make_array	(0X7000E45C,	0X4);
	create_dword	(0X7000E460);
	set_name	(0X7000E460,	"APBDEV_PMC_SCRATCH4_0");
	create_word	(0X7000E464);
	create_word	(0X7000E470);
	create_word	(0X7000E474);
	create_dword	(0X7000E478);
	create_dword	(0X7000E47C);
	create_byte	(0X7000E480);
	make_array	(0X7000E480,	0X4);
	create_byte	(0X7000E484);
	make_array	(0X7000E484,	0X4);
	create_byte	(0X7000E488);
	make_array	(0X7000E488,	0X4);
	create_byte	(0X7000E48C);
	make_array	(0X7000E48C,	0X4);
	create_byte	(0X7000E490);
	make_array	(0X7000E490,	0X4);
	create_byte	(0X7000E494);
	make_array	(0X7000E494,	0X4);
	create_dword	(0X7000E498);
	create_byte	(0X7000E49C);
	make_array	(0X7000E49C,	0XC);
	create_byte	(0X7000E4A8);
	make_array	(0X7000E4A8,	0X4);
	create_dword	(0X7000E4AC);
	make_array	(0X7000E4AC,	0X5);
	create_dword	(0X7000E4F0);
	create_dword	(0X7000E4F8);
	set_name	(0X7000E4F8,	"APBDEV_PMC_PLLP_WB0_OVERRIDE_0");
	create_dword	(0X7000E4FC);
	create_word	(0X7000E500);
	create_word	(0X7000E504);
	create_byte	(0X7000E514);
	make_array	(0X7000E514,	0X4);
	create_dword	(0X7000E528);
	set_name	(0X7000E528,	"APBDEV_PMC_SCRATCH35_0");
	create_dword	(0X7000E52C);
	create_dword	(0X7000E5B4);
	set_name	(0X7000E644,	"APBDEV_PMC_SCRATCH49_0");
	set_name	(0X7000E648,	"APBDEV_PMC_SCRATCH50_0");
	set_name	(0X7000E64C,	"APBDEV_PMC_SCRATCH51_0");
	create_dword	(0X7000E650);
	set_name	(0X7000E650,	"APBDEV_PMC_SCRATCH52_0");
	create_dword	(0X7000E654);
	set_name	(0X7000E654,	"APBDEV_PMC_SCRATCH53_0");
	create_dword	(0X7000E658);
	set_name	(0X7000E658,	"APBDEV_PMC_SCRATCH54_0");
	create_dword	(0X7000E65C);
	set_name	(0X7000E65C,	"APBDEV_PMC_SCRATCH55_0");
	create_dword	(0X7000E700);
	make_array	(0X7000E700,	0X2);
	create_dword	(0X7000E708);
	create_dword	(0X7000E70C);
	make_array	(0X7000E70C,	0X5);
	create_dword	(0X7000E720);
	create_dword	(0X7000E724);
	make_array	(0X7000E724,	0X18);
	create_dword	(0X7000E784);
	create_dword	(0X7000E788);
	create_dword	(0X7000E78C);
	make_array	(0X7000E78C,	0X6);
	create_word	(0X7000E7A4);
	create_word	(0X7000E7B4);
	create_word	(0X7000E7B8);
	create_word	(0X7000E7BC);
	create_word	(0X7000E7C0);
	create_word	(0X7000E7C4);
	set_name	(0X7000E880,	"APBDEV_PMC_DEBUG_AUTHENTICATION_0");
	create_dword	(0X7000EA0C);
	make_array	(0X7000EA0C,	0XB);
	create_dword	(0X7000EA38);
	make_array	(0X7000EA38,	0X10);
	create_dword	(0X7000EA78);
	create_dword	(0X7000EA7C);
	make_array	(0X7000EA7C,	0X2);
	create_dword	(0X7000EA84);
	make_array	(0X7000EA84,	0X7);
	create_word	(0X7000EAA0);
	create_word	(0X7000EAA4);
	create_word	(0X7000EAA8);
	create_word	(0X7000EAAC);
	create_word	(0X7000EAB0);
	create_word	(0X7000EAB4);
	create_word	(0X7000EAB8);
	create_word	(0X7000EABC);
	create_word	(0X7000EAC0);
	create_word	(0X7000EAC4);
	create_word	(0X7000EAC8);
	create_word	(0X7000EACC);
	create_word	(0X7000EAD0);
	create_word	(0X7000EAD4);
	create_word	(0X7000EAD8);
	create_word	(0X7000EADC);
	create_word	(0X7000EAE0);
	create_word	(0X7000EAE4);
	create_word	(0X7000EAE8);
	create_word	(0X7000EAEC);
	create_word	(0X7000EB0C);
	create_word	(0X7000EB10);
	create_word	(0X7000EB14);
	create_word	(0X7000EB18);
	create_word	(0X7000EB1C);
	create_word	(0X7000EB20);
	create_word	(0X7000EB24);
	create_word	(0X7000EB28);
	create_word	(0X7000EB2C);
	create_word	(0X7000EB30);
	create_word	(0X7000EB34);
	create_word	(0X7000EB38);
	create_word	(0X7000EB3C);
	create_word	(0X7000EB40);
	create_word	(0X7000EB44);
	create_word	(0X7000EB48);
	create_word	(0X7000EB4C);
	create_word	(0X7000EB50);
	create_word	(0X7000EB54);
	create_word	(0X7000EB58);
	create_word	(0X7000EB5C);
	create_word	(0X7000EB60);
	create_word	(0X7000EB64);
	create_word	(0X7000EB68);
	create_word	(0X7000EB6C);
	create_word	(0X7000EB70);
	create_word	(0X7000EB74);
	create_word	(0X7000EB78);
	create_word	(0X7000EB7C);
	create_dword	(0X7000EB80);
	create_word	(0X7000EB84);
	create_word	(0X7000EB88);
	create_dword	(0X7000EB90);
	make_array	(0X7000EB90,	0XE);
	create_word	(0X7000EBC8);
	create_byte	(0X7000EBCC);
	make_array	(0X7000EBCC,	0X30);
	create_word	(0X7000EBFC);
	create_word	(0X7000EC00);
	create_dword	(0X7000EC04);
	make_array	(0X7000EC04,	0X2);
	create_word	(0X7000EC0C);
	create_dword	(0X7000EC10);
	make_array	(0X7000EC10,	0X2);
	create_dword	(0X7000EC18);
	create_dword	(0X7000ED08);
	set_name	(0X7000ED08,	"APBDEV_PMC_SCRATCH250_0");
	create_dword	(0X7000F800);
	set_name	(0X7000F800,	"FUSE_CTRL");
	create_dword	(0X7000F804);
	set_name	(0X7000F804,	"FUSE_REG_ADDR");
	create_dword	(0X7000F808);
	set_name	(0X7000F808,	"FUSE_REG_READ");
	create_dword	(0X7000F828);
	set_name	(0X7000F828,	"FUSE_PRIVATEKEYDISABLE");
	create_dword	(0X7000F900);
	set_name	(0X7000F900,	"FUSE_PRODUCTION_MODE");
	create_dword	(0X7000F910);
	set_name	(0X7000F910,	"FUSE_SKU_INFO");
	create_dword	(0X7000F940);
	set_name	(0X7000F940,	"FUSE_SOC_IDDQ");
	create_dword	(0X7000F948);
	set_name	(0X7000F948,	"FUSE_FA");
	create_dword	(0X7000F964);
	make_array	(0X7000F964,	0X8);
	set_name	(0X7000F964,	"FUSE_PUBLIC_KEY");
	create_dword	(0X7000F99C);
	set_name	(0X7000F99C,	"FUSE_FIRST_BOOTROM_PATCH_SIZE_REG");
	set_cmt	(0X7000F9A0,	"Security mode -> JTAG disabled",	1);
	create_dword	(0X7000F9A0);
	set_name	(0X7000F9A0,	"FUSE_SECURITY_MODE");
	create_dword	(0X7000F9A4);
	set_name	(0X7000F9A4,	"FUSE_PRIVATE_KEY0");
	create_dword	(0X7000F9A8);
	set_name	(0X7000F9A8,	"FUSE_PRIVATE_KEY1");
	create_dword	(0X7000F9AC);
	set_name	(0X7000F9AC,	"FUSE_PRIVATE_KEY2");
	create_dword	(0X7000F9B0);
	set_name	(0X7000F9B0,	"FUSE_PRIVATE_KEY3");
	create_dword	(0X7000F9B4);
	set_name	(0X7000F9B4,	"FUSE_PRIVATE_KEY4");
	create_dword	(0X7000F9BC);
	set_name	(0X7000F9BC,	"FUSE_BOOT_DEVICE_INFO");
	create_dword	(0X7000F9C0);
	set_name	(0X7000F9C0,	"FUSE_RESERVED_SW");
	create_dword	(0X7000F9F0);
	set_name	(0X7000F9F0,	"FUSE_SKU_USB_CALIB");
	create_dword	(0X7000FA00);
	set_name	(0X7000FA00,	"FUSE_VENDOR_CODE");
	create_dword	(0X7000FA04);
	set_name	(0X7000FA04,	"FUSE_FAB_CODE");
	create_dword	(0X7000FA08);
	set_name	(0X7000FA08,	"FUSE_LOT_CODE_0");
	create_dword	(0X7000FA0C);
	set_name	(0X7000FA0C,	"FUSE_LOT_CODE_1");
	create_dword	(0X7000FA10);
	set_name	(0X7000FA10,	"FUSE_WAFER_ID");
	create_dword	(0X7000FA14);
	set_name	(0X7000FA14,	"FUSE_X_COORDINATE");
	create_dword	(0X7000FA18);
	set_name	(0X7000FA18,	"FUSE_Y_COORDINATE");
	create_dword	(0X7000FA20);
	create_dword	(0X7000FA24);
	set_name	(0X7000FA24,	"FUSE_SATA_CALIB");
	create_dword	(0X7000FA40);
	create_dword	(0X7000FA68);
	set_name	(0X7000FA68,	"FUSE_PKC_DISABLE");
	create_dword	(0X7000FAE8);
	set_name	(0X7000FAE8,	"FUSE_HARDKEY_INDEX");
	create_dword	(0X7000FAEC);
	set_name	(0X7000FAEC,	"FUSE_FAEC");
	create_dword	(0X7000FB50);
	set_name	(0X7000FB50,	"FUSE_USB_CALIB_EXT");
	create_dword	(0X70012008);
	set_name	(0X70012008,	"SE_OPERATION_REG_OFFSET");
	create_dword	(0X70012010);
	set_name	(0X70012010,	"SE_INT_STATUS_REG_OFFSET");
	create_dword	(0X70012014);
	set_name	(0X70012014,	"SE_CONFIG_REG_OFFSET");
	create_dword	(0X70012018);
	set_name	(0X70012018,	"SE_IN_LL_ADDR_REG_OFFSET");
	create_dword	(0X70012024);
	set_name	(0X70012024,	"SE_OUT_LL_ADDR_REG_OFFSET");
	create_dword	(0X70012200);
	set_name	(0X70012200,	"SE_SHA_CONFIG_REG_OFFSET");
	create_dword	(0X70012204);
	set_name	(0X70012204,	"SE_SHA_MSG_LENGTH_REG_OFFSET");
	create_dword	(0X70012208);
	create_dword	(0X7001220C);
	create_dword	(0X70012210);
	create_dword	(0X70012214);
	set_name	(0X70012214,	"SECURITY_ENGINE_DATA_SIZE_BITS");
	create_dword	(0X70012218);
	create_dword	(0X7001221C);
	create_dword	(0X70012220);
	create_dword	(0X70012304);
	set_name	(0X70012304,	"SE_CRYPTO_REG_OFFSET");
	create_dword	(0X70012318);
	set_name	(0X70012318,	"SE_BLOCK_COUNT_REG_OFFSET");
	create_dword	(0X7001231C);
	set_name	(0X7001231C,	"SE_KEYTABLE_REG_OFFSET");
	create_dword	(0X70012320);
	set_name	(0X70012320,	"SE_KEYTABLE_DATA0_REG_OFFSET");
	create_dword	(0X70012330);
	set_name	(0X70012330,	"SE_CRYPTO_KEYTABLE_DST_REG_OFFSET");
	create_dword	(0X70012400);
	set_name	(0X70012400,	"SE_RSA_CONFIG");
	create_dword	(0X70012404);
	set_name	(0X70012404,	"SE_RSA_KEY_SIZE_REG_OFFSET");
	create_dword	(0X70012408);
	set_name	(0X70012408,	"SE_RSA_EXP_SIZE_REG_OFFSET");
	create_dword	(0X70012420);
	set_name	(0X70012420,	"SE_RSA_KEYTABLE_ADDR");
	create_dword	(0X70012424);
	set_name	(0X70012424,	"SE_RSA_KEYTABLE_DATA");
	create_dword	(0X70012428);
	set_name	(0X70012428,	"SE_RSA_OUTPUT");
	create_dword	(0X70012800);
	set_name	(0X70012800,	"SECURITY_ENGINE_STATUS");
	create_dword	(0X70012804);
	set_name	(0X70012804,	"SE_ERR_STATUS_0");
	create_dword	(0X70012808);
	set_name	(0X70012808,	"SE_SPARE_0_REG_OFFSET");
	create_word	(0X70019050);
	create_dword	(0X7001965C);
	create_dword	(0X70019660);
	create_dword	(0X70019964);
	create_word	(0X700214A4);
	create_dword	(0X70027118);
	make_array	(0X70027118,	0X5);
	create_dword	(0X70098004);
	create_dword	(0X70098010);
	create_dword	(0X7009841C);
	create_dword	(0X70099180);
	create_dword	(0X7009F004);
	create_dword	(0X7009F020);
	create_dword	(0X7009F024);
	create_dword	(0X7009F028);
	create_dword	(0X7009F084);
	create_dword	(0X7009F088);
	create_dword	(0X7009F08C);
	create_dword	(0X7009F860);
	create_dword	(0X7009F960);
	make_array	(0X7009F960,	0XB8);
	create_dword	(0X7009FC60);
	create_dword	(0X700B0600);
	set_name	(0X700B0600,	"SDMMC_SDMA_ADDR");
	create_dword	(0X700B0604);
	set_name	(0X700B0604,	"SDMMC_BLOCK_SIZE");
	create_dword	(0X700B0608);
	set_name	(0X700B0608,	"SDMMC_ARGUMENT");
	create_dword	(0X700B060C);
	set_name	(0X700B060C,	"SDMMC_TRANSFER_MODE");
	create_dword	(0X700B0610);
	set_name	(0X700B0610,	"SDMMC_RESPONSE0");
	create_dword	(0X700B0614);
	set_name	(0X700B0614,	"SDMMC_RESPONSE1");
	create_dword	(0X700B0618);
	set_name	(0X700B0618,	"SDMMC_RESPONSE2");
	create_dword	(0X700B061C);
	set_name	(0X700B061C,	"SDMMC_RESPONSE3");
	create_dword	(0X700B0620);
	set_name	(0X700B0620,	"SDMMC_BUFFER_DATA_PORT");
	create_dword	(0X700B0624);
	set_name	(0X700B0624,	"SDMMC_PRESENT_STATE");
	create_dword	(0X700B0628);
	set_name	(0X700B0628,	"SDMMC_HOST_POWER_GAP_WAKEUP_CONTROL");
	create_word	(0X700B062C);
	set_name	(0X700B062C,	"SDMMC_CLOCK_CONTROL");
	set_name	(0X700B062E,	"SDMMC_TIMEOUT_CONTROL");
	set_name	(0X700B062F,	"SDMMC_SOFTWARE_RESET");
	create_dword	(0X700B0630);
	set_name	(0X700B0630,	"SDMMC_INT_STATUS");
	create_dword	(0X700B0634);
	set_name	(0X700B0634,	"SDMMC_INT_ENABLE");
	create_dword	(0X700B0638);
	set_name	(0X700B0638,	"SDMMC_INT_SIGNAL_ENABLE");
	create_dword	(0X700B063C);
	set_name	(0X700B063C,	"SDMMC_AUTO_CMD12_ERR_STATUS_0");
	create_dword	(0X700B0640);
	set_name	(0X700B0640,	"SDMMC_CAPABILITIES");
	create_dword	(0X700B0644);
	set_name	(0X700B0644,	"SDMMC_CAPABILITIES2");
	create_dword	(0X700B0700);
	set_name	(0X700B0700,	"SDMMCA_VENDOR_CLOCK_CNTRL_0");
	create_dword	(0X700B0710);
	set_name	(0X700B0710,	"SDMMCA_VENDOR_BOOT_CNTRL_0");
	create_dword	(0X700B0714);
	set_name	(0X700B0714,	"SDMMCA_VENDOR_BOOT_ACK_TIMEOUT_0");
	create_dword	(0X700B0718);
	set_name	(0X700B0718,	"SDMMCA_VENDOR_BOOT_DAT_TIMEOUT_0");
	create_dword	(0X700B07AC);
	set_name	(0X700B07AC,	"SDMMCA_VENDOR_IO_TRIM_CNTRL_0");
	create_dword	(0X700B07C0);
	set_name	(0X700B07C0,	"SDMMCA_VENDOR_TUNING_CNTRL0_0");
	create_dword	(0X700B07E0);
	set_name	(0X700B07E0,	"SDMMCA_SDMEMCOMPPADCTRL_0");
	create_dword	(0X700B07E4);
	set_name	(0X700B07E4,	"SDMMCA_AUTO_CAL_CONFIG_0");
	create_dword	(0X700B07EC);
	set_name	(0X700B07EC,	"SDMMCA_AUTO_CAL_STATUS_0");
	create_dword	(0X700B07F0);
	set_name	(0X700B07F0,	"SDMMCA_IO_SPARE_0");
	create_dword	(0X700D0020);
	create_dword	(0X700D0030);
	create_dword	(0X700D003C);
	create_dword	(0X700D006C);
	create_dword	(0X700D085C);
	set_name	(0X7D000000,	"TEGRA_USB_BASE");
	create_dword	(0X7D000400);
	set_name	(0X7D000400,	"USB1_IF_USB_SUSP_CTRL_0");
	create_dword	(0X7D000404);
	set_name	(0X7D000404,	"USB1_IF_USB_PHY_VBUS_SENSORS_0");
	create_dword	(0X7D000808);
	set_name	(0X7D000808,	"USB1_UTMIP_XCVR_CFG0_0");
	create_dword	(0X7D00080C);
	set_name	(0X7D00080C,	"USB1_UTMIP_BIAS_CFG0_0");
	create_dword	(0X7D000810);
	set_name	(0X7D000810,	"USB1_UTMIP_HSRX_CFG0_0");
	create_dword	(0X7D000814);
	set_name	(0X7D000814,	"USB1_UTMIP_HSRX_CFG1_0");
	create_dword	(0X7D000820);
	set_name	(0X7D000820,	"USB1_UTMIP_TX_CFG0_0");
	create_dword	(0X7D000828);
	set_name	(0X7D000828,	"USB1_UTMIP_MISC_CFG1_0");
	create_dword	(0X7D00082C);
	set_name	(0X7D00082C,	"USB1_UTMIP_DEBOUNCE_CFG0_0");
	create_dword	(0X7D000830);
	set_name	(0X7D000830,	"USB1_UTMIP_BAT_CHRG_CFG0_0");
	create_dword	(0X7D000834);
	set_name	(0X7D000834,	"USB1_UTMIP_SPARE_CFG0_0");
	create_dword	(0X7D000838);
	set_name	(0X7D000838,	"USB1_UTMIP_XCVR_CFG1_0");
	create_dword	(0X7D00083C);
	set_name	(0X7D00083C,	"USB1_UTMIP_BIAS_CFG1_0");
	create_dword	(0X7D000854);
	set_name	(0X7D000854,	"USB1_UTMIP_XCVR_CFG2_0");
	create_dword	(0X7D000858);
	set_name	(0X7D000858,	"USB1_UTMIP_XCVR_CFG3_0");
}

static Functions_0(void) {

	add_func    (0X100010,0X100014);
	set_func_flags(0X100010,0x401);
	add_func    (0X100040,0X100060);
	set_func_flags(0X100040,0x400);
	SetType(0X100040, "void __cdecl reset();");
	add_func    (0X100060,0X100094);
	set_func_flags(0X100060,0x401);
	set_frame_size(0X100060, 0, 0, 0);
	add_func    (0X1000AC,0X1000BA);
	set_func_flags(0X1000AC,0x400);
	SetType(0X1000AC, "unsigned __int8 *__fastcall get_some_pointer_to_pll_params(int a1);");
	add_func    (0X1000BA,0X1000C2);
	set_func_flags(0X1000BA,0x400);
	add_func    (0X1000D4,0X100116);
	set_func_flags(0X1000D4,0);
	SetType(0X1000D4, "void __fastcall clock_set_enable(DEVICE_CLOCK reg_offset_and_bit, CLOCK_ENABLE_DISABLE clk_state);");
	set_frame_size(0X1000D4, 0X8, 0, 0);
	add_func    (0X10011C,0X10012C);
	set_func_flags(0X10011C,0x400);
	SetType(0X10011C, "void __fastcall set_oscillator_freq(int freq);");
	add_func    (0X10012C,0X100152);
	set_func_flags(0X10012C,0x400);
	set_frame_size(0X10012C, 0X8, 0, 0);
	add_func    (0X100152,0X1001C0);
	set_func_flags(0X100152,0x400);
	set_frame_size(0X100152, 0X28, 0, 0);
	add_func    (0X1001C0,0X10023A);
	set_func_flags(0X1001C0,0x400);
	SetType(0X1001C0, "signed int __cdecl clock_detect_oscillator_frequency();");
	add_func    (0X10023A,0X10024E);
	set_func_flags(0X10023A,0x400);
	SetType(0X10023A, "void __fastcall set_us_timer_config(int oscillator_freq);");
	add_func    (0X100286,0X100294);
	set_func_flags(0X100286,0x400);
	add_func    (0X100294,0X1002A0);
	set_func_flags(0X100294,0x400);
	add_func    (0X1002A0,0X1002C6);
	set_func_flags(0X1002A0,0x400);
	SetType(0X1002A0, "BOOL __fastcall fuse_is_preprod();");
	set_frame_size(0X1002A0, 0X8, 0, 0);
	add_func    (0X1002C6,0X10033A);
	set_func_flags(0X1002C6,0x400);
	set_frame_size(0X1002C6, 0X1C, 0, 0);
	add_func    (0X10033A,0X100350);
	set_func_flags(0X10033A,0x400);
	set_frame_size(0X10033A, 0X4, 0, 0);
	add_func    (0X100358,0X100374);
	set_func_flags(0X100358,0x400);
	SetType(0X100358, "int __cdecl fuse_is_devel();");
	set_frame_size(0X100358, 0X4, 0, 0);
	add_func    (0X100380,0X1003BC);
	set_func_flags(0X100380,0);
	set_frame_size(0X100380, 0X4, 0, 0);
	add_func    (0X1003C0,0X100438);
	set_func_flags(0X1003C0,0x400);
	set_frame_size(0X1003C0, 0X24, 0, 0);
	add_func    (0X100492,0X100590);
	set_func_flags(0X100492,0x400);
	set_frame_size(0X100492, 0X1C, 0, 0);
	add_func    (0X100590,0X1006AC);
	set_func_flags(0X100590,0x400);
	set_frame_size(0X100590, 0X168, 0, 0);
	define_local_var(0X100590, 0X1006AC, "[bp-0X164]", "a1");
	define_local_var(0X100590, 0X1006AC, "[bp-0X160]", "dst");
	add_func    (0X1006AC,0X1006C8);
	set_func_flags(0X1006AC,0x400);
	add_func    (0X1006C8,0X1006CE);
	set_func_flags(0X1006C8,0x400);
	add_func    (0X1006CE,0X1006E0);
	set_func_flags(0X1006CE,0x400);
	add_func    (0X1006E0,0X100760);
	set_func_flags(0X1006E0,0x400);
	SetType(0X1006E0, "void __fastcall sub_1006E0(unsigned int *a1);");
	set_frame_size(0X1006E0, 0X14, 0, 0);
	add_func    (0X100760,0X100774);
	set_func_flags(0X100760,0x400);
	SetType(0X100760, "void __fastcall bootrom_patches_memcpy(void *dst, void *src, unsigned int len);");
	set_frame_size(0X100760, 0X4, 0, 0);
	add_func    (0X1007B0,0X1007EC);
	set_func_flags(0X1007B0,0x400);
	set_frame_size(0X1007B0, 0XC, 0, 0);
	add_func    (0X100800,0X100808);
	set_func_flags(0X100800,0x400);
	add_func    (0X100808,0X10080A);
	set_func_flags(0X100808,0x440);
	add_func    (0X10080A,0X1008B2);
	set_func_flags(0X10080A,0x400);
	SetType(0X10080A, "void __cdecl maybe_boot_factory_mode_0();");
	set_frame_size(0X10080A, 0X10, 0, 0);
	add_func    (0X1008BC,0X1008D4);
	set_func_flags(0X1008BC,0x400);
	SetType(0X1008BC, "void __fastcall sub_1008BC(int a1);");
	add_func    (0X1008D8,0X1008EC);
	set_func_flags(0X1008D8,0x400);
	add_func    (0X1008EC,0X1008F6);
	set_func_flags(0X1008EC,0x400);
	add_func    (0X1008F6,0X100920);
	set_func_flags(0X1008F6,0);
	set_frame_size(0X1008F6, 0X10, 0, 0);
	add_func    (0X100926,0X10093C);
	set_func_flags(0X100926,0x400);
	add_func    (0X10093C,0X10096C);
	set_func_flags(0X10093C,0x400);
	SetType(0X10093C, "void __fastcall sub_10093C(int a1, int a2);");
	set_frame_size(0X10093C, 0X10, 0, 0);
	add_func    (0X10096C,0X100982);
	set_func_flags(0X10096C,0x400);
	add_func    (0X100982,0X100A08);
	set_func_flags(0X100982,0x400);
	set_frame_size(0X100982, 0X10, 0, 0);
	add_func    (0X100A10,0X100A36);
	set_func_flags(0X100A10,0x400);
	SetType(0X100A10, "void __fastcall reset_assert(DEVICE_RESET reg_offset_and_bit, RESET_ASSERT_DEASSERT rst_state);");
	set_frame_size(0X100A10, 0X8, 0, 0);
	add_func    (0X100A36,0X100A4A);
	set_func_flags(0X100A36,0x401);
	set_frame_size(0X100A36, 0X8, 0, 0);
	add_func    (0X100A54,0X100A9E);
	set_func_flags(0X100A54,0);
	set_frame_size(0X100A54, 0X10, 0, 0);
	add_func    (0X100AA4,0X100B94);
	set_func_flags(0X100AA4,0x400);
	SetType(0X100AA4, "int __fastcall uarta_setup(int a1, int a2);");
	set_frame_size(0X100AA4, 0X20, 0, 0);
	add_func    (0X100B94,0X100BEC);
	set_func_flags(0X100B94,0x400);
	SetType(0X100B94, "signed int __fastcall uarta_print(char *a1, int len, _DWORD *a3);");
	set_frame_size(0X100B94, 0X10, 0, 0);
	add_func    (0X100BEC,0X100C48);
	set_func_flags(0X100BEC,0x400);
	set_frame_size(0X100BEC, 0X18, 0, 0);
	add_func    (0X100C48,0X100DF6);
	set_func_flags(0X100C48,0x400);
	SetType(0X100C48, "void __fastcall factory_boot_from_uart(int a1);");
	set_frame_size(0X100C48, 0X50, 0, 0);
	define_local_var(0X100C48, 0X100DF6, "[bp-0X50]", "uart_banner");
	define_local_var(0X100C48, 0X100DF6, "[bp-0X24]", "a3");
	define_local_var(0X100C48, 0X100DF6, "[bp-0X18]", "a1");
	add_func    (0X100E20,0X100E24);
	set_func_flags(0X100E20,0x4c0);
	SetType(0X100E20, "void __fastcall factory_boot_from_uart_and_spin_0(int a1);");
	add_func    (0X100E24,0X100E2C);
	set_func_flags(0X100E24,0);
	SetType(0X100E24, "void __fastcall factory_boot_from_uart_and_spin(int a1);");
	add_func    (0X100E42,0X100E48);
	set_func_flags(0X100E42,0x400);
	add_func    (0X100E48,0X100E50);
	set_func_flags(0X100E48,0x400);
	SetType(0X100E48, "int __fastcall tmrus_get_time_passed(int old_time);");
	add_func    (0X100E50,0X100E62);
	set_func_flags(0X100E50,0x400);
	SetType(0X100E50, "void __fastcall delay_us(unsigned int us);");
	add_func    (0X100E6C,0X100E78);
	set_func_flags(0X100E6C,0x480);
	add_func    (0X100E78,0X100E80);
	set_func_flags(0X100E78,0x480);
	SetType(0X100E78, "void __fastcall spinamathing(int a1);");
	add_func    (0X100E80,0X100E8C);
	set_func_flags(0X100E80,0x480);
	add_func    (0X100F80,0X100FFC);
	set_func_flags(0X100F80,0x400);
	SetType(0X100F80, "void __fastcall jump_into_nvtboot2(void (*return_stub)(void), void *start_wipe, void *end_wipe, _DWORD *lockout_val_location);");
	add_func    (0X101070,0X1010CC);
	set_func_flags(0X101070,0x400);
	SetType(0X101070, "void __fastcall meminit_memunpack(char *src, char *dst, int unpacked_len);");
	add_func    (0X1010CC,0X1010F4);
	set_func_flags(0X1010CC,0x400);
	SetType(0X1010CC, "void __fastcall meminit_memcpy(void *src, void *dst, unsigned int len);");
	add_func    (0X1010F4,0X101120);
	set_func_flags(0X1010F4,0x400);
	SetType(0X1010F4, "void __fastcall meminit_memzero(void *src, void *dst, unsigned int len);");
	add_func    (0X101120,0X101124);
	set_func_flags(0X101120,0x480);
	SetType(0X101120, "void __fastcall does_nothing();");
	add_func    (0X101124,0X101130);
	set_func_flags(0X101124,0x480);
	SetType(0X101124, "void __fastcall sub_101124();");
	add_func    (0X101134,0X10113E);
	set_func_flags(0X101134,0x401);
	set_frame_size(0X101134, 0X8, 0, 0);
	add_func    (0X101148,0X1011BC);
	set_func_flags(0X101148,0x400);
	set_frame_size(0X101148, 0X80, 0, 0);
	add_func    (0X1011BC,0X1012A6);
	set_func_flags(0X1011BC,0x400);
	set_frame_size(0X1011BC, 0X20, 0, 0);
	add_func    (0X1012A6,0X101328);
	set_func_flags(0X1012A6,0x400);
	SetType(0X1012A6, "void __fastcall sub_1012A6(int *a1, _DWORD *hwinfo, ecid *ecid, int warmboot, int a5, int a6);");
	set_frame_size(0X1012A6, 0X18, 0, 0);
	define_local_var(0X1012A6, 0X101328, "[bp+0]", "a5");
	define_local_var(0X1012A6, 0X101328, "[bp+0X4]", "a6");
	add_func    (0X101328,0X101426);
	set_func_flags(0X101328,0x401);
	SetType(0X101328, "void __fastcall __noreturn prepare_nvtboot_launch(__int64 a1, int warmboot_failed_maybe, int a4);");
	set_frame_size(0X101328, 0X28, 0, 0);
	add_func    (0X10142A,0X10163C);
	set_func_flags(0X10142A,0x401);
	SetType(0X10142A, "void __cdecl main();");
	set_frame_size(0X10142A, 0X50, 0, 0);
	define_local_var(0X10142A, 0X10163C, "[bp-0X50]", "a5");
	define_local_var(0X10142A, 0X10163C, "[bp-0X4C]", "a6");
	define_local_var(0X10142A, 0X10163C, "[bp-0X38]", "rcm_controller_mode");
	define_local_var(0X10142A, 0X10163C, "[bp-0X34]", "usb_tbl");
	define_local_var(0X10142A, 0X10163C, "[bp-0X30]", "a4");
	define_local_var(0X10142A, 0X10163C, "[bp-0X2C]", "r1_0");
	define_local_var(0X10142A, 0X10163C, "[bp-0X28]", "hardkey_valid");
	define_local_var(0X10142A, 0X10163C, "[bp-0X24]", "clear_bct");
	define_local_var(0X10142A, 0X10163C, "[bp-0X20]", "boot_selection");
	define_local_var(0X10142A, 0X10163C, "[bp-0X18]", "handoff_address");
	add_func    (0X10163C,0X101682);
	set_func_flags(0X10163C,0x400);
	SetType(0X10163C, "void __cdecl more_pll();");
	set_frame_size(0X10163C, 0X10, 0, 0);
	add_func    (0X101682,0X101702);
	set_func_flags(0X101682,0x400);
	set_frame_size(0X101682, 0X18, 0, 0);
	define_local_var(0X101682, 0X101702, "[bp-0X18]", "security_level");
	define_local_var(0X101682, 0X101702, "[bp-0X14]", "a1");
	add_func    (0X101718,0X10177A);
	set_func_flags(0X101718,0x400);
	SetType(0X101718, "void __cdecl mem_enable_controller_maybe();");
	set_frame_size(0X101718, 0X10, 0, 0);
	add_func    (0X10177A,0X1017B0);
	set_func_flags(0X10177A,0x400);
	SetType(0X10177A, "void __fastcall sub_10177A(unsigned int result);");
	add_func    (0X1017DE,0X101810);
	set_func_flags(0X1017DE,0x400);
	SetType(0X1017DE, "void __fastcall sub_1017DE(int some_id, char a2);");
	set_frame_size(0X1017DE, 0X10, 0, 0);
	add_func    (0X101844,0X101896);
	set_func_flags(0X101844,0x400);
	SetType(0X101844, "int __fastcall sub_101844(unsigned int a1, int a2);");
	set_frame_size(0X101844, 0X10, 0, 0);
	add_func    (0X1018A2,0X101940);
	set_func_flags(0X1018A2,0x400);
	set_frame_size(0X1018A2, 0X10, 0, 0);
	add_func    (0X101940,0X10197A);
	set_func_flags(0X101940,0x400);
	SetType(0X101940, "void __cdecl sub_101940();");
	set_frame_size(0X101940, 0X8, 0, 0);
	add_func    (0X10197A,0X101988);
	set_func_flags(0X10197A,0x400);
	SetType(0X10197A, "void __cdecl pllp_enable();");
	add_func    (0X101988,0X101AB6);
	set_func_flags(0X101988,0x400);
	set_frame_size(0X101988, 0X18, 0, 0);
	add_func    (0X101AB6,0X101E0C);
	set_func_flags(0X101AB6,0x400);
	set_frame_size(0X101AB6, 0X40, 0, 0);
	define_local_var(0X101AB6, 0X101E0C, "[bp-0X24]", "a1");
	add_func    (0X101E1C,0X101EFE);
	set_func_flags(0X101E1C,0x400);
	SetType(0X101E1C, "signed int __fastcall try_load_from_storage(int *out_entrypoint);");
	set_frame_size(0X101E1C, 0X20, 0, 0);
	define_local_var(0X101E1C, 0X101EFE, "[bp-0X1C]", "op_mode");
	define_local_var(0X101E1C, 0X101EFE, "[bp-0X18]", "entrypoint");
	add_func    (0X101EFE,0X101F6C);
	set_func_flags(0X101EFE,0x400);
	SetType(0X101EFE, "int __fastcall storage_ctx__storage_ctx(storage_context *ctx);");
	set_frame_size(0X101EFE, 0X18, 0, 0);
	define_local_var(0X101EFE, 0X101F6C, "[bp-0X18]", "op_mode");
	define_local_var(0X101EFE, 0X101F6C, "[bp-0X14]", "fused_bootdev");
	define_local_var(0X101EFE, 0X101F6C, "[bp-0X10]", "fused_bootdev_info");
	add_func    (0X101F6C,0X101FFE);
	set_func_flags(0X101F6C,0x400);
	SetType(0X101F6C, "signed int __fastcall configure_sdram();");
	set_frame_size(0X101F6C, 0X20, 0, 0);
	define_local_var(0X101F6C, 0X101FFE, "[bp-0X14]", "a2");
	add_func    (0X102020,0X102030);
	set_func_flags(0X102020,0x400);
	SetType(0X102020, "BOOL __cdecl fuse_is_public_key_crypto_enabled();");
	add_func    (0X102030,0X102060);
	set_func_flags(0X102030,0x400);
	SetType(0X102030, "void __fastcall get_security_operation_mode(RCM_OP_MODE *a1);");
	set_frame_size(0X102030, 0X8, 0, 0);
	add_func    (0X10207A,0X102094);
	set_func_flags(0X10207A,0);
	SetType(0X10207A, "int __cdecl fuse_is_odm_and_not_fa();");
	set_frame_size(0X10207A, 0X8, 0, 0);
	add_func    (0X102094,0X1020AE);
	set_func_flags(0X102094,0x400);
	SetType(0X102094, "int __cdecl fuse_is_odm_and_aes();");
	set_frame_size(0X102094, 0X8, 0, 0);
	add_func    (0X1020C8,0X1020EA);
	set_func_flags(0X1020C8,0x400);
	SetType(0X1020C8, "int __cdecl fuse_is_this_a_devboard();");
	set_frame_size(0X1020C8, 0X8, 0, 0);
	add_func    (0X1020EA,0X1020FA);
	set_func_flags(0X1020EA,0x400);
	SetType(0X1020EA, "void __fastcall fuse_get_private_key(char *key);");
	set_func_cmt(0X1020EA,	"Stores an ODM-supplied secure boot key for each\nchip. Used in conjunction with the DK to create a\nSecure Storage Key (SSK).", 1);
	set_frame_size(0X1020EA, 0X8, 0, 0);
	add_func    (0X1020FA,0X10210A);
	set_func_flags(0X1020FA,0x400);
	SetType(0X1020FA, "void __fastcall fuse_get_device_key(char *dk);");
	set_func_cmt(0X1020FA,	"Stores an ODM-supplied device key for each chip.\nUsed in conjunction with the SBK to create a\nSecure Storage Key.", 1);
	set_frame_size(0X1020FA, 0X8, 0, 0);
	add_func    (0X10210A,0X102112);
	set_func_flags(0X10210A,0x400);
	SetType(0X10210A, "void __cdecl fuse_disable_privatekey();");
	add_func    (0X102112,0X102122);
	set_func_flags(0X102112,0x400);
	SetType(0X102112, "void __fastcall fuse_get_public_key_hash(char *a1);");
	set_frame_size(0X102112, 0X8, 0, 0);
	add_func    (0X102122,0X102132);
	set_func_flags(0X102122,0x400);
	SetType(0X102122, "signed int __cdecl fuse_skip_device_selection_straps();");
	add_func    (0X102132,0X102146);
	set_func_flags(0X102132,0x400);
	SetType(0X102132, "void __fastcall fuse_get_boot_device(int *result);");
	add_func    (0X102146,0X102156);
	set_func_flags(0X102146,0x400);
	SetType(0X102146, "BOOL __cdecl fuse_get_charger_detect();");
	add_func    (0X102156,0X102164);
	set_func_flags(0X102156,0x400);
	SetType(0X102156, "void __fastcall fuse_get_boot_device_info(int *result);");
	add_func    (0X102164,0X102172);
	set_func_flags(0X102164,0x400);
	SetType(0X102164, "void __fastcall fuse_is_force_rcm_in_two_button_mode(_DWORD *result);");
	add_func    (0X102172,0X10217A);
	set_func_flags(0X102172,0x400);
	SetType(0X102172, "void __fastcall fuse_get_sku_info(_DWORD *result);");
	add_func    (0X10217A,0X102186);
	set_func_flags(0X10217A,0x400);
	SetType(0X10217A, "void __fastcall fuse_get_sku_info_lowermost_3_bits(int *result);");
	add_func    (0X102186,0X102194);
	set_func_flags(0X102186,0x400);
	SetType(0X102186, "void __fastcall fuse_get_some_sata_calib_val(int *result);");
	add_func    (0X1021A2,0X1021B2);
	set_func_flags(0X1021A2,0x400);
	SetType(0X1021A2, "signed int __cdecl fuse_get_watchdog_enable();");
	add_func    (0X1021B2,0X1021C0);
	set_func_flags(0X1021B2,0x400);
	SetType(0X1021B2, "void __fastcall fuse_get_rcm_controller_mode(bool *result);");
	add_func    (0X1021C0,0X1021C8);
	set_func_flags(0X1021C0,0x400);
	SetType(0X1021C0, "int __cdecl fuse_get_hardkey();");
	add_func    (0X1021C8,0X1021D8);
	set_func_flags(0X1021C8,0x400);
	SetType(0X1021C8, "int __cdecl fuse_get_aec_bit1();");
	add_func    (0X1021D8,0X1021F4);
	set_func_flags(0X1021D8,0x400);
	SetType(0X1021D8, "HARDKEY_STATUS __cdecl fuse_get_hardkey_status();");
	set_func_cmt(0X1021D8,	"must be between 0 and 15 inclusive", 1);
	add_func    (0X1021F4,0X102230);
	set_func_flags(0X1021F4,0x400);
	SetType(0X1021F4, "signed int __fastcall should_use_hardkey(int rcm_hardkey_index);");
	set_frame_size(0X1021F4, 0X10, 0, 0);
	add_func    (0X102230,0X102248);
	set_func_flags(0X102230,0x400);
	SetType(0X102230, "BOOL __cdecl fuse_is_private_aes_key_set();");
	add_func    (0X102248,0X102264);
	set_func_flags(0X102248,0x400);
	SetType(0X102248, "void __fastcall le_words_to_bytes(unsigned int *in, char *out, unsigned int len);");
	set_frame_size(0X102248, 0X8, 0, 0);
	add_func    (0X102270,0X102296);
	set_func_flags(0X102270,0x400);
	SetType(0X102270, "void __fastcall unused_print_callback(_BYTE **a1, int a2);");
	set_frame_size(0X102270, 0X10, 0, 0);
	add_func    (0X102296,0X1022EA);
	set_func_flags(0X102296,0x400);
	set_frame_size(0X102296, 0XC, 0, 0);
	add_func    (0X1022EA,0X102328);
	set_func_flags(0X1022EA,0x400);
	SetType(0X1022EA, "int debug_output(unsigned int callnum, ...);");
	set_frame_size(0X1022EA, 0X18, 0, 0);
	define_local_var(0X1022EA, 0X102328, "[bp-0X10]", "varg_r0");
	define_local_var(0X1022EA, 0X102328, "[bp-0XC]", "varg_r1");
	define_local_var(0X1022EA, 0X102328, "[bp-0X8]", "varg_r2");
	define_local_var(0X1022EA, 0X102328, "[bp-0X4]", "varg_r3");
	add_func    (0X102338,0X10236C);
	set_func_flags(0X102338,0x400);
	set_frame_size(0X102338, 0X10, 0, 0);
	add_func    (0X1023BE,0X1023D0);
	set_func_flags(0X1023BE,0x400);
	SetType(0X1023BE, "BOOL __fastcall pmc_scratch0_bittest(SCRATCH0);");
	add_func    (0X1023D0,0X1023E4);
	set_func_flags(0X1023D0,0x400);
	SetType(0X1023D0, "void __fastcall pmc_scratch0_bitset(SCRATCH0 bit, int flag);");
	add_func    (0X1023E4,0X1023F0);
	set_func_flags(0X1023E4,0x400);
	add_func    (0X1023F0,0X1023F8);
	set_func_flags(0X1023F0,0x400);
	add_func    (0X1023FC,0X102436);
	set_func_flags(0X1023FC,0x400);
	SetType(0X1023FC, "int __fastcall rcm_prot_send_errorcode(int errorcode);");
	set_frame_size(0X1023FC, 0X10, 0, 0);
	add_func    (0X102436,0X102522);
	set_func_flags(0X102436,0x400);
	SetType(0X102436, "int __cdecl rcm_receive_message_check_len_insecure();");
	set_frame_size(0X102436, 0X30, 0, 0);
	define_local_var(0X102436, 0X102522, "[bp-0X2C]", "usb_tbl");
	define_local_var(0X102436, 0X102522, "[bp-0X28]", "src");
	define_local_var(0X102436, 0X102522, "[bp-0X24]", "in_buffer");
	define_local_var(0X102436, 0X102522, "[bp-0X1C]", "need_to_check_header");
	add_func    (0X10256C,0X102604);
	set_func_flags(0X10256C,0x400);
	SetType(0X10256C, "void __fastcall sub_10256C();");
	set_frame_size(0X10256C, 0X38, 0, 0);
	add_func    (0X102604,0X1026F0);
	set_func_flags(0X102604,0x400);
	set_frame_size(0X102604, 0X10, 0, 0);
	add_func    (0X1026F0,0X10278A);
	set_func_flags(0X1026F0,0x400);
	SetType(0X1026F0, "void __fastcall rcm_prot_handle_message(_BYTE *a1);");
	set_frame_size(0X1026F0, 0X20, 0, 0);
	define_local_var(0X1026F0, 0X10278A, "[bp-0X20]", "ecid");
	add_func    (0X10278A,0X102896);
	set_func_flags(0X10278A,0x400);
	SetType(0X10278A, "signed int __fastcall load_rcm_aes_key(char *a1);");
	set_frame_size(0X10278A, 0X18, 0, 0);
	define_local_var(0X10278A, 0X102896, "[bp-0X18]", "a5");
	add_func    (0X102896,0X102A80);
	set_func_flags(0X102896,0x400);
	SetType(0X102896, "int __fastcall try_load_from_rcm(int do_recovery_maybe, _BYTE *r1_0, _DWORD *a3, _DWORD *handoff_address);");
	set_frame_size(0X102896, 0X2A8, 0, 0);
	define_local_var(0X102896, 0X102A80, "[bp-0X2A8]", "a5");
	define_local_var(0X102896, 0X102A80, "[bp-0X294]", "some_key");
	define_local_var(0X102896, 0X102A80, "[bp-0X274]", "pubkey");
	define_local_var(0X102896, 0X102A80, "[bp-0X74]", "pubkey_hash_fuses");
	define_local_var(0X102896, 0X102A80, "[bp-0X54]", "pubkey_hash");
	define_local_var(0X102896, 0X102A80, "[bp-0X30]", "dl_code");
	define_local_var(0X102896, 0X102A80, "[bp-0X2C]", "data");
	define_local_var(0X102896, 0X102A80, "[bp-0X28]", "a3");
	add_func    (0X102A80,0X102AD0);
	set_func_flags(0X102A80,0);
	SetType(0X102A80, "int __fastcall rcm_send_initial_hwinfo_after_connection();");
	set_frame_size(0X102A80, 0X20, 0, 0);
	add_func    (0X102AD6,0X102AEE);
	set_func_flags(0X102AD6,0x400);
	set_frame_size(0X102AD6, 0X10, 0, 0);
	add_func    (0X102AEE,0X102B46);
	set_func_flags(0X102AEE,0x400);
	set_frame_size(0X102AEE, 0X20, 0, 0);
	define_local_var(0X102AEE, 0X102B46, "[bp-0X20]", "a5");
	define_local_var(0X102AEE, 0X102B46, "[bp-0X1C]", "a6");
	add_func    (0X102B74,0X102BD2);
	set_func_flags(0X102B74,0x400);
	SetType(0X102B74, "signed int __fastcall usb_populate_callback_table(int controller_mode);");
	add_func    (0X102BD2,0X102BD6);
	set_func_flags(0X102BD2,0x400);
	add_func    (0X102C24,0X102C5C);
	set_func_flags(0X102C24,0x400);
	set_frame_size(0X102C24, 0X8, 0, 0);
	add_func    (0X102C6C,0X102CEE);
	set_func_flags(0X102C6C,0x400);
	set_frame_size(0X102C6C, 0X18, 0, 0);
	add_func    (0X102CEE,0X102D1E);
	set_func_flags(0X102CEE,0x400);
	add_func    (0X102D1E,0X102E18);
	set_func_flags(0X102D1E,0);
	set_frame_size(0X102D1E, 0X28, 0, 0);
	add_func    (0X102E1E,0X102E76);
	set_func_flags(0X102E1E,0x400);
	SetType(0X102E1E, "void __fastcall i2c_disable(_DWORD *i2c_baseaddr, unsigned int a2);");
	set_frame_size(0X102E1E, 0X18, 0, 0);
	add_func    (0X102E76,0X102FA6);
	set_func_flags(0X102E76,0x400);
	set_frame_size(0X102E76, 0X40, 0, 0);
	define_local_var(0X102E76, 0X102FA6, "[bp-0X10]", "varg_r0");
	define_local_var(0X102E76, 0X102FA6, "[bp-0XC]", "varg_r1");
	define_local_var(0X102E76, 0X102FA6, "[bp-0X8]", "varg_r2");
	define_local_var(0X102E76, 0X102FA6, "[bp-0X4]", "varg_r3");
	add_func    (0X102FA6,0X103124);
	set_func_flags(0X102FA6,0x400);
	set_frame_size(0X102FA6, 0X30, 0, 0);
	define_local_var(0X102FA6, 0X103124, "[bp-0X20]", "a2");
	add_func    (0X103134,0X10315C);
	set_func_flags(0X103134,0x400);
	set_frame_size(0X103134, 0XC, 0, 0);
	add_func    (0X10315C,0X103164);
	set_func_flags(0X10315C,0x400);
	add_func    (0X103164,0X1032A8);
	set_func_flags(0X103164,0);
	SetType(0X103164, "int __fastcall se_write_key_table(BOOTROM_KEYSLOT key_index, SE_KEY_SIZE a2, SE_KEYTABLE_QUAD type, int *key);");
	set_frame_size(0X103164, 0X28, 0, 0);
	define_local_var(0X103164, 0X1032A8, "[bp-0X28]", "a5");
	define_local_var(0X103164, 0X1032A8, "[bp-0X24]", "key_index");
	add_func    (0X1032AE,0X1032DA);
	set_func_flags(0X1032AE,0x400);
	add_func    (0X1032DA,0X103306);
	set_func_flags(0X1032DA,0x400);
	add_func    (0X10330E,0X10331C);
	set_func_flags(0X10330E,0x400);
	add_func    (0X10331C,0X103360);
	set_func_flags(0X10331C,0x400);
	set_frame_size(0X10331C, 0X18, 0, 0);
	add_func    (0X103360,0X103488);
	set_func_flags(0X103360,0x400);
	SetType(0X103360, "void __fastcall security_engine_hash(char *data, int data_size, char *buffer, char *hash_out, SE_HASH_MODE hash_method);");
	set_frame_size(0X103360, 0X40, 0, 0);
	define_local_var(0X103360, 0X103488, "[bp-0X38]", "data_size_bits");
	define_local_var(0X103360, 0X103488, "[bp+0]", "hash_method");
	add_func    (0X103488,0X1034B8);
	set_func_flags(0X103488,0x400);
	set_frame_size(0X103488, 0X8, 0, 0);
	add_func    (0X1034B8,0X1034C8);
	set_func_flags(0X1034B8,0x400);
	set_frame_size(0X1034B8, 0X8, 0, 0);
	add_func    (0X1034C8,0X10353C);
	set_func_flags(0X1034C8,0x400);
	SetType(0X1034C8, "void __fastcall sub_1034C8(int hash_enable, int a2, int iv_original, int a4, int key_index, int a6);");
	set_frame_size(0X1034C8, 0X10, 0, 0);
	define_local_var(0X1034C8, 0X10353C, "[bp+0]", "key_index");
	define_local_var(0X1034C8, 0X10353C, "[bp+0X4]", "a6");
	add_func    (0X10359A,0X1035EA);
	set_func_flags(0X10359A,0x400);
	SetType(0X10359A, "void __fastcall se_load_rsa_pubkey_into_index(rsa_pubkey *pubkey, int a2, unsigned int exponent_size, int index);");
	set_frame_size(0X10359A, 0X18, 0, 0);
	add_func    (0X1035EA,0X103620);
	set_func_flags(0X1035EA,0x400);
	SetType(0X1035EA, "void __fastcall se_clear_rsa_pubkey_at_index(int index);");
	set_frame_size(0X1035EA, 0X210, 0, 0);
	define_local_var(0X1035EA, 0X103620, "[bp-0X20C]", "pubkey");
	add_func    (0X103620,0X103698);
	set_func_flags(0X103620,0x400);
	SetType(0X103620, "void __fastcall se_rsa_encrypt(int keyslot, unsigned int keysize, int data_len, char *addr_in, char *addr_out);");
	set_frame_size(0X103620, 0X28, 0, 0);
	define_local_var(0X103620, 0X103698, "[bp+0]", "addr_out");
	add_func    (0X103698,0X1038B8);
	set_func_flags(0X103698,0x400);
	SetType(0X103698, "int __fastcall se_check_signature(int se_rsa_keyslot, int rsa_keylen, char *data, char *data_hash, int data_len, char *signature, SE_HASH_MODE hash_method, int a8);");
	set_frame_size(0X103698, 0X760, 0, 0);
	define_local_var(0X103698, 0X1038B8, "[bp-0X760]", "a5");
	define_local_var(0X103698, 0X1038B8, "[bp-0X758]", "a1");
	define_local_var(0X103698, 0X1038B8, "[bp-0X714]", "a2");
	define_local_var(0X103698, 0X1038B8, "[bp-0X170]", "hash");
	define_local_var(0X103698, 0X1038B8, "[bp-0X130]", "rsa_out");
	define_local_var(0X103698, 0X1038B8, "[bp+0]", "data_len");
	define_local_var(0X103698, 0X1038B8, "[bp+0X4]", "signature");
	define_local_var(0X103698, 0X1038B8, "[bp+0X8]", "hash_method");
	define_local_var(0X103698, 0X1038B8, "[bp+0XC]", "a8");
	add_func    (0X1038B8,0X1038C2);
	set_func_flags(0X1038B8,0x400);
	add_func    (0X1038C2,0X1038DC);
	set_func_flags(0X1038C2,0x400);
	add_func    (0X103A0E,0X103A1C);
	set_func_flags(0X103A0E,0x400);
	set_frame_size(0X103A0E, 0X4, 0, 0);
	add_func    (0X103A1C,0X103A3C);
	set_func_flags(0X103A1C,0x400);
	set_frame_size(0X103A1C, 0X4, 0, 0);
	add_func    (0X103A3C,0X103B0E);
	set_func_flags(0X103A3C,0x400);
	add_func    (0X103B0E,0X103B64);
	set_func_flags(0X103B0E,0x400);
	SetType(0X103B0E, "int __fastcall sub_103B0E(int a1, SE_KEY_SIZE a2, int a3, int blocks, char *src, char *dst);");
	set_frame_size(0X103B0E, 0X34, 0, 0);
	define_local_var(0X103B0E, 0X103B64, "[bp+0]", "src");
	define_local_var(0X103B0E, 0X103B64, "[bp+0X4]", "dst");
	add_func    (0X103B64,0X103B7A);
	set_func_flags(0X103B64,0x400);
	set_frame_size(0X103B64, 0XC, 0, 0);
	add_func    (0X103B86,0X103D52);
	set_func_flags(0X103B86,0x400);
	set_frame_size(0X103B86, 0X40, 0, 0);
	define_local_var(0X103B86, 0X103D52, "[bp-0X24]", "a4");
	add_func    (0X103D52,0X103E2C);
	set_func_flags(0X103D52,0x400);
	set_frame_size(0X103D52, 0X58, 0, 0);
	define_local_var(0X103D52, 0X103E2C, "[bp-0X58]", "a5");
	define_local_var(0X103D52, 0X103E2C, "[bp-0X54]", "a6");
	define_local_var(0X103D52, 0X103E2C, "[bp-0X34]", "a2");
	add_func    (0X103E2C,0X103F4C);
	set_func_flags(0X103E2C,0x400);
	SetType(0X103E2C, "void __fastcall calculate_hash_maybe(int a1, int a2, int a3, int out, int a5, int a6, unsigned int a7, int a8, int a9);");
	set_frame_size(0X103E2C, 0XD8, 0, 0);
	define_local_var(0X103E2C, 0X103F4C, "[bp-0XD0]", "params");
	add_func    (0X103F4C,0X103F9A);
	set_func_flags(0X103F4C,0x400);
	set_frame_size(0X103F4C, 0X34, 0, 0);
	add_func    (0X103F9A,0X10404C);
	set_func_flags(0X103F9A,0x400);
	SetType(0X103F9A, "void __fastcall se_key_do_something(BOOTROM_KEYSLOT src_key_index, SE_KEY_SIZE a2, BOOTROM_KEYSLOT dst_key_index, int a4, int wut);");
	set_frame_size(0X103F9A, 0X38, 0, 0);
	define_local_var(0X103F9A, 0X10404C, "[bp-0X24]", "a1");
	define_local_var(0X103F9A, 0X10404C, "[bp+0]", "wut");
	add_func    (0X10404C,0X104074);
	set_func_flags(0X10404C,0x400);
	SetType(0X10404C, "int __fastcall sub_10404C(int key_index, int a2, int a1, int quad, int a5);");
	set_frame_size(0X10404C, 0X8, 0, 0);
	add_func    (0X104074,0X1040A0);
	set_func_flags(0X104074,0x400);
	add_func    (0X1040A8,0X1040AA);
	set_func_flags(0X1040A8,0x440);
	add_func    (0X1040AA,0X104152);
	set_func_flags(0X1040AA,0x400);
	set_frame_size(0X1040AA, 0X48, 0, 0);
	define_local_var(0X1040AA, 0X104152, "[bp-0X3C]", "dk");
	define_local_var(0X1040AA, 0X104152, "[bp-0X1C]", "a4");
	add_func    (0X104152,0X104170);
	set_func_flags(0X104152,0x400);
	set_frame_size(0X104152, 0X8, 0, 0);
	add_func    (0X104170,0X1041A0);
	set_func_flags(0X104170,0x400);
	SetType(0X104170, "int __cdecl recovery_mode_requested();");
	set_frame_size(0X104170, 0X10, 0, 0);
	add_func    (0X1041A0,0X1041B4);
	set_func_flags(0X1041A0,0x400);
	add_func    (0X1041B4,0X1041C4);
	set_func_flags(0X1041B4,0x400);
	add_func    (0X1041C4,0X1041C8);
	set_func_flags(0X1041C4,0x400);
	add_func    (0X1041C8,0X1041D4);
	set_func_flags(0X1041C8,0x400);
	add_func    (0X1041D4,0X1041E0);
	set_func_flags(0X1041D4,0x400);
	SetType(0X1041D4, "FUSE_BOOT_DEV __cdecl strap_get_boot_select();");
	add_func    (0X1041E4,0X104202);
	set_func_flags(0X1041E4,0x400);
	set_frame_size(0X1041E4, 0X8, 0, 0);
	add_func    (0X104202,0X10421C);
	set_func_flags(0X104202,0x400);
	set_frame_size(0X104202, 0X8, 0, 0);
	add_func    (0X10421C,0X10427C);
	set_func_flags(0X10421C,0);
	set_frame_size(0X10421C, 0X10, 0, 0);
	add_func    (0X104282,0X104324);
	set_func_flags(0X104282,0x400);
	SetType(0X104282, "void __cdecl some_usb_charger_stuff();");
	set_frame_size(0X104282, 0X10, 0, 0);
	add_func    (0X104344,0X104350);
	set_func_flags(0X104344,0);
	SetType(0X104344, "void __fastcall memset(void *a1, int c, int len);");
	set_frame_size(0X104344, 0X8, 0, 0);
	add_func    (0X104356,0X10435E);
	set_func_flags(0X104356,0x400);
	SetType(0X104356, "void __fastcall j_memcpy_libc(void *dst, void *src, unsigned int n);");
	set_frame_size(0X104356, 0X8, 0, 0);
	add_func    (0X104372,0X104386);
	set_func_flags(0X104372,0x400);
	add_func    (0X104386,0X1043A2);
	set_func_flags(0X104386,0x400);
	SetType(0X104386, "signed int __fastcall check_padding(char *data, int len);");
	add_func    (0X1043A2,0X1043C4);
	set_func_flags(0X1043A2,0x400);
	SetType(0X1043A2, "signed int __fastcall mem_equal(void *a1, void *a2, unsigned int len);");
	set_frame_size(0X1043A2, 0X8, 0, 0);
	add_func    (0X1043C8,0X104470);
	set_func_flags(0X1043C8,0x400);
	set_frame_size(0X1043C8, 0X20, 0, 0);
	define_local_var(0X1043C8, 0X104470, "[bp-0X20]", "a5");
	define_local_var(0X1043C8, 0X104470, "[bp-0X10]", "op_mode");
	add_func    (0X104470,0X1044EC);
	set_func_flags(0X104470,0x400);
	set_frame_size(0X104470, 0X290, 0, 0);
	define_local_var(0X104470, 0X1044EC, "[bp-0X290]", "a5");
	define_local_var(0X104470, 0X1044EC, "[bp-0X25C]", "op_mode");
	define_local_var(0X104470, 0X1044EC, "[bp-0X258]", "a2");
	define_local_var(0X104470, 0X1044EC, "[bp-0X238]", "hash_out");
	define_local_var(0X104470, 0X1044EC, "[bp-0X218]", "dst");
	define_local_var(0X104470, 0X1044EC, "[bp-0X118]", "a1");
	add_func    (0X1045A2,0X1046D0);
	set_func_flags(0X1045A2,0x400);
	SetType(0X1045A2, "int __fastcall try_load_warmboot(_DWORD *a1);");
	set_frame_size(0X1045A2, 0X38, 0, 0);
	define_local_var(0X1045A2, 0X1046D0, "[bp-0X2C]", "a2");
	add_func    (0X1046D0,0X10472E);
	set_func_flags(0X1046D0,0x400);
	set_frame_size(0X1046D0, 0X20, 0, 0);
	define_local_var(0X1046D0, 0X10472E, "[bp-0X20]", "a5");
	define_local_var(0X1046D0, 0X10472E, "[bp-0X1C]", "a6");
	add_func    (0X104758,0X104766);
	set_func_flags(0X104758,0x400);
	add_func    (0X104766,0X10477C);
	set_func_flags(0X104766,0x400);
	SetType(0X104766, "void __cdecl configure_wdt4();");
	add_func    (0X10477C,0X104792);
	set_func_flags(0X10477C,0x400);
	SetType(0X10477C, "void __cdecl enable_wdt4();");
	add_func    (0X104792,0X1047C0);
	set_func_flags(0X104792,0x400);
	SetType(0X104792, "void __cdecl disable_wdt4();");
	set_frame_size(0X104792, 0X4, 0, 0);
	add_func    (0X1047C0,0X1047EC);
	set_func_flags(0X1047C0,0x400);
	SetType(0X1047C0, "void __fastcall kick_wdt4(int timer_value);");
	set_frame_size(0X1047C0, 0X8, 0, 0);
	add_func    (0X104800,0X10496C);
	set_func_flags(0X104800,0x400);
	SetType(0X104800, "int __fastcall storage_ctx__load_dev(storage_context *a1, boot_config_table *bct_a, boot_config_table *bct_b);");
	set_frame_size(0X104800, 0X88, 0, 0);
	define_local_var(0X104800, 0X10496C, "[bp-0X88]", "a5");
	define_local_var(0X104800, 0X10496C, "[bp-0X84]", "a6");
	define_local_var(0X104800, 0X10496C, "[bp-0X70]", "hash");
	define_local_var(0X104800, 0X10496C, "[bp-0X18]", "a2_1");
	add_func    (0X1049B8,0X104AB8);
	set_func_flags(0X1049B8,0x400);
	SetType(0X1049B8, "signed int __fastcall bct_check_bbtable_and_btable(storage_context *ctx);");
	set_frame_size(0X1049B8, 0X18, 0, 0);
	add_func    (0X104AB8,0X104BD6);
	set_func_flags(0X104AB8,0x400);
	SetType(0X104AB8, "int __fastcall storage_ctx__load_bct(storage_context *ctx, int start_block, int start_page);");
	set_frame_size(0X104AB8, 0X278, 0, 0);
	define_local_var(0X104AB8, 0X104BD6, "[bp-0X278]", "a5");
	define_local_var(0X104AB8, 0X104BD6, "[bp-0X264]", "op_mode");
	define_local_var(0X104AB8, 0X104BD6, "[bp-0X260]", "dst");
	define_local_var(0X104AB8, 0X104BD6, "[bp-0X60]", "fuse_pubkey_hash");
	define_local_var(0X104AB8, 0X104BD6, "[bp-0X40]", "bct_pubkey_hash");
	define_local_var(0X104AB8, 0X104BD6, "[bp-0X20]", "ctx");
	add_func    (0X104BD6,0X104C54);
	set_func_flags(0X104BD6,0x400);
	SetType(0X104BD6, "void __fastcall storage_ctx__record_bct_load_failure(storage_context *a1, int a2, int retcode);");
	add_func    (0X104C54,0X104D4E);
	set_func_flags(0X104C54,0x400);
	SetType(0X104C54, "int __fastcall storage_ctx__load_a_bct(storage_context *ctx);");
	set_frame_size(0X104C54, 0X28, 0, 0);
	define_local_var(0X104C54, 0X104D4E, "[bp-0X20]", "pages_per_block");
	define_local_var(0X104C54, 0X104D4E, "[bp-0X18]", "r0_0");
	add_func    (0X104D60,0X104D76);
	set_func_flags(0X104D60,0x400);
	SetType(0X104D60, "int __fastcall storage_ctx__try_load_one_bootloader(storage_context *ctx, bootloader_info *bootloader_info, int valid_bls, int this_bootloader_id);");
	set_frame_size(0X104D60, 0X38, 0, 0);
	define_local_var(0X104D60, 0X104D76, "[bp-0X38]", "a5");
	define_local_var(0X104D60, 0X104D76, "[bp-0X28]", "op_mode");
	define_local_var(0X104D60, 0X104D76, "[bp-0X24]", "ctx");
	add_func    (0X104DF6,0X104EDE);
	set_func_flags(0X104DF6,0);
	SetType(0X104DF6, "int __fastcall storage_ctx__load_bootloader(storage_context *ctx, int *entrypoint);");
	set_frame_size(0X104DF6, 0X28, 0, 0);
	define_local_var(0X104DF6, 0X104EDE, "[bp-0X28]", "end_addr");
	define_local_var(0X104DF6, 0X104EDE, "[bp-0X24]", "first_bl_version");
	define_local_var(0X104DF6, 0X104EDE, "[bp-0X1C]", "r0_0");
	add_func    (0X104EFC,0X104FB4);
	set_func_flags(0X104EFC,0);
	SetType(0X104EFC, "void __fastcall load_context__load_context(load_context *boot, secure_load_desc *desc, int desc_count, int loadaddr, storage_context *stor);");
	set_frame_size(0X104EFC, 0X18, 0, 0);
	add_func    (0X104FBA,0X105108);
	set_func_flags(0X104FBA,0x400);
	SetType(0X104FBA, "int __fastcall load_ctx__recover_from_read_failures(load_context *loadctx);");
	set_frame_size(0X104FBA, 0X18, 0, 0);
	add_func    (0X105108,0X1051BE);
	set_func_flags(0X105108,0x400);
	SetType(0X105108, "void __fastcall load_context__copy_pages(load_context *load_ctx);");
	set_frame_size(0X105108, 0X38, 0, 0);
	define_local_var(0X105108, 0X1051BE, "[bp-0X30]", "a7");
	define_local_var(0X105108, 0X1051BE, "[bp-0X20]", "aes_block_count");
	add_func    (0X105258,0X105374);
	set_func_flags(0X105258,0x400);
	SetType(0X105258, "int __fastcall storage_ctx__load(storage_context *ctx, void *loadaddr, secure_load_desc *desc, int desc_count, boot_config_table *existing_bct);");
	set_frame_size(0X105258, 0X30, 0, 0);
	define_local_var(0X105258, 0X105374, "[bp-0X30]", "a5");
	define_local_var(0X105258, 0X105374, "[bp-0X20]", "bct");
	define_local_var(0X105258, 0X105374, "[bp-0X1C]", "a2");
	define_local_var(0X105258, 0X105374, "[bp+0]", "existing_bct");
	add_func    (0X105374,0X105420);
	set_func_flags(0X105374,0x400);
	SetType(0X105374, "int __fastcall load_context__read_page(load_context *load_ctx);");
	set_frame_size(0X105374, 0X10, 0, 0);
	add_func    (0X105424,0X105462);
	set_func_flags(0X105424,0x400);
	SetType(0X105424, "int __fastcall g_storage_context__load_param_set(struct boot_device_load_context_maybe *a1, int params_size, unsigned int num_param_set, unsigned int param_num);");
	set_frame_size(0X105424, 0X10, 0, 0);
	add_func    (0X105462,0X1054D4);
	set_func_flags(0X105462,0x400);
	SetType(0X105462, "int __fastcall storage_ctx__init_adapter(struct boot_device_load_context_maybe *ctx, STORAGE_ADAPTER adapter_id, int bootdev_info);");
	set_frame_size(0X105462, 0X10, 0, 0);
	define_local_var(0X105462, 0X1054D4, "[bp-0X10]", "bootdev_config_ptr");
	add_func    (0X1054F8,0X105598);
	set_func_flags(0X1054F8,0x400);
	SetType(0X1054F8, "int __fastcall iostruct__write_string(iostruct *a1, unsigned __int8 *data);");
	set_frame_size(0X1054F8, 0X18, 0, 0);
	add_func    (0X105598,0X1057A4);
	set_func_flags(0X105598,0x400);
	SetType(0X105598, "int __cdecl something_printf(int some_callback, int a2, unsigned __int8 *a3, int *a4);");
	set_frame_size(0X105598, 0X50, 0, 0);
	define_local_var(0X105598, 0X1057A4, "[bp-0X2C]", "io");
	add_func    (0X1057A4,0X1057C6);
	set_func_flags(0X1057A4,0x400);
	SetType(0X1057A4, "int __fastcall iostruct__writechar(iostruct *a1, int a2);");
	set_frame_size(0X1057A4, 0X8, 0, 0);
	add_func    (0X1057D0,0X10580A);
	set_func_flags(0X1057D0,0x400);
	set_frame_size(0X1057D0, 0X8, 0, 0);
	add_func    (0X10580A,0X105886);
	set_func_flags(0X10580A,0x400);
	set_frame_size(0X10580A, 0X28, 0, 0);
	add_func    (0X105886,0X10594E);
	set_func_flags(0X105886,0x400);
	set_frame_size(0X105886, 0X38, 0, 0);
	add_func    (0X105954,0X1059E6);
	set_func_flags(0X105954,0x400);
	set_frame_size(0X105954, 0X18, 0, 0);
	add_func    (0X1059E6,0X106996);
	set_func_flags(0X1059E6,0x400);
	set_frame_size(0X1059E6, 0X50, 0, 0);
	add_func    (0X106996,0X1069F2);
	set_func_flags(0X106996,0x400);
	set_frame_size(0X106996, 0X10, 0, 0);
	add_func    (0X1069F2,0X106A00);
	set_func_flags(0X1069F2,0x400);
	set_frame_size(0X1069F2, 0X8, 0, 0);
	add_func    (0X106A00,0X106A1E);
	set_func_flags(0X106A00,0x400);
	add_func    (0X106A1E,0X106AA6);
	set_func_flags(0X106A1E,0x400);
	set_frame_size(0X106A1E, 0X20, 0, 0);
	add_func    (0X106AE4,0X106B5A);
	set_func_flags(0X106AE4,0x400);
	set_frame_size(0X106AE4, 0X18, 0, 0);
	add_func    (0X106B5C,0X106B76);
	set_func_flags(0X106B5C,0x400);
	set_frame_size(0X106B5C, 0X8, 0, 0);
	add_func    (0X106B78,0X106B7C);
	set_func_flags(0X106B78,0x400);
	SetType(0X106B78, "signed int __fastcall sub_106B78(usb_request *a1);");
	add_func    (0X106B7C,0X106CD0);
	set_func_flags(0X106B7C,0x400);
	SetType(0X106B7C, "signed int __fastcall usbd_req__reset_device_controller(usb_request *a1);");
	set_frame_size(0X106B7C, 0X18, 0, 0);
	add_func    (0X106CD0,0X1070DE);
	set_func_flags(0X106CD0,0x400);
	set_frame_size(0X106CD0, 0X28, 0, 0);
	add_func    (0X1070DE,0X107102);
	set_func_flags(0X1070DE,0x400);
	set_frame_size(0X1070DE, 0X8, 0, 0);
	add_func    (0X107102,0X107114);
	set_func_flags(0X107102,0x400);
	SetType(0X107102, "void __cdecl usbd_req__usbd_req();");
	add_func    (0X10712C,0X1071B8);
	set_func_flags(0X10712C,0x400);
	SetType(0X10712C, "tegra_EP_STATUS __fastcall usbd__get_ep_status(usb_request *a1, unsigned int endpoint);");
	set_frame_size(0X10712C, 0X8, 0, 0);
	add_func    (0X1071B8,0X10722E);
	set_func_flags(0X1071B8,0x400);
	SetType(0X1071B8, "signed int __fastcall usbd__flush_endpoint(int ep);");
	set_frame_size(0X1071B8, 0X18, 0, 0);
	add_func    (0X107244,0X10729E);
	set_func_flags(0X107244,0);
	SetType(0X107244, "void __fastcall usbd__mark_ep_complete(usb_request *req, unsigned int endpoint);");
	set_frame_size(0X107244, 0X10, 0, 0);
	add_func    (0X1072A4,0X1072D0);
	set_func_flags(0X1072A4,0x400);
	SetType(0X1072A4, "signed int __fastcall usbd__get_max_pkt_length(usb_request *req, int endpoint);");
	add_func    (0X1072D0,0X1073CA);
	set_func_flags(0X1072D0,0);
	SetType(0X1072D0, "signed int __fastcall usbd__ep_operation(usb_request *req, unsigned int endpoint, char *buf, int len, int sync);");
	set_frame_size(0X1072D0, 0X28, 0, 0);
	define_local_var(0X1072D0, 0X1073CA, "[bp-0X24]", "a1");
	define_local_var(0X1072D0, 0X1073CA, "[bp+0]", "sync");
	add_func    (0X1073D2,0X10741E);
	set_func_flags(0X1073D2,0x400);
	SetType(0X1073D2, "void __fastcall usbd__reset_ep1(int direction, int endpoint);");
	set_frame_size(0X1073D2, 0X8, 0, 0);
	add_func    (0X10741E,0X10754E);
	set_func_flags(0X10741E,0x400);
	SetType(0X10741E, "void __fastcall usb_get_device_descriptor(char *success, _DWORD *descriptor, _DWORD *size, _BYTE *a4);");
	set_frame_size(0X10741E, 0X28, 0, 0);
	add_func    (0X10754E,0X10764E);
	set_func_flags(0X10754E,0x400);
	SetType(0X10754E, "void __fastcall usbd__initialize_ep_ctrl(usb_request *req, unsigned int endpoint);");
	set_func_cmt(0X10754E,	"this is called for eps 0 & 1", 1);
	set_frame_size(0X10754E, 0X10, 0, 0);
	add_func    (0X10767C,0X107860);
	set_func_flags(0X10767C,0x400);
	SetType(0X10767C, "int __fastcall usbd__handle_ep0_control_transfer(char *temp_buffer);");
	set_frame_size(0X10767C, 0X38, 0, 0);
	define_local_var(0X10767C, 0X107860, "[bp-0X38]", "a5");
	define_local_var(0X10767C, 0X107860, "[bp-0X30]", "found");
	define_local_var(0X10767C, 0X107860, "[bp-0X24]", "descriptor_len");
	define_local_var(0X10767C, 0X107860, "[bp-0X20]", "descriptor");
	define_local_var(0X10767C, 0X107860, "[bp-0X1C]", "success");
	define_local_var(0X10767C, 0X107860, "[bp-0X18]", "a1");
	add_func    (0X107860,0X107924);
	set_func_flags(0X107860,0);
	SetType(0X107860, "int __fastcall usbd__ep0_stuff(int a1);");
	set_frame_size(0X107860, 0X18, 0, 0);
	define_local_var(0X107860, 0X107924, "[bp-0X18]", "a1");
	add_func    (0X107926,0X107950);
	set_func_flags(0X107926,0x400);
	SetType(0X107926, "signed int __fastcall usb_device_write_ep1_in_sync(int data_ptr, unsigned int len, int *a3);");
	set_frame_size(0X107926, 0X10, 0, 0);
	define_local_var(0X107926, 0X107950, "[bp-0X10]", "a5");
	add_func    (0X107978,0X1079A8);
	set_func_flags(0X107978,0x400);
	SetType(0X107978, "int __fastcall usb_device_read_ep1_out_sync(char *buf, unsigned int len, int *a3);");
	set_frame_size(0X107978, 0X10, 0, 0);
	define_local_var(0X107978, 0X1079A8, "[bp-0X10]", "a5");
	add_func    (0X1079A8,0X1079EC);
	set_func_flags(0X1079A8,0x400);
	SetType(0X1079A8, "void __fastcall usbd__handle_ep0_pending_control_transfer(char *temp_buffer);");
	set_frame_size(0X1079A8, 0X10, 0, 0);
	add_func    (0X1079EC,0X1079FE);
	set_func_flags(0X1079EC,0);
	SetType(0X1079EC, "signed int __fastcall usbd__get_ep1_status(int dir);");
	set_frame_size(0X1079EC, 0X4, 0, 0);
	add_func    (0X107A02,0X107A14);
	set_func_flags(0X107A02,0);
	set_frame_size(0X107A02, 0X8, 0, 0);
	add_func    (0X107A1A,0X107A38);
	set_func_flags(0X107A1A,0);
	SetType(0X107A1A, "int __fastcall usb_device_write_ep1_in(int a1, unsigned int a2);");
	set_frame_size(0X107A1A, 0X8, 0, 0);
	define_local_var(0X107A1A, 0X107A38, "[bp-0X8]", "a5");
	add_func    (0X107A3C,0X107A64);
	set_func_flags(0X107A3C,0x400);
	SetType(0X107A3C, "int __fastcall sub_107A3C();");
	set_frame_size(0X107A3C, 0X4, 0, 0);
	add_func    (0X107A64,0X107A84);
	set_func_flags(0X107A64,0x400);
	SetType(0X107A64, "int __fastcall usb_device_read_ep1_out(char *buf, unsigned int len);");
	set_frame_size(0X107A64, 0X8, 0, 0);
	define_local_var(0X107A64, 0X107A84, "[bp-0X8]", "a5");
	add_func    (0X107A84,0X107AAC);
	set_func_flags(0X107A84,0x400);
	SetType(0X107A84, "int __fastcall usbd__get_ep1_bytes_to_read();");
	set_frame_size(0X107A84, 0X4, 0, 0);
	add_func    (0X107AAC,0X107ABA);
	set_func_flags(0X107AAC,0x400);
	SetType(0X107AAC, "int __fastcall usb_device_field8(int buf_maybe);");
	set_frame_size(0X107AAC, 0X8, 0, 0);
	add_func    (0X107ABA,0X107AC8);
	set_func_flags(0X107ABA,0x400);
	set_frame_size(0X107ABA, 0X4, 0, 0);
	add_func    (0X107AC8,0X107B06);
	set_func_flags(0X107AC8,0x400);
	SetType(0X107AC8, "int __fastcall usb_device_ep1_get_bytes_readable(_DWORD *total_bytes_ptr_maybe, int a2, char *temp_buffer);");
	set_frame_size(0X107AC8, 0X10, 0, 0);
	add_func    (0X107B06,0X107B4C);
	set_func_flags(0X107B06,0x400);
	SetType(0X107B06, "int __fastcall usb_device_ep1_get_bytes_writing(_DWORD *a1, int a2, int a3);");
	set_frame_size(0X107B06, 0X10, 0, 0);
	add_func    (0X107B4C,0X107BBE);
	set_func_flags(0X107B4C,0x400);
	set_frame_size(0X107B4C, 0X18, 0, 0);
	define_local_var(0X107B4C, 0X107BBE, "[bp-0X18]", "a5");
	add_func    (0X107BBE,0X107C48);
	set_func_flags(0X107BBE,0x400);
	SetType(0X107BBE, "void __fastcall usbd__initialize_ep0(usb_request *a1);");
	set_frame_size(0X107BBE, 0X18, 0, 0);
	add_func    (0X107C54,0X107CC0);
	set_func_flags(0X107C54,0x400);
	set_frame_size(0X107C54, 0X10, 0, 0);
	add_func    (0X107CC0,0X10F828);
	set_func_flags(0X107CC0,0x400);
	set_frame_size(0X107CC0, 0X150, 0, 0);
	add_func    (0X10F838,0X10F892);
	set_func_flags(0X10F838,0x400);
	set_frame_size(0X10F838, 0X8, 0, 0);
	add_func    (0X10F8A2,0X10F986);
	set_func_flags(0X10F8A2,0x400);
	set_frame_size(0X10F8A2, 0X28, 0, 0);
	add_func    (0X10F986,0X10F9B6);
	set_func_flags(0X10F986,0x400);
	add_func    (0X10F9B6,0X10F9F6);
	set_func_flags(0X10F9B6,0x400);
	set_frame_size(0X10F9B6, 0X20, 0, 0);
	add_func    (0X10F9F6,0X10FAF6);
	set_func_flags(0X10F9F6,0x400);
	set_frame_size(0X10F9F6, 0X10, 0, 0);
	add_func    (0X10FAF6,0X10FBA6);
	set_func_flags(0X10FAF6,0);
	set_frame_size(0X10FAF6, 0X18, 0, 0);
	add_func    (0X10FBAC,0X10FBC4);
	set_func_flags(0X10FBAC,0x400);
	add_func    (0X10FBC4,0X10FC14);
	set_func_flags(0X10FBC4,0);
	set_frame_size(0X10FBC4, 0X4, 0, 0);
	add_func    (0X10FC18,0X10FC76);
	set_func_flags(0X10FC18,0x400);
	set_frame_size(0X10FC18, 0X28, 0, 0);
	add_func    (0X10FC76,0X10FCA6);
	set_func_flags(0X10FC76,0x400);
	add_func    (0X10FCA6,0X10FDC4);
	set_func_flags(0X10FCA6,0x400);
	set_frame_size(0X10FCA6, 0X18, 0, 0);
	add_func    (0X10FDC4,0X10FDF4);
	set_func_flags(0X10FDC4,0x400);
	set_frame_size(0X10FDC4, 0X10, 0, 0);
	add_func    (0X10FDF4,0X10FF22);
	set_func_flags(0X10FDF4,0x400);
	set_frame_size(0X10FDF4, 0X18, 0, 0);
	add_func    (0X10FF22,0X10FF76);
	set_func_flags(0X10FF22,0x400);
	set_frame_size(0X10FF22, 0X10, 0, 0);
	add_func    (0X10FF76,0X10FFB8);
	set_func_flags(0X10FF76,0x400);
	set_frame_size(0X10FF76, 0X10, 0, 0);
	add_func    (0X10FFB8,0X1100C8);
	set_func_flags(0X10FFB8,0x400);
	set_frame_size(0X10FFB8, 0X8, 0, 0);
	add_func    (0X1100C8,0X110198);
	set_func_flags(0X1100C8,0x400);
	set_frame_size(0X1100C8, 0X10, 0, 0);
	add_func    (0X110198,0X1101E6);
	set_func_flags(0X110198,0x400);
	set_frame_size(0X110198, 0X4, 0, 0);
	add_func    (0X1101E6,0X110226);
	set_func_flags(0X1101E6,0x400);
	set_frame_size(0X1101E6, 0X28, 0, 0);
	add_func    (0X110226,0X1102CA);
	set_func_flags(0X110226,0x400);
	set_frame_size(0X110226, 0X10, 0, 0);
	add_func    (0X1102CA,0X110324);
	set_func_flags(0X1102CA,0x400);
	set_frame_size(0X1102CA, 0X18, 0, 0);
	add_func    (0X110326,0X110356);
	set_func_flags(0X110326,0x400);
	add_func    (0X110356,0X11039A);
	set_func_flags(0X110356,0x400);
	set_frame_size(0X110356, 0X4, 0, 0);
	add_func    (0X11039A,0X1104FC);
	set_func_flags(0X11039A,0x400);
	set_frame_size(0X11039A, 0X18, 0, 0);
	add_func    (0X1104FC,0X110544);
	set_func_flags(0X1104FC,0x400);
	SetType(0X1104FC, "int __fastcall xusb_init_maybe(int a1, int a2, int a3, int a4);");
	set_frame_size(0X1104FC, 0X20, 0, 0);
	add_func    (0X110544,0X1105D2);
	set_func_flags(0X110544,0x400);
	set_frame_size(0X110544, 0X8, 0, 0);
	add_func    (0X1105D2,0X110668);
	set_func_flags(0X1105D2,0x400);
	set_frame_size(0X1105D2, 0X10, 0, 0);
	add_func    (0X110668,0X11069C);
	set_func_flags(0X110668,0x400);
	set_frame_size(0X110668, 0X18, 0, 0);
	add_func    (0X11069C,0X1106D0);
	set_func_flags(0X11069C,0x400);
	set_frame_size(0X11069C, 0X18, 0, 0);
	add_func    (0X1106D0,0X1106E6);
	set_func_flags(0X1106D0,0x400);
	set_frame_size(0X1106D0, 0X8, 0, 0);
	add_func    (0X1106E6,0X110708);
	set_func_flags(0X1106E6,0x400);
	set_frame_size(0X1106E6, 0X10, 0, 0);
	add_func    (0X110708,0X11075E);
	set_func_flags(0X110708,0x400);
	set_frame_size(0X110708, 0X20, 0, 0);
	add_func    (0X11075E,0X110780);
	set_func_flags(0X11075E,0x400);
	set_frame_size(0X11075E, 0X10, 0, 0);
	add_func    (0X110780,0X110784);
	set_func_flags(0X110780,0x400);
	add_func    (0X110784,0X1107A8);
	set_func_flags(0X110784,0x400);
	set_frame_size(0X110784, 0X18, 0, 0);
	add_func    (0X1107D8,0X110800);
	set_func_flags(0X1107D8,0x400);
	SetType(0X1107D8, "int __fastcall is_block_bad(unsigned int a1, boot_config_table *bct);");
	add_func    (0X110800,0X11080E);
	set_func_flags(0X110800,0x400);
	SetType(0X110800, "void __fastcall bootdev_uart_load_config(int bootdev_info, struct boot_device_uart_config **bootdev_config_ptr);");
	add_func    (0X11080E,0X110812);
	set_func_flags(0X11080E,0x400);
	SetType(0X11080E, "signed int __cdecl bootdev_uart_verify_config(struct boot_device_uart_config *config);");
	add_func    (0X110812,0X11081C);
	set_func_flags(0X110812,0x400);
	SetType(0X110812, "void __fastcall bootdev_uart_field8(int *a1, _DWORD *a2, _DWORD *a3);");
	add_func    (0X11081C,0X110948);
	set_func_flags(0X11081C,0x400);
	SetType(0X11081C, "signed int __fastcall bootdev_uart_init(boot_device_uart_config *config, _DWORD *some_mem);");
	set_frame_size(0X11081C, 0X40, 0, 0);
	define_local_var(0X11081C, 0X110948, "[bp-0X3C]", "a1");
	define_local_var(0X11081C, 0X110948, "[bp-0X1C]", "a3");
	add_func    (0X110948,0X110972);
	set_func_flags(0X110948,0x400);
	set_frame_size(0X110948, 0X10, 0, 0);
	add_func    (0X110972,0X110976);
	set_func_flags(0X110972,0x400);
	add_func    (0X110976,0X110978);
	set_func_flags(0X110976,0x440);
	add_func    (0X110978,0X11097C);
	set_func_flags(0X110978,0x400);
	add_func    (0X110990,0X1109D4);
	set_func_flags(0X110990,0x400);
	set_frame_size(0X110990, 0X4, 0, 0);
	add_func    (0X1109D4,0X110B0A);
	set_func_flags(0X1109D4,0x400);
	set_frame_size(0X1109D4, 0X20, 0, 0);
	add_func    (0X110B10,0X110BA8);
	set_func_flags(0X110B10,0x400);
	set_frame_size(0X110B10, 0X18, 0, 0);
	add_func    (0X110BA8,0X110BB6);
	set_func_flags(0X110BA8,0x400);
	add_func    (0X110BB6,0X110D00);
	set_func_flags(0X110BB6,0x400);
	set_frame_size(0X110BB6, 0X38, 0, 0);
	define_local_var(0X110BB6, 0X110D00, "[bp-0X18]", "a2");
	add_func    (0X110D00,0X110D96);
	set_func_flags(0X110D00,0x400);
	set_frame_size(0X110D00, 0X30, 0, 0);
	define_local_var(0X110D00, 0X110D96, "[bp-0X20]", "a2");
	add_func    (0X110DC4,0X110DD8);
	set_func_flags(0X110DC4,0x400);
	add_func    (0X110DD8,0X1110EE);
	set_func_flags(0X110DD8,0x400);
	set_frame_size(0X110DD8, 0X20, 0, 0);
	add_func    (0X1110F0,0X111330);
	set_func_flags(0X1110F0,0x400);
	set_frame_size(0X1110F0, 0X30, 0, 0);
	add_func    (0X111330,0X11139E);
	set_func_flags(0X111330,0x400);
	set_frame_size(0X111330, 0X14, 0, 0);
	add_func    (0X11139E,0X111474);
	set_func_flags(0X11139E,0x400);
	set_frame_size(0X11139E, 0X20, 0, 0);
	add_func    (0X111474,0X1114B6);
	set_func_flags(0X111474,0x200);
	set_frame_size(0X111474, 0X10, 0, 0);
	add_func    (0X1114BC,0X1114C0);
	set_func_flags(0X1114BC,0x400);
	add_func    (0X1114C0,0X1114E6);
	set_func_flags(0X1114C0,0x400);
	set_frame_size(0X1114C0, 0X8, 0, 0);
	add_func    (0X1114E6,0X11154C);
	set_func_flags(0X1114E6,0x400);
	set_frame_size(0X1114E6, 0X20, 0, 0);
	add_func    (0X11154C,0X11156A);
	set_func_flags(0X11154C,0x400);
	add_func    (0X11156A,0X1115E0);
	set_func_flags(0X11156A,0x400);
	set_frame_size(0X11156A, 0X10, 0, 0);
	add_func    (0X1115E0,0X1116A0);
	set_func_flags(0X1115E0,0x400);
	set_frame_size(0X1115E0, 0X10, 0, 0);
	add_func    (0X1116A0,0X111700);
	set_func_flags(0X1116A0,0x400);
	set_frame_size(0X1116A0, 0X4, 0, 0);
	add_func    (0X111700,0X111788);
	set_func_flags(0X111700,0x400);
	set_frame_size(0X111700, 0X18, 0, 0);
	add_func    (0X11178E,0X111818);
	set_func_flags(0X11178E,0x400);
	set_frame_size(0X11178E, 0X20, 0, 0);
	add_func    (0X111818,0X111878);
	set_func_flags(0X111818,0x400);
	set_frame_size(0X111818, 0X18, 0, 0);
	add_func    (0X111878,0X111908);
	set_func_flags(0X111878,0x400);
	set_frame_size(0X111878, 0X10, 0, 0);
	add_func    (0X111908,0X11199E);
	set_func_flags(0X111908,0x400);
	set_frame_size(0X111908, 0X18, 0, 0);
	add_func    (0X1119D8,0X111B42);
	set_func_flags(0X1119D8,0x400);
	set_frame_size(0X1119D8, 0X80, 0, 0);
	add_func    (0X111B48,0X111B78);
	set_func_flags(0X111B48,0x400);
	SetType(0X111B48, "void __cdecl sdmmc_set_data_transfer_mode(SD_CONFIG_DATA_TRANSFER_MODE mode);");
	set_frame_size(0X111B48, 0X4, 0, 0);
	add_func    (0X111B78,0X111CBC);
	set_func_flags(0X111B78,0);
	set_frame_size(0X111B78, 0X18, 0, 0);
	add_func    (0X111CC2,0X111CF2);
	set_func_flags(0X111CC2,0x400);
	SetType(0X111CC2, "void __fastcall sdmmc_read_response(char num, int *out);");
	set_frame_size(0X111CC2, 0X8, 0, 0);
	add_func    (0X111CFC,0X111D24);
	set_func_flags(0X111CFC,0x400);
	set_frame_size(0X111CFC, 0X10, 0, 0);
	add_func    (0X111D2E,0X111D5C);
	set_func_flags(0X111D2E,0x400);
	set_frame_size(0X111D2E, 0X10, 0, 0);
	add_func    (0X111D5C,0X111E6E);
	set_func_flags(0X111D5C,0x400);
	set_frame_size(0X111D5C, 0X20, 0, 0);
	add_func    (0X111E6E,0X111F2A);
	set_func_flags(0X111E6E,0x400);
	SetType(0X111E6E, "int __fastcall sdmmc_transfer(SD_CMD cmd, int argument, int type?, signed int stop_transmission);");
	set_frame_size(0X111E6E, 0X28, 0, 0);
	define_local_var(0X111E6E, 0X111F2A, "[bp-0X28]", "out");
	add_func    (0X111F2A,0X111FA6);
	set_func_flags(0X111F2A,0x400);
	set_frame_size(0X111F2A, 0X18, 0, 0);
	add_func    (0X111FA6,0X112030);
	set_func_flags(0X111FA6,0x400);
	set_frame_size(0X111FA6, 0X18, 0, 0);
	add_func    (0X112030,0X1120D0);
	set_func_flags(0X112030,0x400);
	set_frame_size(0X112030, 0X18, 0, 0);
	add_func    (0X1120D0,0X1121C6);
	set_func_flags(0X1120D0,0x400);
	SetType(0X1120D0, "int __fastcall sdmmc_read_fixed(void *dest, int block_count);");
	set_frame_size(0X1120D0, 0X18, 0, 0);
	add_func    (0X1121C6,0X1122A6);
	set_func_flags(0X1121C6,0x400);
	set_frame_size(0X1121C6, 0X20, 0, 0);
	add_func    (0X1122A6,0X1122E6);
	set_func_flags(0X1122A6,0x400);
	set_frame_size(0X1122A6, 0X18, 0, 0);
	add_func    (0X112350,0X11237E);
	set_func_flags(0X112350,0);
	set_frame_size(0X112350, 0X8, 0, 0);
	add_func    (0X112380,0X1123A8);
	set_func_flags(0X112380,0);
	set_frame_size(0X112380, 0X10, 0, 0);
	add_func    (0X1123AA,0X11246E);
	set_func_flags(0X1123AA,0x400);
	set_frame_size(0X1123AA, 0X18, 0, 0);
	add_func    (0X11246E,0X1124CC);
	set_func_flags(0X11246E,0x400);
	set_frame_size(0X11246E, 0X4, 0, 0);
	add_func    (0X1124E2,0X112504);
	set_func_flags(0X1124E2,0x400);
	set_frame_size(0X1124E2, 0X10, 0, 0);
	add_func    (0X112504,0X11267C);
	set_func_flags(0X112504,0x400);
	set_frame_size(0X112504, 0X10, 0, 0);
	add_func    (0X11267C,0X1126F0);
	set_func_flags(0X11267C,0x400);
	SetType(0X11267C, "void __fastcall bootdev_sd_load_config(unsigned int bootdev_info, boot_device_config **bootdev_config_ptr);");
	set_frame_size(0X11267C, 0X10, 0, 0);
	add_func    (0X1126F0,0X11271E);
	set_func_flags(0X1126F0,0x400);
	SetType(0X1126F0, "BOOL __fastcall bootdev_sd_verify_config(struct boot_device_sd_config *config);");
	add_func    (0X11271E,0X112738);
	set_func_flags(0X11271E,0x400);
	SetType(0X11271E, "void __fastcall bootdev_sd_field8(boot_device_config *a1, boot_device_load_context_maybe *a2, _DWORD *a3);");
	set_frame_size(0X11271E, 0X4, 0, 0);
	add_func    (0X112738,0X1127E0);
	set_func_flags(0X112738,0x400);
	SetType(0X112738, "void __fastcall bootdev_sd_init(boot_device_config *cfg, boot_device_shared_state *shared_state);");
	set_frame_size(0X112738, 0X10, 0, 0);
	add_func    (0X1127E0,0X112946);
	set_func_flags(0X1127E0,0x400);
	SetType(0X1127E0, "void __fastcall bootdev_sd_read(int block, int page, void *dst);");
	set_frame_size(0X1127E0, 0X20, 0, 0);
	define_local_var(0X1127E0, 0X112946, "[bp-0X20]", "len");
	define_local_var(0X1127E0, 0X112946, "[bp-0X18]", "page_in_blocks");
	add_func    (0X112946,0X112972);
	set_func_flags(0X112946,0x400);
	set_frame_size(0X112946, 0X8, 0, 0);
	add_func    (0X112972,0X112976);
	set_func_flags(0X112972,0x400);
	add_func    (0X112976,0X112996);
	set_func_flags(0X112976,0x400);
	set_frame_size(0X112976, 0X10, 0, 0);
	add_func    (0X112996,0X1129FE);
	set_func_flags(0X112996,0x400);
	set_frame_size(0X112996, 0X18, 0, 0);
	add_func    (0X1129FE,0X112A1A);
	set_func_flags(0X1129FE,0x400);
	set_frame_size(0X1129FE, 0X10, 0, 0);
	add_func    (0X112A1A,0X112A2E);
	set_func_flags(0X112A1A,0x400);
	SetType(0X112A1A, "void __fastcall sdmmc_set_block_size_count(__int16 block_size, int block_count);");
	add_func    (0X112A2E,0X112A72);
	set_func_flags(0X112A2E,0x400);
	set_frame_size(0X112A2E, 0X10, 0, 0);
	add_func    (0X112A94,0X112B02);
	set_func_flags(0X112A94,0x400);
	SetType(0X112A94, "int __fastcall sdmmc_set_power_class_maybe(int a1);");
	set_frame_size(0X112A94, 0X18, 0, 0);
	add_func    (0X112B02,0X112B50);
	set_func_flags(0X112B02,0x400);
	set_frame_size(0X112B02, 0X10, 0, 0);
	add_func    (0X112B50,0X112B9A);
	set_func_flags(0X112B50,0x400);
	set_frame_size(0X112B50, 0X10, 0, 0);
	add_func    (0X112BAC,0X112BAE);
	set_func_flags(0X112BAC,0x440);
	add_func    (0X112BAE,0X112BB2);
	set_func_flags(0X112BAE,0x440);
	add_func    (0X112BB2,0X112BB4);
	set_func_flags(0X112BB2,0x440);
	add_func    (0X112BB4,0X112BB8);
	set_func_flags(0X112BB4,0x440);
	add_func    (0X112BB8,0X112BBC);
	set_func_flags(0X112BB8,0x440);
	add_func    (0X112BBC,0X112BC0);
	set_func_flags(0X112BBC,0x440);
	add_func    (0X112BC0,0X112BC2);
	set_func_flags(0X112BC0,0x440);
	add_func    (0X112BC2,0X112BC6);
	set_func_flags(0X112BC2,0x440);
	add_func    (0X112BC8,0X112BF2);
	set_func_flags(0X112BC8,0x400);
	SetType(0X112BC8, "_DWORD *__fastcall sub_112BC8(int a1, char *a2, int a3, _DWORD *a4);");
	set_frame_size(0X112BC8, 0X8, 0, 0);
	add_func    (0X112BF2,0X112C3A);
	set_func_flags(0X112BF2,0x400);
	set_frame_size(0X112BF2, 0X30, 0, 0);
	add_func    (0X112DCC,0X112E82);
	set_func_flags(0X112DCC,0);
	set_frame_size(0X112DCC, 0X18, 0, 0);
	add_func    (0X112E88,0X112EE4);
	set_func_flags(0X112E88,0);
	set_frame_size(0X112E88, 0X10, 0, 0);
	add_func    (0X112EEA,0X112F34);
	set_func_flags(0X112EEA,0x400);
	set_frame_size(0X112EEA, 0X10, 0, 0);
	add_func    (0X112F34,0X112F68);
	set_func_flags(0X112F34,0x400);
	set_frame_size(0X112F34, 0X10, 0, 0);
	add_func    (0X112F68,0X113098);
	set_func_flags(0X112F68,0x400);
	set_frame_size(0X112F68, 0X38, 0, 0);
	define_local_var(0X112F68, 0X113098, "[bp-0X28]", "a2");
	add_func    (0X113098,0X113332);
	set_func_flags(0X113098,0x400);
	set_frame_size(0X113098, 0X20, 0, 0);
	add_func    (0X113332,0X11339C);
	set_func_flags(0X113332,0x400);
	set_frame_size(0X113332, 0X10, 0, 0);
	add_func    (0X1133B8,0X11349A);
	set_func_flags(0X1133B8,0x400);
	set_frame_size(0X1133B8, 0X10, 0, 0);
	add_func    (0X11349A,0X113522);
	set_func_flags(0X11349A,0x400);
	set_frame_size(0X11349A, 0X20, 0, 0);
	add_func    (0X113522,0X113578);
	set_func_flags(0X113522,0x400);
	set_frame_size(0X113522, 0X18, 0, 0);
	add_func    (0X113582,0X113602);
	set_func_flags(0X113582,0);
	set_frame_size(0X113582, 0X10, 0, 0);
	add_func    (0X113604,0X113746);
	set_func_flags(0X113604,0);
	set_frame_size(0X113604, 0X20, 0, 0);
	add_func    (0X113748,0X1138DE);
	set_func_flags(0X113748,0x400);
	set_frame_size(0X113748, 0X18, 0, 0);
	add_func    (0X1138DE,0X11395C);
	set_func_flags(0X1138DE,0x400);
	set_frame_size(0X1138DE, 0X18, 0, 0);
	add_func    (0X11395C,0X113A22);
	set_func_flags(0X11395C,0x400);
	set_frame_size(0X11395C, 0X10, 0, 0);
	add_func    (0X113A22,0X113A52);
	set_func_flags(0X113A22,0x400);
	add_func    (0X113A52,0X113AC4);
	set_func_flags(0X113A52,0x400);
	set_frame_size(0X113A52, 0X10, 0, 0);
	add_func    (0X113AC4,0X113B16);
	set_func_flags(0X113AC4,0x400);
	set_frame_size(0X113AC4, 0X10, 0, 0);
	add_func    (0X113B16,0X113BD8);
	set_func_flags(0X113B16,0x400);
	set_frame_size(0X113B16, 0X28, 0, 0);
	add_func    (0X113BEC,0X113C04);
	set_func_flags(0X113BEC,0x400);
	add_func    (0X113C04,0X113C08);
	set_func_flags(0X113C04,0x400);
	add_func    (0X113C08,0X113C24);
	set_func_flags(0X113C08,0x400);
	set_frame_size(0X113C08, 0X4, 0, 0);
	add_func    (0X113C24,0X113C84);
	set_func_flags(0X113C24,0x400);
	set_frame_size(0X113C24, 0X28, 0, 0);
	add_func    (0X113C84,0X113C90);
	set_func_flags(0X113C84,0x400);
	add_func    (0X113C90,0X113C94);
	set_func_flags(0X113C90,0x400);
	add_func    (0X113C94,0X113CB8);
	set_func_flags(0X113C94,0x400);
	set_frame_size(0X113C94, 0X14, 0, 0);
	add_func    (0X113CB8,0X113DA4);
	set_func_flags(0X113CB8,0x400);
	set_frame_size(0X113CB8, 0X20, 0, 0);
	add_func    (0X113DA4,0X113DF4);
	set_func_flags(0X113DA4,0x400);
	set_frame_size(0X113DA4, 0X8, 0, 0);
	add_func    (0X113DF4,0X113E06);
	set_func_flags(0X113DF4,0x400);
	add_func    (0X113E06,0X113E1A);
	set_func_flags(0X113E06,0x400);
	add_func    (0X113E1A,0X113E26);
	set_func_flags(0X113E1A,0x400);
	add_func    (0X113E26,0X113E46);
	set_func_flags(0X113E26,0x400);
	set_frame_size(0X113E26, 0X4, 0, 0);
	add_func    (0X113E46,0X113E64);
	set_func_flags(0X113E46,0x400);
	set_frame_size(0X113E46, 0X8, 0, 0);
	add_func    (0X113E6A,0X113E86);
	set_func_flags(0X113E6A,0x400);
	set_frame_size(0X113E6A, 0X8, 0, 0);
	add_func    (0X113E86,0X113EC6);
	set_func_flags(0X113E86,0x400);
	set_frame_size(0X113E86, 0X28, 0, 0);
	add_func    (0X113EC6,0X113F74);
	set_func_flags(0X113EC6,0x400);
	set_frame_size(0X113EC6, 0X20, 0, 0);
	add_func    (0X113F74,0X113FB0);
	set_func_flags(0X113F74,0x400);
	set_frame_size(0X113F74, 0X28, 0, 0);
	add_func    (0X113FB0,0X114020);
	set_func_flags(0X113FB0,0x400);
	set_frame_size(0X113FB0, 0X20, 0, 0);
	add_func    (0X114020,0X11405A);
	set_func_flags(0X114020,0x400);
	set_frame_size(0X114020, 0X28, 0, 0);
	add_func    (0X11405A,0X1140C8);
	set_func_flags(0X11405A,0x400);
	set_frame_size(0X11405A, 0X28, 0, 0);
	add_func    (0X1140C8,0X114104);
	set_func_flags(0X1140C8,0x400);
	set_frame_size(0X1140C8, 0X4, 0, 0);
	add_func    (0X114104,0X114128);
	set_func_flags(0X114104,0x400);
	add_func    (0X114128,0X114136);
	set_func_flags(0X114128,0x400);
	add_func    (0X114136,0X11420A);
	set_func_flags(0X114136,0x400);
	set_frame_size(0X114136, 0X10, 0, 0);
	add_func    (0X11420A,0X11421C);
	set_func_flags(0X11420A,0x400);
	add_func    (0X11421C,0X114248);
	set_func_flags(0X11421C,0x400);
	set_frame_size(0X11421C, 0X8, 0, 0);
	add_func    (0X114248,0X11424C);
	set_func_flags(0X114248,0x400);
	add_func    (0X114250,0X114356);
	set_func_flags(0X114250,0x400);
	set_frame_size(0X114250, 0X20, 0, 0);
	add_func    (0X114362,0X114396);
	set_func_flags(0X114362,0x400);
	set_frame_size(0X114362, 0X10, 0, 0);
	add_func    (0X114396,0X1143E6);
	set_func_flags(0X114396,0x400);
	set_frame_size(0X114396, 0X18, 0, 0);
	add_func    (0X1143E6,0X11448A);
	set_func_flags(0X1143E6,0x400);
	set_frame_size(0X1143E6, 0X10, 0, 0);
	add_func    (0X114496,0X114512);
	set_func_flags(0X114496,0x400);
	set_frame_size(0X114496, 0X18, 0, 0);
	add_func    (0X114512,0X114554);
	set_func_flags(0X114512,0x400);
	set_frame_size(0X114512, 0X10, 0, 0);
	add_func    (0X114554,0X11457C);
	set_func_flags(0X114554,0x400);
	set_frame_size(0X114554, 0X8, 0, 0);
	add_func    (0X11457C,0X11460A);
	set_func_flags(0X11457C,0x400);
	set_frame_size(0X11457C, 0X20, 0, 0);
	add_func    (0X114634,0X114638);
	set_func_flags(0X114634,0x4c0);
	SetType(0X114634, "void __fastcall j2_memcpy_libc(int a1, char *a2, unsigned int a3);");
	add_func    (0X114638,0X114648);
	set_func_flags(0X114638,0x400);
	SetType(0X114638, "void __fastcall j3_memcpy_libc(int a1, char *a2, unsigned int a3);");
	set_frame_size(0X114638, 0X8, 0, 0);
	add_func    (0X114648,0X11464C);
	set_func_flags(0X114648,0x4c0);
	SetType(0X114648, "void __fastcall j_memset_maybe(void *buf, int len, int c);");
	add_func    (0X11464C,0X11465C);
	set_func_flags(0X11464C,0x400);
	SetType(0X11464C, "void __fastcall memset_maybe_weird_arg_order(void *buf, unsigned int len, unsigned __int8 c);");
	add_func    (0X11465C,0X114660);
	set_func_flags(0X11465C,0x4c0);
	SetType(0X11465C, "int __fastcall memcpy_libc_thumb(void *dst, void *src, unsigned int n);");
	add_func    (0X114660,0X114734);
	set_func_flags(0X114660,0x400);
	SetType(0X114660, "int __fastcall memcpy_libc(void *dst, void *src, unsigned int n);");
	add_func    (0X114734,0X114738);
	set_func_flags(0X114734,0x4c0);
	add_func    (0X114738,0X11479C);
	set_func_flags(0X114738,0x400);
	set_frame_size(0X114738, 0X8, 0, 0);
	add_func    (0X11479C,0X1147A0);
	set_func_flags(0X11479C,0x480);
	SetType(0X11479C, "void __fastcall memzero(void *buf, int len);");
	add_func    (0X1147A0,0X1147A4);
	set_func_flags(0X1147A0,0x400);
	add_func    (0X1147A4,0X1147F4);
	set_func_flags(0X1147A4,0x400);
	SetType(0X1147A4, "void __fastcall memset_optimized_child(_DWORD *result, unsigned int a2, int a3);");
	set_frame_size(0X1147A4, 0X4, 0, 0);
	add_func    (0X1147F4,0X1147F8);
	set_func_flags(0X1147F4,0x480);
	add_func    (0X1147F8,0X114818);
	set_func_flags(0X1147F8,0x400);
	add_func    (0X114818,0X11481C);
	set_func_flags(0X114818,0x480);
	add_func    (0X11481C,0X11483C);
	set_func_flags(0X11481C,0x400);
	add_func    (0X1149A8,0X1149AC);
	set_func_flags(0X1149A8,0x4c0);
	add_func    (0X1149AC,0X1149C4);
	set_func_flags(0X1149AC,0x400);
	add_func    (0X1149C4,0X1149C6);
	set_func_flags(0X1149C4,0x480);
	add_func    (0X1149C6,0X1149C8);
	set_func_flags(0X1149C6,0x480);
	add_func    (0X1149C8,0X1149CA);
	set_func_flags(0X1149C8,0x480);
	SetType(0X1149C8, "int __fastcall thumb_thunk_2args(int a1, int a2, int function);");
	add_func    (0X1149CA,0X1149CC);
	set_func_flags(0X1149CA,0x480);
	add_func    (0X1149CC,0X1149CE);
	set_func_flags(0X1149CC,0x480);
	add_func    (0X1149CE,0X1149D0);
	set_func_flags(0X1149CE,0x480);
	add_func    (0X1149D0,0X1149D2);
	set_func_flags(0X1149D0,0x480);
	add_func    (0X1149D2,0X1149D4);
	set_func_flags(0X1149D2,0x480);
	add_func    (0X114A20,0X114A34);
	set_func_flags(0X114A20,0x401);
	set_frame_size(0X114A20, 0X8, 0, 0);
	add_func    (0X114A38,0X114A3C);
	set_func_flags(0X114A38,0x481);
	add_func    (0X114A80,0X114A94);
	set_func_flags(0X114A80,0x400);
	set_frame_size(0X114A80, 0X10, 0, 0);
	add_func    (0X114A94,0X114AAC);
	set_func_flags(0X114A94,0x400);
	set_frame_size(0X114A94, 0X8, 0, 0);
	add_func    (0X114AAC,0X114AEC);
	set_func_flags(0X114AAC,0x400);
	add_func    (0X114B5C,0X114B64);
	set_func_flags(0X114B5C,0x400);
	SetType(0X114B5C, "__int64 __fastcall ram_pokes();");
	add_func    (0X114B64,0X114C20);
	set_func_flags(0X114B64,0x400);
	SetType(0X114B64, "__int64 __fastcall sub_114B64();");
	set_frame_size(0X114B64, 0X28, 0, 0);
	add_func    (0X114C20,0X114C3A);
	set_func_flags(0X114C20,0x400);
	set_frame_size(0X114C20, 0X8, 0, 0);
	add_func    (0X114C3C,0X114C48);
	set_func_flags(0X114C3C,0x400);
	add_func    (0X114C48,0X114C58);
	set_func_flags(0X114C48,0x400);
	set_frame_size(0X114C48, 0X8, 0, 0);
	add_func    (0X114C58,0X114CB8);
	set_func_flags(0X114C58,0x400);
	add_func    (0X114CB8,0X114CC0);
	set_func_flags(0X114CB8,0x400);
	add_func    (0X114CC8,0X114CCC);
	set_func_flags(0X114CC8,0x480);
	add_func    (0X114CCC,0X114CD4);
	set_func_flags(0X114CCC,0x400);
	add_func    (0X114CDC,0X114CE4);
	set_func_flags(0X114CDC,0x400);
	add_func    (0X114CE4,0X114CF8);
	set_func_flags(0X114CE4,0x400);
	set_frame_size(0X114CE4, 0X8, 0, 0);
	add_func    (0X114CF8,0X114CFE);
	set_func_flags(0X114CF8,0x400);
	set_frame_size(0X114CF8, 0X4, 0, 0);
	add_func    (0X114D00,0X114D08);
	set_func_flags(0X114D00,0x400);
	add_func    (0X114D0C,0X114D14);
	set_func_flags(0X114D0C,0x400);
	SetType(0X114D0C, "_DWORD *__cdecl sub_114D0C();");
	add_func    (0X114D1C,0X114D20);
	set_func_flags(0X114D1C,0x4c0);
	SetType(0X114D1C, "int __fastcall j_divide_integer(int a1, int a2);");
	add_func    (0X114D20,0X114D3C);
	set_func_flags(0X114D20,0x400);
	SetType(0X114D20, "int __fastcall divide_integer(unsigned int a1, unsigned int a2);");
	add_func    (0X114D3C,0X114D48);
	set_func_flags(0X114D3C,0x480);
	add_func    (0X114D48,0X114D54);
	set_func_flags(0X114D48,0x480);
	SetType(0X114D48, "void __fastcall sub_114D48();");
	add_func    (0X114D54,0X114D5C);
	set_func_flags(0X114D54,0x480);
	SetType(0X114D54, "void __fastcall jump_into_nvtboot(void (*return_stub)(void), void *start_wipe, void *length, _DWORD *lockout_val_location);");
	add_func    (0X114D5C,0X114D68);
	set_func_flags(0X114D5C,0x480);
	add_func    (0X114D68,0X114D70);
	set_func_flags(0X114D68,0x480);
	add_func    (0X114D70,0X114D78);
	set_func_flags(0X114D70,0x480);
	add_func    (0X114D80,0X114D8C);
	set_func_flags(0X114D80,0x400);
	add_func    (0X114D8C,0X114DC0);
	set_func_flags(0X114D8C,0x401);
	add_func    (0X114DC0,0X114DF4);
	set_func_flags(0X114DC0,0x401);
	add_func    (0X114E1C,0X114E20);
	set_func_flags(0X114E1C,0x480);
	SetType(0X114E1C, "void sub_114E1C(void);");
	add_func    (0X114E20,0X114E38);
	set_func_flags(0X114E20,0x400);
	SetType(0X114E20, "void __cdecl sub_114E20();");
	set_frame_size(0X114E20, 0X8, 0, 0);
}

//------------------------------------------------------------------------
// Information about functions

static Functions(void) {

	Functions_0();
}

//------------------------------------------------------------------------
// Information about segment registers

static SegRegs(void) {
	split_sreg_range(0X100000,"T",0,3);
	split_sreg_range(0X100040,"T",0,3);
	split_sreg_range(0X100060,"T",0,3);
	split_sreg_range(0X100078,"T",0,3);
	split_sreg_range(0X100080,"T",0,3);
	split_sreg_range(0X1000AC,"T",0X1,3);
	split_sreg_range(0X1000B6,"T",0X1,3);
	split_sreg_range(0X1000BA,"T",0X1,3);
	split_sreg_range(0X1000D4,"T",0X1,3);
	split_sreg_range(0X1000EC,"T",0X1,3);
	split_sreg_range(0X1000F8,"T",0X1,3);
	split_sreg_range(0X100110,"T",0X1,3);
	split_sreg_range(0X100116,"T",0X1,3);
	split_sreg_range(0X10011C,"T",0X1,3);
	split_sreg_range(0X10012C,"T",0X1,3);
	split_sreg_range(0X100144,"T",0X1,3);
	split_sreg_range(0X10014A,"T",0X1,3);
	split_sreg_range(0X10014E,"T",0X1,3);
	split_sreg_range(0X100152,"T",0X1,3);
	split_sreg_range(0X1001C0,"T",0X1,3);
	split_sreg_range(0X1001C8,"T",0X1,3);
	split_sreg_range(0X1001E0,"T",0X1,3);
	split_sreg_range(0X1001EE,"T",0X1,3);
	split_sreg_range(0X1001FC,"T",0X1,3);
	split_sreg_range(0X10020A,"T",0X1,3);
	split_sreg_range(0X10021A,"T",0X1,3);
	split_sreg_range(0X10022A,"T",0X1,3);
	split_sreg_range(0X100236,"T",0X1,3);
	split_sreg_range(0X10023A,"T",0X1,3);
	split_sreg_range(0X100242,"T",0X1,3);
	split_sreg_range(0X100248,"T",0X1,3);
	split_sreg_range(0X100286,"T",0X1,3);
	split_sreg_range(0X100292,"T",0X1,3);
	split_sreg_range(0X100294,"T",0X1,3);
	split_sreg_range(0X10029E,"T",0X1,3);
	split_sreg_range(0X1002A0,"T",0X1,3);
	split_sreg_range(0X1002BC,"T",0X1,3);
	split_sreg_range(0X1002C2,"T",0X1,3);
	split_sreg_range(0X1002C6,"T",0X1,3);
	split_sreg_range(0X10033A,"T",0X1,3);
	split_sreg_range(0X100350,"T",0X1,3);
	split_sreg_range(0X100354,"T",0X1,3);
	split_sreg_range(0X100358,"T",0X1,3);
	split_sreg_range(0X10036C,"T",0X1,3);
	split_sreg_range(0X100370,"T",0X1,3);
	split_sreg_range(0X100380,"T",0X1,3);
	split_sreg_range(0X100388,"T",0X1,3);
	split_sreg_range(0X100390,"T",0X1,3);
	split_sreg_range(0X1003BC,"T",0X1,3);
	split_sreg_range(0X1003C0,"T",0X1,3);
	split_sreg_range(0X1003F2,"T",0X1,3);
	split_sreg_range(0X1003FE,"T",0X1,3);
	split_sreg_range(0X10040C,"T",0X1,3);
	split_sreg_range(0X100412,"T",0X1,3);
	split_sreg_range(0X100414,"T",0X1,3);
	split_sreg_range(0X100436,"T",0X1,3);
	split_sreg_range(0X100438,"T",0X1,3);
	split_sreg_range(0X10043E,"T",0X1,3);
	split_sreg_range(0X10044E,"T",0X1,3);
	split_sreg_range(0X100452,"T",0X1,3);
	split_sreg_range(0X10045C,"T",0X1,3);
	split_sreg_range(0X10046A,"T",0X1,3);
	split_sreg_range(0X10046E,"T",0X1,3);
	split_sreg_range(0X100480,"T",0X1,3);
	split_sreg_range(0X10048C,"T",0X1,3);
	split_sreg_range(0X10048E,"T",0X1,3);
	split_sreg_range(0X100492,"T",0X1,3);
	split_sreg_range(0X1004AA,"T",0X1,3);
	split_sreg_range(0X1004C0,"T",0X1,3);
	split_sreg_range(0X1004C6,"T",0X1,3);
	split_sreg_range(0X1004D4,"T",0X1,3);
	split_sreg_range(0X1004E6,"T",0X1,3);
	split_sreg_range(0X100502,"T",0X1,3);
	split_sreg_range(0X100508,"T",0X1,3);
	split_sreg_range(0X10050A,"T",0X1,3);
	split_sreg_range(0X10051A,"T",0X1,3);
	split_sreg_range(0X100526,"T",0X1,3);
	split_sreg_range(0X10054C,"T",0X1,3);
	split_sreg_range(0X100552,"T",0X1,3);
	split_sreg_range(0X100578,"T",0X1,3);
	split_sreg_range(0X100580,"T",0X1,3);
	split_sreg_range(0X100586,"T",0X1,3);
	split_sreg_range(0X10058A,"T",0X1,3);
	split_sreg_range(0X100590,"T",0X1,3);
	split_sreg_range(0X1005AE,"T",0X1,3);
	split_sreg_range(0X1005CC,"T",0X1,3);
	split_sreg_range(0X1005DC,"T",0X1,3);
	split_sreg_range(0X1005F0,"T",0X1,3);
	split_sreg_range(0X100626,"T",0X1,3);
	split_sreg_range(0X10066E,"T",0X1,3);
	split_sreg_range(0X100686,"T",0X1,3);
	split_sreg_range(0X10069E,"T",0X1,3);
	split_sreg_range(0X1006A2,"T",0X1,3);
	split_sreg_range(0X1006A6,"T",0X1,3);
	split_sreg_range(0X1006AC,"T",0X1,3);
	split_sreg_range(0X1006BA,"T",0X1,3);
	split_sreg_range(0X1006C8,"T",0X1,3);
	split_sreg_range(0X1006CE,"T",0X1,3);
	split_sreg_range(0X1006E0,"T",0X1,3);
	split_sreg_range(0X100702,"T",0X1,3);
	split_sreg_range(0X100716,"T",0X1,3);
	split_sreg_range(0X100730,"T",0X1,3);
	split_sreg_range(0X100732,"T",0X1,3);
	split_sreg_range(0X100734,"T",0X1,3);
	split_sreg_range(0X100746,"T",0X1,3);
	split_sreg_range(0X100750,"T",0X1,3);
	split_sreg_range(0X10075A,"T",0X1,3);
	split_sreg_range(0X100760,"T",0X1,3);
	split_sreg_range(0X100768,"T",0X1,3);
	split_sreg_range(0X10076E,"T",0X1,3);
	split_sreg_range(0X1007B0,"T",0,3);
	split_sreg_range(0X100800,"T",0,3);
	split_sreg_range(0X100808,"T",0X1,2);
	split_sreg_range(0X10080A,"T",0X1,3);
	split_sreg_range(0X100824,"T",0X1,3);
	split_sreg_range(0X100830,"T",0X1,3);
	split_sreg_range(0X100838,"T",0X1,3);
	split_sreg_range(0X100854,"T",0X1,3);
	split_sreg_range(0X100870,"T",0X1,3);
	split_sreg_range(0X10088C,"T",0X1,3);
	split_sreg_range(0X1008A2,"T",0X1,3);
	split_sreg_range(0X1008AC,"T",0X1,3);
	split_sreg_range(0X1008BC,"T",0X1,3);
	split_sreg_range(0X1008D2,"T",0X1,3);
	split_sreg_range(0X1008D8,"T",0X1,3);
	split_sreg_range(0X1008EA,"T",0X1,3);
	split_sreg_range(0X1008EC,"T",0X1,3);
	split_sreg_range(0X1008F6,"T",0X1,3);
	split_sreg_range(0X100914,"T",0X1,3);
	split_sreg_range(0X100920,"T",0X1,3);
	split_sreg_range(0X100926,"T",0X1,3);
	split_sreg_range(0X10093A,"T",0X1,3);
	split_sreg_range(0X10093C,"T",0X1,3);
	split_sreg_range(0X10095E,"T",0X1,3);
	split_sreg_range(0X10096C,"T",0X1,3);
	split_sreg_range(0X100980,"T",0X1,3);
	split_sreg_range(0X100982,"T",0X1,3);
	split_sreg_range(0X100A10,"T",0X1,3);
	split_sreg_range(0X100A20,"T",0X1,3);
	split_sreg_range(0X100A36,"T",0X1,3);
	split_sreg_range(0X100A42,"T",0X1,3);
	split_sreg_range(0X100A54,"T",0X1,3);
	split_sreg_range(0X100A78,"T",0X1,3);
	split_sreg_range(0X100A8A,"T",0X1,3);
	split_sreg_range(0X100A8C,"T",0X1,3);
	split_sreg_range(0X100A9E,"T",0X1,3);
	split_sreg_range(0X100AA4,"T",0X1,3);
	split_sreg_range(0X100AC4,"T",0X1,3);
	split_sreg_range(0X100AE8,"T",0X1,3);
	split_sreg_range(0X100AF2,"T",0X1,3);
	split_sreg_range(0X100B4E,"T",0X1,3);
	split_sreg_range(0X100B52,"T",0X1,3);
	split_sreg_range(0X100B88,"T",0X1,3);
	split_sreg_range(0X100B94,"T",0X1,3);
	split_sreg_range(0X100BA0,"T",0X1,3);
	split_sreg_range(0X100BA4,"T",0X1,3);
	split_sreg_range(0X100BB6,"T",0X1,3);
	split_sreg_range(0X100BC0,"T",0X1,3);
	split_sreg_range(0X100BCA,"T",0X1,3);
	split_sreg_range(0X100BD0,"T",0X1,3);
	split_sreg_range(0X100BD6,"T",0X1,3);
	split_sreg_range(0X100BDE,"T",0X1,3);
	split_sreg_range(0X100BEC,"T",0X1,3);
	split_sreg_range(0X100BFA,"T",0X1,3);
	split_sreg_range(0X100BFC,"T",0X1,3);
	split_sreg_range(0X100C02,"T",0X1,3);
	split_sreg_range(0X100C06,"T",0X1,3);
	split_sreg_range(0X100C14,"T",0X1,3);
	split_sreg_range(0X100C1A,"T",0X1,3);
	split_sreg_range(0X100C28,"T",0X1,3);
	split_sreg_range(0X100C30,"T",0X1,3);
	split_sreg_range(0X100C40,"T",0X1,3);
	split_sreg_range(0X100C48,"T",0X1,3);
	split_sreg_range(0X100C54,"T",0X1,3);
	split_sreg_range(0X100C6C,"T",0X1,3);
	split_sreg_range(0X100C6E,"T",0X1,3);
	split_sreg_range(0X100C7E,"T",0X1,3);
	split_sreg_range(0X100C80,"T",0X1,3);
	split_sreg_range(0X100C90,"T",0X1,3);
	split_sreg_range(0X100C92,"T",0X1,3);
	split_sreg_range(0X100CA2,"T",0X1,3);
	split_sreg_range(0X100CA4,"T",0X1,3);
	split_sreg_range(0X100CB4,"T",0X1,3);
	split_sreg_range(0X100CB6,"T",0X1,3);
	split_sreg_range(0X100CC6,"T",0X1,3);
	split_sreg_range(0X100CC8,"T",0X1,3);
	split_sreg_range(0X100CD8,"T",0X1,3);
	split_sreg_range(0X100CDA,"T",0X1,3);
	split_sreg_range(0X100CEA,"T",0X1,3);
	split_sreg_range(0X100CEC,"T",0X1,3);
	split_sreg_range(0X100CF4,"T",0X1,3);
	split_sreg_range(0X100D2E,"T",0X1,3);
	split_sreg_range(0X100D34,"T",0X1,3);
	split_sreg_range(0X100D4C,"T",0X1,3);
	split_sreg_range(0X100D6A,"T",0X1,3);
	split_sreg_range(0X100D7A,"T",0X1,3);
	split_sreg_range(0X100D8C,"T",0X1,3);
	split_sreg_range(0X100D9A,"T",0X1,3);
	split_sreg_range(0X100DAC,"T",0X1,3);
	split_sreg_range(0X100E20,"T",0X1,3);
	split_sreg_range(0X100E24,"T",0,3);
	split_sreg_range(0X100E2C,"T",0,3);
	split_sreg_range(0X100E42,"T",0X1,3);
	split_sreg_range(0X100E48,"T",0X1,3);
	split_sreg_range(0X100E50,"T",0X1,3);
	split_sreg_range(0X100E58,"T",0X1,3);
	split_sreg_range(0X100E5A,"T",0X1,3);
	split_sreg_range(0X100E6C,"T",0,3);
	split_sreg_range(0X100E78,"T",0X1,2);
	split_sreg_range(0X100E7C,"T",0,3);
	split_sreg_range(0X100E80,"T",0,3);
	split_sreg_range(0X100F80,"T",0,3);
	split_sreg_range(0X100FA0,"T",0,3);
	split_sreg_range(0X101010,"T",0,3);
	split_sreg_range(0X101030,"T",0,3);
	split_sreg_range(0X101038,"T",0,3);
	split_sreg_range(0X101078,"T",0X1,3);
	split_sreg_range(0X10107A,"T",0X1,3);
	split_sreg_range(0X101088,"T",0X1,3);
	split_sreg_range(0X101090,"T",0X1,3);
	split_sreg_range(0X101094,"T",0X1,3);
	split_sreg_range(0X1010A0,"T",0X1,3);
	split_sreg_range(0X1010A8,"T",0X1,3);
	split_sreg_range(0X1010B2,"T",0X1,3);
	split_sreg_range(0X1010BA,"T",0X1,3);
	split_sreg_range(0X1010C6,"T",0X1,3);
	split_sreg_range(0X1010CC,"T",0,3);
	split_sreg_range(0X101104,"T",0,3);
	split_sreg_range(0X101120,"T",0X1,3);
	split_sreg_range(0X101124,"T",0,3);
	split_sreg_range(0X101134,"T",0X1,3);
	split_sreg_range(0X101148,"T",0X1,3);
	split_sreg_range(0X10116A,"T",0X1,3);
	split_sreg_range(0X101174,"T",0X1,3);
	split_sreg_range(0X101190,"T",0X1,3);
	split_sreg_range(0X101198,"T",0X1,3);
	split_sreg_range(0X10119E,"T",0X1,3);
	split_sreg_range(0X1011B6,"T",0X1,3);
	split_sreg_range(0X1011BC,"T",0X1,3);
	split_sreg_range(0X1011E8,"T",0X1,3);
	split_sreg_range(0X101224,"T",0X1,3);
	split_sreg_range(0X10122C,"T",0X1,3);
	split_sreg_range(0X101238,"T",0X1,3);
	split_sreg_range(0X10125C,"T",0X1,3);
	split_sreg_range(0X10126C,"T",0X1,3);
	split_sreg_range(0X101282,"T",0X1,3);
	split_sreg_range(0X101290,"T",0X1,3);
	split_sreg_range(0X1012A0,"T",0X1,3);
	split_sreg_range(0X1012A6,"T",0X1,3);
	split_sreg_range(0X1012C2,"T",0X1,3);
	split_sreg_range(0X1012D6,"T",0X1,3);
	split_sreg_range(0X1012DA,"T",0X1,3);
	split_sreg_range(0X1012F4,"T",0X1,3);
	split_sreg_range(0X101314,"T",0X1,3);
	split_sreg_range(0X10131E,"T",0X1,3);
	split_sreg_range(0X101320,"T",0X1,3);
	split_sreg_range(0X101322,"T",0X1,3);
	split_sreg_range(0X101328,"T",0X1,3);
	split_sreg_range(0X101338,"T",0X1,3);
	split_sreg_range(0X10134A,"T",0X1,3);
	split_sreg_range(0X10135E,"T",0X1,3);
	split_sreg_range(0X10137E,"T",0X1,3);
	split_sreg_range(0X1013A0,"T",0X1,3);
	split_sreg_range(0X1013D6,"T",0X1,3);
	split_sreg_range(0X1013E6,"T",0X1,3);
	split_sreg_range(0X1013FA,"T",0X1,3);
	split_sreg_range(0X10142A,"T",0X1,3);
	split_sreg_range(0X101458,"T",0X1,3);
	split_sreg_range(0X10148E,"T",0X1,3);
	split_sreg_range(0X101492,"T",0X1,3);
	split_sreg_range(0X1014A2,"T",0X1,3);
	split_sreg_range(0X1014AA,"T",0X1,3);
	split_sreg_range(0X1014BC,"T",0X1,3);
	split_sreg_range(0X1014C8,"T",0X1,3);
	split_sreg_range(0X1014D2,"T",0X1,3);
	split_sreg_range(0X1014DA,"T",0X1,3);
	split_sreg_range(0X1014F8,"T",0X1,3);
	split_sreg_range(0X10152A,"T",0X1,3);
	split_sreg_range(0X101598,"T",0X1,3);
	split_sreg_range(0X1015BC,"T",0X1,3);
	split_sreg_range(0X1015D6,"T",0X1,3);
	split_sreg_range(0X1015F4,"T",0X1,3);
	split_sreg_range(0X101612,"T",0X1,3);
	split_sreg_range(0X101614,"T",0X1,3);
	split_sreg_range(0X10161C,"T",0X1,3);
	split_sreg_range(0X101620,"T",0X1,3);
	split_sreg_range(0X101630,"T",0X1,3);
	split_sreg_range(0X10163C,"T",0X1,3);
	split_sreg_range(0X101658,"T",0X1,3);
	split_sreg_range(0X10166C,"T",0X1,3);
	split_sreg_range(0X101682,"T",0X1,3);
	split_sreg_range(0X1016A6,"T",0X1,3);
	split_sreg_range(0X101718,"T",0X1,3);
	split_sreg_range(0X101774,"T",0X1,3);
	split_sreg_range(0X10177A,"T",0X1,3);
	split_sreg_range(0X1017AE,"T",0X1,3);
	split_sreg_range(0X1017DE,"T",0X1,3);
	split_sreg_range(0X101810,"T",0X1,3);
	split_sreg_range(0X101816,"T",0X1,3);
	split_sreg_range(0X101844,"T",0X1,3);
	split_sreg_range(0X101866,"T",0X1,3);
	split_sreg_range(0X10186C,"T",0X1,3);
	split_sreg_range(0X101870,"T",0X1,3);
	split_sreg_range(0X10187A,"T",0X1,3);
	split_sreg_range(0X101880,"T",0X1,3);
	split_sreg_range(0X101886,"T",0X1,3);
	split_sreg_range(0X101892,"T",0X1,3);
	split_sreg_range(0X1018A2,"T",0X1,3);
	split_sreg_range(0X1018BA,"T",0X1,3);
	split_sreg_range(0X1018DC,"T",0X1,3);
	split_sreg_range(0X1018FA,"T",0X1,3);
	split_sreg_range(0X101902,"T",0X1,3);
	split_sreg_range(0X101922,"T",0X1,3);
	split_sreg_range(0X101934,"T",0X1,3);
	split_sreg_range(0X10193C,"T",0X1,3);
	split_sreg_range(0X101940,"T",0X1,3);
	split_sreg_range(0X101964,"T",0X1,3);
	split_sreg_range(0X101970,"T",0X1,3);
	split_sreg_range(0X10197A,"T",0X1,3);
	split_sreg_range(0X101988,"T",0X1,3);
	split_sreg_range(0X101A34,"T",0X1,3);
	split_sreg_range(0X101A48,"T",0X1,3);
	split_sreg_range(0X101A4E,"T",0X1,3);
	split_sreg_range(0X101AB6,"T",0X1,3);
	split_sreg_range(0X101B24,"T",0X1,3);
	split_sreg_range(0X101B84,"T",0X1,3);
	split_sreg_range(0X101BCA,"T",0X1,3);
	split_sreg_range(0X101C08,"T",0X1,3);
	split_sreg_range(0X101C0C,"T",0X1,3);
	split_sreg_range(0X101C0E,"T",0X1,3);
	split_sreg_range(0X101C16,"T",0X1,3);
	split_sreg_range(0X101C20,"T",0X1,3);
	split_sreg_range(0X101C62,"T",0X1,3);
	split_sreg_range(0X101C7C,"T",0X1,3);
	split_sreg_range(0X101C82,"T",0X1,3);
	split_sreg_range(0X101C84,"T",0X1,3);
	split_sreg_range(0X101CDA,"T",0X1,3);
	split_sreg_range(0X101D20,"T",0X1,3);
	split_sreg_range(0X101DF8,"T",0X1,3);
	split_sreg_range(0X101E1C,"T",0X1,3);
	split_sreg_range(0X101E42,"T",0X1,3);
	split_sreg_range(0X101E62,"T",0X1,3);
	split_sreg_range(0X101E6A,"T",0X1,3);
	split_sreg_range(0X101EC4,"T",0X1,3);
	split_sreg_range(0X101EC8,"T",0X1,3);
	split_sreg_range(0X101EDC,"T",0X1,3);
	split_sreg_range(0X101EF6,"T",0X1,3);
	split_sreg_range(0X101EFE,"T",0X1,3);
	split_sreg_range(0X101F26,"T",0X1,3);
	split_sreg_range(0X101F36,"T",0X1,3);
	split_sreg_range(0X101F4E,"T",0X1,3);
	split_sreg_range(0X101F6C,"T",0X1,3);
	split_sreg_range(0X101F78,"T",0X1,3);
	split_sreg_range(0X101F7A,"T",0X1,3);
	split_sreg_range(0X101F82,"T",0X1,3);
	split_sreg_range(0X101F90,"T",0X1,3);
	split_sreg_range(0X101FAA,"T",0X1,3);
	split_sreg_range(0X101FBA,"T",0X1,3);
	split_sreg_range(0X101FE2,"T",0X1,3);
	split_sreg_range(0X101FEE,"T",0X1,3);
	split_sreg_range(0X102020,"T",0X1,3);
	split_sreg_range(0X10202C,"T",0X1,3);
	split_sreg_range(0X102030,"T",0X1,3);
	split_sreg_range(0X102040,"T",0X1,3);
	split_sreg_range(0X102054,"T",0X1,3);
	split_sreg_range(0X10205E,"T",0X1,3);
	split_sreg_range(0X102060,"T",0X1,3);
	split_sreg_range(0X102066,"T",0X1,3);
	split_sreg_range(0X10206A,"T",0X1,3);
	split_sreg_range(0X102076,"T",0X1,3);
	split_sreg_range(0X10207A,"T",0X1,3);
	split_sreg_range(0X102090,"T",0X1,3);
	split_sreg_range(0X102094,"T",0X1,3);
	split_sreg_range(0X1020AA,"T",0X1,3);
	split_sreg_range(0X1020C8,"T",0X1,3);
	split_sreg_range(0X1020E6,"T",0X1,3);
	split_sreg_range(0X1020EA,"T",0X1,3);
	split_sreg_range(0X1020FA,"T",0X1,3);
	split_sreg_range(0X10210A,"T",0X1,3);
	split_sreg_range(0X102112,"T",0X1,3);
	split_sreg_range(0X102122,"T",0X1,3);
	split_sreg_range(0X102130,"T",0X1,3);
	split_sreg_range(0X102132,"T",0X1,3);
	split_sreg_range(0X102142,"T",0X1,3);
	split_sreg_range(0X102146,"T",0X1,3);
	split_sreg_range(0X102154,"T",0X1,3);
	split_sreg_range(0X102156,"T",0X1,3);
	split_sreg_range(0X102164,"T",0X1,3);
	split_sreg_range(0X102172,"T",0X1,3);
	split_sreg_range(0X10217A,"T",0X1,3);
	split_sreg_range(0X102186,"T",0X1,3);
	split_sreg_range(0X1021A2,"T",0X1,3);
	split_sreg_range(0X1021B0,"T",0X1,3);
	split_sreg_range(0X1021B2,"T",0X1,3);
	split_sreg_range(0X1021C0,"T",0X1,3);
	split_sreg_range(0X1021C8,"T",0X1,3);
	split_sreg_range(0X1021D6,"T",0X1,3);
	split_sreg_range(0X1021D8,"T",0X1,3);
	split_sreg_range(0X1021E6,"T",0X1,3);
	split_sreg_range(0X1021F0,"T",0X1,3);
	split_sreg_range(0X1021F4,"T",0X1,3);
	split_sreg_range(0X10220E,"T",0X1,3);
	split_sreg_range(0X102210,"T",0X1,3);
	split_sreg_range(0X102216,"T",0X1,3);
	split_sreg_range(0X102224,"T",0X1,3);
	split_sreg_range(0X102228,"T",0X1,3);
	split_sreg_range(0X10222C,"T",0X1,3);
	split_sreg_range(0X102230,"T",0X1,3);
	split_sreg_range(0X102246,"T",0X1,3);
	split_sreg_range(0X102248,"T",0X1,3);
	split_sreg_range(0X102250,"T",0X1,3);
	split_sreg_range(0X102256,"T",0X1,3);
	split_sreg_range(0X10225C,"T",0X1,3);
	split_sreg_range(0X102284,"T",0X1,3);
	split_sreg_range(0X10228A,"T",0X1,3);
	split_sreg_range(0X102296,"T",0X1,3);
	split_sreg_range(0X1022AE,"T",0X1,3);
	split_sreg_range(0X1022C4,"T",0X1,3);
	split_sreg_range(0X1022D4,"T",0X1,3);
	split_sreg_range(0X1022E6,"T",0X1,3);
	split_sreg_range(0X1022EA,"T",0X1,3);
	split_sreg_range(0X102302,"T",0X1,3);
	split_sreg_range(0X102308,"T",0X1,3);
	split_sreg_range(0X10230A,"T",0X1,3);
	split_sreg_range(0X102312,"T",0X1,3);
	split_sreg_range(0X102316,"T",0X1,3);
	split_sreg_range(0X102320,"T",0X1,3);
	split_sreg_range(0X102338,"T",0X1,3);
	split_sreg_range(0X1023BE,"T",0X1,3);
	split_sreg_range(0X1023CC,"T",0X1,3);
	split_sreg_range(0X1023D0,"T",0X1,3);
	split_sreg_range(0X1023DE,"T",0X1,3);
	split_sreg_range(0X1023E0,"T",0X1,3);
	split_sreg_range(0X1023E4,"T",0X1,3);
	split_sreg_range(0X1023F0,"T",0X1,3);
	split_sreg_range(0X1023FC,"T",0X1,3);
	split_sreg_range(0X10242E,"T",0X1,3);
	split_sreg_range(0X102430,"T",0X1,3);
	split_sreg_range(0X102436,"T",0X1,3);
	split_sreg_range(0X102454,"T",0X1,3);
	split_sreg_range(0X102468,"T",0X1,3);
	split_sreg_range(0X102480,"T",0X1,3);
	split_sreg_range(0X1024A4,"T",0X1,3);
	split_sreg_range(0X1024CA,"T",0X1,3);
	split_sreg_range(0X1024F6,"T",0X1,3);
	split_sreg_range(0X102500,"T",0X1,3);
	split_sreg_range(0X10251A,"T",0X1,3);
	split_sreg_range(0X102520,"T",0X1,3);
	split_sreg_range(0X102522,"T",0X1,3);
	split_sreg_range(0X102528,"T",0X1,3);
	split_sreg_range(0X10252C,"T",0X1,3);
	split_sreg_range(0X102550,"T",0X1,3);
	split_sreg_range(0X102554,"T",0X1,3);
	split_sreg_range(0X102560,"T",0X1,3);
	split_sreg_range(0X102568,"T",0X1,3);
	split_sreg_range(0X10256C,"T",0X1,3);
	split_sreg_range(0X1025AA,"T",0X1,3);
	split_sreg_range(0X1025CE,"T",0X1,3);
	split_sreg_range(0X1025F8,"T",0X1,3);
	split_sreg_range(0X102604,"T",0X1,3);
	split_sreg_range(0X102624,"T",0X1,3);
	split_sreg_range(0X10262A,"T",0X1,3);
	split_sreg_range(0X102644,"T",0X1,3);
	split_sreg_range(0X102646,"T",0X1,3);
	split_sreg_range(0X10265C,"T",0X1,3);
	split_sreg_range(0X102662,"T",0X1,3);
	split_sreg_range(0X102672,"T",0X1,3);
	split_sreg_range(0X10267E,"T",0X1,3);
	split_sreg_range(0X102682,"T",0X1,3);
	split_sreg_range(0X102694,"T",0X1,3);
	split_sreg_range(0X1026AC,"T",0X1,3);
	split_sreg_range(0X1026DE,"T",0X1,3);
	split_sreg_range(0X1026E0,"T",0X1,3);
	split_sreg_range(0X1026EC,"T",0X1,3);
	split_sreg_range(0X1026F0,"T",0X1,3);
	split_sreg_range(0X102712,"T",0X1,3);
	split_sreg_range(0X10275E,"T",0X1,3);
	split_sreg_range(0X10276A,"T",0X1,3);
	split_sreg_range(0X102770,"T",0X1,3);
	split_sreg_range(0X102772,"T",0X1,3);
	split_sreg_range(0X10277A,"T",0X1,3);
	split_sreg_range(0X10277C,"T",0X1,3);
	split_sreg_range(0X10278A,"T",0X1,3);
	split_sreg_range(0X1027BE,"T",0X1,3);
	split_sreg_range(0X1027C0,"T",0X1,3);
	split_sreg_range(0X102828,"T",0X1,3);
	split_sreg_range(0X102846,"T",0X1,3);
	split_sreg_range(0X10285E,"T",0X1,3);
	split_sreg_range(0X102890,"T",0X1,3);
	split_sreg_range(0X102896,"T",0X1,3);
	split_sreg_range(0X1028F2,"T",0X1,3);
	split_sreg_range(0X1028F8,"T",0X1,3);
	split_sreg_range(0X1028FE,"T",0X1,3);
	split_sreg_range(0X102924,"T",0X1,3);
	split_sreg_range(0X102932,"T",0X1,3);
	split_sreg_range(0X102936,"T",0X1,3);
	split_sreg_range(0X102944,"T",0X1,3);
	split_sreg_range(0X102948,"T",0X1,3);
	split_sreg_range(0X1029B4,"T",0X1,3);
	split_sreg_range(0X1029FE,"T",0X1,3);
	split_sreg_range(0X102A00,"T",0X1,3);
	split_sreg_range(0X102A1C,"T",0X1,3);
	split_sreg_range(0X102A2E,"T",0X1,3);
	split_sreg_range(0X102A32,"T",0X1,3);
	split_sreg_range(0X102A40,"T",0X1,3);
	split_sreg_range(0X102A44,"T",0X1,3);
	split_sreg_range(0X102A54,"T",0X1,3);
	split_sreg_range(0X102A58,"T",0X1,3);
	split_sreg_range(0X102A7A,"T",0X1,3);
	split_sreg_range(0X102A80,"T",0X1,3);
	split_sreg_range(0X102AD0,"T",0X1,3);
	split_sreg_range(0X102AD6,"T",0X1,3);
	split_sreg_range(0X102AEE,"T",0X1,3);
	split_sreg_range(0X102B20,"T",0X1,3);
	split_sreg_range(0X102B3C,"T",0X1,3);
	split_sreg_range(0X102B74,"T",0X1,3);
	split_sreg_range(0X102BA0,"T",0X1,3);
	split_sreg_range(0X102BC8,"T",0X1,3);
	split_sreg_range(0X102BCE,"T",0X1,3);
	split_sreg_range(0X102BD2,"T",0X1,3);
	split_sreg_range(0X102C24,"T",0X1,3);
	split_sreg_range(0X102C52,"T",0X1,3);
	split_sreg_range(0X102C58,"T",0X1,3);
	split_sreg_range(0X102C6C,"T",0X1,3);
	split_sreg_range(0X102C9C,"T",0X1,3);
	split_sreg_range(0X102CA4,"T",0X1,3);
	split_sreg_range(0X102CAC,"T",0X1,3);
	split_sreg_range(0X102CBE,"T",0X1,3);
	split_sreg_range(0X102CC6,"T",0X1,3);
	split_sreg_range(0X102CD6,"T",0X1,3);
	split_sreg_range(0X102CDC,"T",0X1,3);
	split_sreg_range(0X102CE2,"T",0X1,3);
	split_sreg_range(0X102CEE,"T",0X1,3);
	split_sreg_range(0X102D1C,"T",0X1,3);
	split_sreg_range(0X102D1E,"T",0X1,3);
	split_sreg_range(0X102D46,"T",0X1,3);
	split_sreg_range(0X102D58,"T",0X1,3);
	split_sreg_range(0X102D5A,"T",0X1,3);
	split_sreg_range(0X102D60,"T",0X1,3);
	split_sreg_range(0X102D62,"T",0X1,3);
	split_sreg_range(0X102D64,"T",0X1,3);
	split_sreg_range(0X102D7C,"T",0X1,3);
	split_sreg_range(0X102D9C,"T",0X1,3);
	split_sreg_range(0X102DA8,"T",0X1,3);
	split_sreg_range(0X102DDE,"T",0X1,3);
	split_sreg_range(0X102E14,"T",0X1,3);
	split_sreg_range(0X102E16,"T",0X1,3);
	split_sreg_range(0X102E18,"T",0X1,3);
	split_sreg_range(0X102E1E,"T",0X1,3);
	split_sreg_range(0X102E3C,"T",0X1,3);
	split_sreg_range(0X102E42,"T",0X1,3);
	split_sreg_range(0X102E4C,"T",0X1,3);
	split_sreg_range(0X102E5E,"T",0X1,3);
	split_sreg_range(0X102E64,"T",0X1,3);
	split_sreg_range(0X102E6E,"T",0X1,3);
	split_sreg_range(0X102E76,"T",0X1,3);
	split_sreg_range(0X102E94,"T",0X1,3);
	split_sreg_range(0X102EB4,"T",0X1,3);
	split_sreg_range(0X102EC0,"T",0X1,3);
	split_sreg_range(0X102EC2,"T",0X1,3);
	split_sreg_range(0X102ED4,"T",0X1,3);
	split_sreg_range(0X102EDE,"T",0X1,3);
	split_sreg_range(0X102EEE,"T",0X1,3);
	split_sreg_range(0X102EF8,"T",0X1,3);
	split_sreg_range(0X102F02,"T",0X1,3);
	split_sreg_range(0X102F1A,"T",0X1,3);
	split_sreg_range(0X102F20,"T",0X1,3);
	split_sreg_range(0X102F36,"T",0X1,3);
	split_sreg_range(0X102F4C,"T",0X1,3);
	split_sreg_range(0X102F50,"T",0X1,3);
	split_sreg_range(0X102F56,"T",0X1,3);
	split_sreg_range(0X102F6E,"T",0X1,3);
	split_sreg_range(0X102F84,"T",0X1,3);
	split_sreg_range(0X102F86,"T",0X1,3);
	split_sreg_range(0X102F92,"T",0X1,3);
	split_sreg_range(0X102F9A,"T",0X1,3);
	split_sreg_range(0X102F9C,"T",0X1,3);
	split_sreg_range(0X102FA2,"T",0X1,3);
	split_sreg_range(0X102FA6,"T",0X1,3);
	split_sreg_range(0X102FCC,"T",0X1,3);
	split_sreg_range(0X102FCE,"T",0X1,3);
	split_sreg_range(0X102FD6,"T",0X1,3);
	split_sreg_range(0X102FD8,"T",0X1,3);
	split_sreg_range(0X102FE6,"T",0X1,3);
	split_sreg_range(0X102FE8,"T",0X1,3);
	split_sreg_range(0X102FEE,"T",0X1,3);
	split_sreg_range(0X102FFE,"T",0X1,3);
	split_sreg_range(0X103000,"T",0X1,3);
	split_sreg_range(0X103006,"T",0X1,3);
	split_sreg_range(0X103016,"T",0X1,3);
	split_sreg_range(0X103018,"T",0X1,3);
	split_sreg_range(0X103020,"T",0X1,3);
	split_sreg_range(0X103022,"T",0X1,3);
	split_sreg_range(0X103044,"T",0X1,3);
	split_sreg_range(0X103048,"T",0X1,3);
	split_sreg_range(0X10304E,"T",0X1,3);
	split_sreg_range(0X10309C,"T",0X1,3);
	split_sreg_range(0X103100,"T",0X1,3);
	split_sreg_range(0X10311C,"T",0X1,3);
	split_sreg_range(0X10311E,"T",0X1,3);
	split_sreg_range(0X103134,"T",0X1,3);
	split_sreg_range(0X103140,"T",0X1,3);
	split_sreg_range(0X103154,"T",0X1,3);
	split_sreg_range(0X10315C,"T",0X1,3);
	split_sreg_range(0X103164,"T",0X1,3);
	split_sreg_range(0X103184,"T",0X1,3);
	split_sreg_range(0X103186,"T",0X1,3);
	split_sreg_range(0X1031A0,"T",0X1,3);
	split_sreg_range(0X1031A4,"T",0X1,3);
	split_sreg_range(0X1031A6,"T",0X1,3);
	split_sreg_range(0X1031C6,"T",0X1,3);
	split_sreg_range(0X1031C8,"T",0X1,3);
	split_sreg_range(0X1031E8,"T",0X1,3);
	split_sreg_range(0X1031EA,"T",0X1,3);
	split_sreg_range(0X10320A,"T",0X1,3);
	split_sreg_range(0X10320C,"T",0X1,3);
	split_sreg_range(0X103232,"T",0X1,3);
	split_sreg_range(0X103234,"T",0X1,3);
	split_sreg_range(0X103256,"T",0X1,3);
	split_sreg_range(0X103258,"T",0X1,3);
	split_sreg_range(0X10327E,"T",0X1,3);
	split_sreg_range(0X103280,"T",0X1,3);
	split_sreg_range(0X1032A2,"T",0X1,3);
	split_sreg_range(0X1032A4,"T",0X1,3);
	split_sreg_range(0X1032A6,"T",0X1,3);
	split_sreg_range(0X1032A8,"T",0X1,3);
	split_sreg_range(0X1032AE,"T",0X1,3);
	split_sreg_range(0X1032C2,"T",0X1,3);
	split_sreg_range(0X1032D2,"T",0X1,3);
	split_sreg_range(0X1032D6,"T",0X1,3);
	split_sreg_range(0X1032DA,"T",0X1,3);
	split_sreg_range(0X1032EE,"T",0X1,3);
	split_sreg_range(0X1032FE,"T",0X1,3);
	split_sreg_range(0X103302,"T",0X1,3);
	split_sreg_range(0X10330E,"T",0X1,3);
	split_sreg_range(0X10331A,"T",0X1,3);
	split_sreg_range(0X10331C,"T",0X1,3);
	split_sreg_range(0X103338,"T",0X1,3);
	split_sreg_range(0X103346,"T",0X1,3);
	split_sreg_range(0X103354,"T",0X1,3);
	split_sreg_range(0X103356,"T",0X1,3);
	split_sreg_range(0X103360,"T",0X1,3);
	split_sreg_range(0X1033BE,"T",0X1,3);
	split_sreg_range(0X1033C8,"T",0X1,3);
	split_sreg_range(0X1033CA,"T",0X1,3);
	split_sreg_range(0X1033DA,"T",0X1,3);
	split_sreg_range(0X1033E8,"T",0X1,3);
	split_sreg_range(0X1033F2,"T",0X1,3);
	split_sreg_range(0X10342C,"T",0X1,3);
	split_sreg_range(0X103430,"T",0X1,3);
	split_sreg_range(0X10344C,"T",0X1,3);
	split_sreg_range(0X103456,"T",0X1,3);
	split_sreg_range(0X103458,"T",0X1,3);
	split_sreg_range(0X103462,"T",0X1,3);
	split_sreg_range(0X103478,"T",0X1,3);
	split_sreg_range(0X103480,"T",0X1,3);
	split_sreg_range(0X103484,"T",0X1,3);
	split_sreg_range(0X103488,"T",0X1,3);
	split_sreg_range(0X1034B2,"T",0X1,3);
	split_sreg_range(0X1034B8,"T",0X1,3);
	split_sreg_range(0X1034C8,"T",0X1,3);
	split_sreg_range(0X1034D4,"T",0X1,3);
	split_sreg_range(0X1034EC,"T",0X1,3);
	split_sreg_range(0X1034F2,"T",0X1,3);
	split_sreg_range(0X10350C,"T",0X1,3);
	split_sreg_range(0X10350E,"T",0X1,3);
	split_sreg_range(0X103518,"T",0X1,3);
	split_sreg_range(0X10351A,"T",0X1,3);
	split_sreg_range(0X103538,"T",0X1,3);
	split_sreg_range(0X10359A,"T",0X1,3);
	split_sreg_range(0X1035DC,"T",0X1,3);
	split_sreg_range(0X1035EA,"T",0X1,3);
	split_sreg_range(0X103620,"T",0X1,3);
	split_sreg_range(0X103656,"T",0X1,3);
	split_sreg_range(0X103666,"T",0X1,3);
	split_sreg_range(0X103698,"T",0X1,3);
	split_sreg_range(0X1036CE,"T",0X1,3);
	split_sreg_range(0X1036E4,"T",0X1,3);
	split_sreg_range(0X1036F0,"T",0X1,3);
	split_sreg_range(0X103700,"T",0X1,3);
	split_sreg_range(0X103726,"T",0X1,3);
	split_sreg_range(0X103738,"T",0X1,3);
	split_sreg_range(0X10374A,"T",0X1,3);
	split_sreg_range(0X103792,"T",0X1,3);
	split_sreg_range(0X1037C2,"T",0X1,3);
	split_sreg_range(0X1037DE,"T",0X1,3);
	split_sreg_range(0X1037F2,"T",0X1,3);
	split_sreg_range(0X1037FC,"T",0X1,3);
	split_sreg_range(0X103820,"T",0X1,3);
	split_sreg_range(0X103826,"T",0X1,3);
	split_sreg_range(0X103830,"T",0X1,3);
	split_sreg_range(0X103840,"T",0X1,3);
	split_sreg_range(0X103842,"T",0X1,3);
	split_sreg_range(0X103886,"T",0X1,3);
	split_sreg_range(0X103898,"T",0X1,3);
	split_sreg_range(0X1038A4,"T",0X1,3);
	split_sreg_range(0X1038A6,"T",0X1,3);
	split_sreg_range(0X1038AE,"T",0X1,3);
	split_sreg_range(0X1038B0,"T",0X1,3);
	split_sreg_range(0X1038B8,"T",0X1,3);
	split_sreg_range(0X1038C2,"T",0X1,3);
	split_sreg_range(0X103A0E,"T",0X1,3);
	split_sreg_range(0X103A18,"T",0X1,3);
	split_sreg_range(0X103A1C,"T",0X1,3);
	split_sreg_range(0X103A22,"T",0X1,3);
	split_sreg_range(0X103A2E,"T",0X1,3);
	split_sreg_range(0X103A32,"T",0X1,3);
	split_sreg_range(0X103A3C,"T",0X1,3);
	split_sreg_range(0X103A56,"T",0X1,3);
	split_sreg_range(0X103B0E,"T",0X1,3);
	split_sreg_range(0X103B54,"T",0X1,3);
	split_sreg_range(0X103B5C,"T",0X1,3);
	split_sreg_range(0X103B5E,"T",0X1,3);
	split_sreg_range(0X103B64,"T",0X1,3);
	split_sreg_range(0X103B86,"T",0X1,3);
	split_sreg_range(0X103BDA,"T",0X1,3);
	split_sreg_range(0X103C0A,"T",0X1,3);
	split_sreg_range(0X103C62,"T",0X1,3);
	split_sreg_range(0X103C64,"T",0X1,3);
	split_sreg_range(0X103C66,"T",0X1,3);
	split_sreg_range(0X103C84,"T",0X1,3);
	split_sreg_range(0X103CA2,"T",0X1,3);
	split_sreg_range(0X103CC0,"T",0X1,3);
	split_sreg_range(0X103CF2,"T",0X1,3);
	split_sreg_range(0X103D0A,"T",0X1,3);
	split_sreg_range(0X103D52,"T",0X1,3);
	split_sreg_range(0X103DC0,"T",0X1,3);
	split_sreg_range(0X103DFC,"T",0X1,3);
	split_sreg_range(0X103E06,"T",0X1,3);
	split_sreg_range(0X103E28,"T",0X1,3);
	split_sreg_range(0X103E2C,"T",0X1,3);
	split_sreg_range(0X103E64,"T",0X1,3);
	split_sreg_range(0X103E72,"T",0X1,3);
	split_sreg_range(0X103EA6,"T",0X1,3);
	split_sreg_range(0X103EAE,"T",0X1,3);
	split_sreg_range(0X103EB8,"T",0X1,3);
	split_sreg_range(0X103F0A,"T",0X1,3);
	split_sreg_range(0X103F12,"T",0X1,3);
	split_sreg_range(0X103F16,"T",0X1,3);
	split_sreg_range(0X103F4C,"T",0X1,3);
	split_sreg_range(0X103F90,"T",0X1,3);
	split_sreg_range(0X103F9A,"T",0X1,3);
	split_sreg_range(0X103FF4,"T",0X1,3);
	split_sreg_range(0X104040,"T",0X1,3);
	split_sreg_range(0X104048,"T",0X1,3);
	split_sreg_range(0X10404C,"T",0X1,3);
	split_sreg_range(0X10405E,"T",0X1,3);
	split_sreg_range(0X104062,"T",0X1,3);
	split_sreg_range(0X104074,"T",0X1,3);
	split_sreg_range(0X104080,"T",0X1,3);
	split_sreg_range(0X10408C,"T",0X1,3);
	split_sreg_range(0X104098,"T",0X1,3);
	split_sreg_range(0X1040A8,"T",0X1,3);
	split_sreg_range(0X1040AA,"T",0X1,3);
	split_sreg_range(0X1040B8,"T",0X1,3);
	split_sreg_range(0X1040C8,"T",0X1,3);
	split_sreg_range(0X1040FC,"T",0X1,3);
	split_sreg_range(0X10410A,"T",0X1,3);
	split_sreg_range(0X104152,"T",0X1,3);
	split_sreg_range(0X10416A,"T",0X1,3);
	split_sreg_range(0X104170,"T",0X1,3);
	split_sreg_range(0X104194,"T",0X1,3);
	split_sreg_range(0X104196,"T",0X1,3);
	split_sreg_range(0X10419C,"T",0X1,3);
	split_sreg_range(0X1041A0,"T",0X1,3);
	split_sreg_range(0X1041B0,"T",0X1,3);
	split_sreg_range(0X1041B4,"T",0X1,3);
	split_sreg_range(0X1041C2,"T",0X1,3);
	split_sreg_range(0X1041C4,"T",0X1,3);
	split_sreg_range(0X1041C8,"T",0X1,3);
	split_sreg_range(0X1041D4,"T",0X1,3);
	split_sreg_range(0X1041E4,"T",0X1,3);
	split_sreg_range(0X1041FA,"T",0X1,3);
	split_sreg_range(0X1041FC,"T",0X1,3);
	split_sreg_range(0X104202,"T",0X1,3);
	split_sreg_range(0X10421C,"T",0X1,3);
	split_sreg_range(0X10427C,"T",0X1,3);
	split_sreg_range(0X104282,"T",0X1,3);
	split_sreg_range(0X1042F4,"T",0X1,3);
	split_sreg_range(0X1042FE,"T",0X1,3);
	split_sreg_range(0X104304,"T",0X1,3);
	split_sreg_range(0X104316,"T",0X1,3);
	split_sreg_range(0X10431C,"T",0X1,3);
	split_sreg_range(0X104344,"T",0X1,3);
	split_sreg_range(0X104350,"T",0X1,3);
	split_sreg_range(0X104356,"T",0X1,3);
	split_sreg_range(0X104372,"T",0X1,3);
	split_sreg_range(0X104386,"T",0X1,3);
	split_sreg_range(0X10438A,"T",0X1,3);
	split_sreg_range(0X104394,"T",0X1,3);
	split_sreg_range(0X10439A,"T",0X1,3);
	split_sreg_range(0X1043A2,"T",0X1,3);
	split_sreg_range(0X1043A8,"T",0X1,3);
	split_sreg_range(0X1043B6,"T",0X1,3);
	split_sreg_range(0X1043BA,"T",0X1,3);
	split_sreg_range(0X1043BC,"T",0X1,3);
	split_sreg_range(0X1043C8,"T",0X1,3);
	split_sreg_range(0X104408,"T",0X1,3);
	split_sreg_range(0X10440C,"T",0X1,3);
	split_sreg_range(0X10441C,"T",0X1,3);
	split_sreg_range(0X10441E,"T",0X1,3);
	split_sreg_range(0X104426,"T",0X1,3);
	split_sreg_range(0X10442C,"T",0X1,3);
	split_sreg_range(0X104454,"T",0X1,3);
	split_sreg_range(0X104458,"T",0X1,3);
	split_sreg_range(0X104468,"T",0X1,3);
	split_sreg_range(0X10446C,"T",0X1,3);
	split_sreg_range(0X104470,"T",0X1,3);
	split_sreg_range(0X1044CA,"T",0X1,3);
	split_sreg_range(0X1044E8,"T",0X1,3);
	split_sreg_range(0X1044EC,"T",0X1,3);
	split_sreg_range(0X1044F2,"T",0X1,3);
	split_sreg_range(0X104516,"T",0X1,3);
	split_sreg_range(0X10452E,"T",0X1,3);
	split_sreg_range(0X10453A,"T",0X1,3);
	split_sreg_range(0X104544,"T",0X1,3);
	split_sreg_range(0X104552,"T",0X1,3);
	split_sreg_range(0X10458A,"T",0X1,3);
	split_sreg_range(0X104592,"T",0X1,3);
	split_sreg_range(0X104594,"T",0X1,3);
	split_sreg_range(0X104596,"T",0X1,3);
	split_sreg_range(0X10459E,"T",0X1,3);
	split_sreg_range(0X1045A2,"T",0X1,3);
	split_sreg_range(0X104604,"T",0X1,3);
	split_sreg_range(0X10460C,"T",0X1,3);
	split_sreg_range(0X104680,"T",0X1,3);
	split_sreg_range(0X104682,"T",0X1,3);
	split_sreg_range(0X1046AA,"T",0X1,3);
	split_sreg_range(0X1046AE,"T",0X1,3);
	split_sreg_range(0X1046BC,"T",0X1,3);
	split_sreg_range(0X1046C8,"T",0X1,3);
	split_sreg_range(0X1046D0,"T",0X1,3);
	split_sreg_range(0X104702,"T",0X1,3);
	split_sreg_range(0X104728,"T",0X1,3);
	split_sreg_range(0X104758,"T",0X1,3);
	split_sreg_range(0X104764,"T",0X1,3);
	split_sreg_range(0X104766,"T",0X1,3);
	split_sreg_range(0X10477C,"T",0X1,3);
	split_sreg_range(0X104792,"T",0X1,3);
	split_sreg_range(0X1047BC,"T",0X1,3);
	split_sreg_range(0X1047C0,"T",0X1,3);
	split_sreg_range(0X1047E6,"T",0X1,3);
	split_sreg_range(0X104800,"T",0X1,3);
	split_sreg_range(0X104868,"T",0X1,3);
	split_sreg_range(0X10486A,"T",0X1,3);
	split_sreg_range(0X1048CA,"T",0X1,3);
	split_sreg_range(0X1048E2,"T",0X1,3);
	split_sreg_range(0X104912,"T",0X1,3);
	split_sreg_range(0X10492E,"T",0X1,3);
	split_sreg_range(0X104930,"T",0X1,3);
	split_sreg_range(0X104932,"T",0X1,3);
	split_sreg_range(0X10494E,"T",0X1,3);
	split_sreg_range(0X10496A,"T",0X1,3);
	split_sreg_range(0X10496C,"T",0X1,3);
	split_sreg_range(0X104972,"T",0X1,3);
	split_sreg_range(0X1049A8,"T",0X1,3);
	split_sreg_range(0X1049B0,"T",0X1,3);
	split_sreg_range(0X1049B4,"T",0X1,3);
	split_sreg_range(0X1049B8,"T",0X1,3);
	split_sreg_range(0X1049EC,"T",0X1,3);
	split_sreg_range(0X1049EE,"T",0X1,3);
	split_sreg_range(0X1049F4,"T",0X1,3);
	split_sreg_range(0X104A5C,"T",0X1,3);
	split_sreg_range(0X104A94,"T",0X1,3);
	split_sreg_range(0X104A9E,"T",0X1,3);
	split_sreg_range(0X104AA8,"T",0X1,3);
	split_sreg_range(0X104AAC,"T",0X1,3);
	split_sreg_range(0X104AB8,"T",0X1,3);
	split_sreg_range(0X104B1C,"T",0X1,3);
	split_sreg_range(0X104B3A,"T",0X1,3);
	split_sreg_range(0X104B40,"T",0X1,3);
	split_sreg_range(0X104B6A,"T",0X1,3);
	split_sreg_range(0X104B98,"T",0X1,3);
	split_sreg_range(0X104BA8,"T",0X1,3);
	split_sreg_range(0X104BB8,"T",0X1,3);
	split_sreg_range(0X104BD6,"T",0X1,3);
	split_sreg_range(0X104C2C,"T",0X1,3);
	split_sreg_range(0X104C36,"T",0X1,3);
	split_sreg_range(0X104C46,"T",0X1,3);
	split_sreg_range(0X104C4C,"T",0X1,3);
	split_sreg_range(0X104C50,"T",0X1,3);
	split_sreg_range(0X104C52,"T",0X1,3);
	split_sreg_range(0X104C54,"T",0X1,3);
	split_sreg_range(0X104CAE,"T",0X1,3);
	split_sreg_range(0X104CCC,"T",0X1,3);
	split_sreg_range(0X104CD2,"T",0X1,3);
	split_sreg_range(0X104CD6,"T",0X1,3);
	split_sreg_range(0X104CE6,"T",0X1,3);
	split_sreg_range(0X104CF6,"T",0X1,3);
	split_sreg_range(0X104D00,"T",0X1,3);
	split_sreg_range(0X104D18,"T",0X1,3);
	split_sreg_range(0X104D28,"T",0X1,3);
	split_sreg_range(0X104D2C,"T",0X1,3);
	split_sreg_range(0X104D34,"T",0X1,3);
	split_sreg_range(0X104D36,"T",0X1,3);
	split_sreg_range(0X104D3A,"T",0X1,3);
	split_sreg_range(0X104D4A,"T",0X1,3);
	split_sreg_range(0X104D60,"T",0X1,3);
	split_sreg_range(0X104D76,"T",0X1,3);
	split_sreg_range(0X104D78,"T",0X1,3);
	split_sreg_range(0X104D7E,"T",0X1,3);
	split_sreg_range(0X104D82,"T",0X1,3);
	split_sreg_range(0X104DAC,"T",0X1,3);
	split_sreg_range(0X104DEA,"T",0X1,3);
	split_sreg_range(0X104DF6,"T",0X1,3);
	split_sreg_range(0X104E0E,"T",0X1,3);
	split_sreg_range(0X104E32,"T",0X1,3);
	split_sreg_range(0X104E48,"T",0X1,3);
	split_sreg_range(0X104E64,"T",0X1,3);
	split_sreg_range(0X104E66,"T",0X1,3);
	split_sreg_range(0X104E6A,"T",0X1,3);
	split_sreg_range(0X104E6E,"T",0X1,3);
	split_sreg_range(0X104E70,"T",0X1,3);
	split_sreg_range(0X104E84,"T",0X1,3);
	split_sreg_range(0X104EA0,"T",0X1,3);
	split_sreg_range(0X104EA2,"T",0X1,3);
	split_sreg_range(0X104EB0,"T",0X1,3);
	split_sreg_range(0X104EB8,"T",0X1,3);
	split_sreg_range(0X104EBC,"T",0X1,3);
	split_sreg_range(0X104ED4,"T",0X1,3);
	split_sreg_range(0X104ED6,"T",0X1,3);
	split_sreg_range(0X104EDA,"T",0X1,3);
	split_sreg_range(0X104EFC,"T",0X1,3);
	split_sreg_range(0X104F74,"T",0X1,3);
	split_sreg_range(0X104F7A,"T",0X1,3);
	split_sreg_range(0X104F86,"T",0X1,3);
	split_sreg_range(0X104F8E,"T",0X1,3);
	split_sreg_range(0X104F92,"T",0X1,3);
	split_sreg_range(0X104F96,"T",0X1,3);
	split_sreg_range(0X104FB4,"T",0X1,3);
	split_sreg_range(0X104FBA,"T",0X1,3);
	split_sreg_range(0X104FE6,"T",0X1,3);
	split_sreg_range(0X104FEA,"T",0X1,3);
	split_sreg_range(0X10500E,"T",0X1,3);
	split_sreg_range(0X10501E,"T",0X1,3);
	split_sreg_range(0X10502E,"T",0X1,3);
	split_sreg_range(0X10504C,"T",0X1,3);
	split_sreg_range(0X10508C,"T",0X1,3);
	split_sreg_range(0X105094,"T",0X1,3);
	split_sreg_range(0X1050A8,"T",0X1,3);
	split_sreg_range(0X1050AE,"T",0X1,3);
	split_sreg_range(0X1050C6,"T",0X1,3);
	split_sreg_range(0X1050C8,"T",0X1,3);
	split_sreg_range(0X1050D4,"T",0X1,3);
	split_sreg_range(0X1050E4,"T",0X1,3);
	split_sreg_range(0X1050E6,"T",0X1,3);
	split_sreg_range(0X1050E8,"T",0X1,3);
	split_sreg_range(0X1050F4,"T",0X1,3);
	split_sreg_range(0X105104,"T",0X1,3);
	split_sreg_range(0X105108,"T",0X1,3);
	split_sreg_range(0X10512E,"T",0X1,3);
	split_sreg_range(0X10514A,"T",0X1,3);
	split_sreg_range(0X105160,"T",0X1,3);
	split_sreg_range(0X105162,"T",0X1,3);
	split_sreg_range(0X10517C,"T",0X1,3);
	split_sreg_range(0X105182,"T",0X1,3);
	split_sreg_range(0X1051B0,"T",0X1,3);
	split_sreg_range(0X1051BA,"T",0X1,3);
	split_sreg_range(0X1051BC,"T",0X1,3);
	split_sreg_range(0X1051BE,"T",0X1,3);
	split_sreg_range(0X1051C4,"T",0X1,3);
	split_sreg_range(0X1051EA,"T",0X1,3);
	split_sreg_range(0X1051F8,"T",0X1,3);
	split_sreg_range(0X105222,"T",0X1,3);
	split_sreg_range(0X10522E,"T",0X1,3);
	split_sreg_range(0X10524E,"T",0X1,3);
	split_sreg_range(0X105258,"T",0X1,3);
	split_sreg_range(0X105272,"T",0X1,3);
	split_sreg_range(0X10529C,"T",0X1,3);
	split_sreg_range(0X1052B4,"T",0X1,3);
	split_sreg_range(0X1052C2,"T",0X1,3);
	split_sreg_range(0X1052E0,"T",0X1,3);
	split_sreg_range(0X1052E4,"T",0X1,3);
	split_sreg_range(0X1052F0,"T",0X1,3);
	split_sreg_range(0X105318,"T",0X1,3);
	split_sreg_range(0X105324,"T",0X1,3);
	split_sreg_range(0X105328,"T",0X1,3);
	split_sreg_range(0X10532E,"T",0X1,3);
	split_sreg_range(0X105344,"T",0X1,3);
	split_sreg_range(0X10534E,"T",0X1,3);
	split_sreg_range(0X105354,"T",0X1,3);
	split_sreg_range(0X10535A,"T",0X1,3);
	split_sreg_range(0X105368,"T",0X1,3);
	split_sreg_range(0X105374,"T",0X1,3);
	split_sreg_range(0X1053A4,"T",0X1,3);
	split_sreg_range(0X1053AE,"T",0X1,3);
	split_sreg_range(0X1053D8,"T",0X1,3);
	split_sreg_range(0X1053F0,"T",0X1,3);
	split_sreg_range(0X1053F8,"T",0X1,3);
	split_sreg_range(0X1053FE,"T",0X1,3);
	split_sreg_range(0X10540A,"T",0X1,3);
	split_sreg_range(0X105424,"T",0X1,3);
	split_sreg_range(0X105432,"T",0X1,3);
	split_sreg_range(0X105438,"T",0X1,3);
	split_sreg_range(0X10544E,"T",0X1,3);
	split_sreg_range(0X10545E,"T",0X1,3);
	split_sreg_range(0X105462,"T",0X1,3);
	split_sreg_range(0X105480,"T",0X1,3);
	split_sreg_range(0X105482,"T",0X1,3);
	split_sreg_range(0X105488,"T",0X1,3);
	split_sreg_range(0X1054AC,"T",0X1,3);
	split_sreg_range(0X1054CC,"T",0X1,3);
	split_sreg_range(0X1054F8,"T",0X1,3);
	split_sreg_range(0X10551E,"T",0X1,3);
	split_sreg_range(0X105524,"T",0X1,3);
	split_sreg_range(0X10552E,"T",0X1,3);
	split_sreg_range(0X105538,"T",0X1,3);
	split_sreg_range(0X10553E,"T",0X1,3);
	split_sreg_range(0X105546,"T",0X1,3);
	split_sreg_range(0X105554,"T",0X1,3);
	split_sreg_range(0X105556,"T",0X1,3);
	split_sreg_range(0X10555C,"T",0X1,3);
	split_sreg_range(0X10556A,"T",0X1,3);
	split_sreg_range(0X105574,"T",0X1,3);
	split_sreg_range(0X105582,"T",0X1,3);
	split_sreg_range(0X10558A,"T",0X1,3);
	split_sreg_range(0X105598,"T",0X1,3);
	split_sreg_range(0X1055AC,"T",0X1,3);
	split_sreg_range(0X1055D4,"T",0X1,3);
	split_sreg_range(0X1055E6,"T",0X1,3);
	split_sreg_range(0X1055F6,"T",0X1,3);
	split_sreg_range(0X10560A,"T",0X1,3);
	split_sreg_range(0X105612,"T",0X1,3);
	split_sreg_range(0X10562A,"T",0X1,3);
	split_sreg_range(0X10562E,"T",0X1,3);
	split_sreg_range(0X10563E,"T",0X1,3);
	split_sreg_range(0X105646,"T",0X1,3);
	split_sreg_range(0X105650,"T",0X1,3);
	split_sreg_range(0X105654,"T",0X1,3);
	split_sreg_range(0X105658,"T",0X1,3);
	split_sreg_range(0X105660,"T",0X1,3);
	split_sreg_range(0X105670,"T",0X1,3);
	split_sreg_range(0X10567C,"T",0X1,3);
	split_sreg_range(0X105684,"T",0X1,3);
	split_sreg_range(0X10568E,"T",0X1,3);
	split_sreg_range(0X105696,"T",0X1,3);
	split_sreg_range(0X10569E,"T",0X1,3);
	split_sreg_range(0X1056A8,"T",0X1,3);
	split_sreg_range(0X1056B0,"T",0X1,3);
	split_sreg_range(0X1056B8,"T",0X1,3);
	split_sreg_range(0X1056CA,"T",0X1,3);
	split_sreg_range(0X1056DE,"T",0X1,3);
	split_sreg_range(0X1056E2,"T",0X1,3);
	split_sreg_range(0X1056E8,"T",0X1,3);
	split_sreg_range(0X105702,"T",0X1,3);
	split_sreg_range(0X105708,"T",0X1,3);
	split_sreg_range(0X10570C,"T",0X1,3);
	split_sreg_range(0X105712,"T",0X1,3);
	split_sreg_range(0X10571C,"T",0X1,3);
	split_sreg_range(0X10572E,"T",0X1,3);
	split_sreg_range(0X105736,"T",0X1,3);
	split_sreg_range(0X105746,"T",0X1,3);
	split_sreg_range(0X10574E,"T",0X1,3);
	split_sreg_range(0X105752,"T",0X1,3);
	split_sreg_range(0X10576A,"T",0X1,3);
	split_sreg_range(0X10576C,"T",0X1,3);
	split_sreg_range(0X105796,"T",0X1,3);
	split_sreg_range(0X1057A4,"T",0X1,3);
	split_sreg_range(0X1057BE,"T",0X1,3);
	split_sreg_range(0X1057C0,"T",0X1,3);
	split_sreg_range(0X1057D0,"T",0X1,3);
	split_sreg_range(0X1057D6,"T",0X1,3);
	split_sreg_range(0X1057E0,"T",0X1,3);
	split_sreg_range(0X1057E6,"T",0X1,3);
	split_sreg_range(0X1057E8,"T",0X1,3);
	split_sreg_range(0X1057F2,"T",0X1,3);
	split_sreg_range(0X1057FE,"T",0X1,3);
	split_sreg_range(0X105806,"T",0X1,3);
	split_sreg_range(0X10580A,"T",0X1,3);
	split_sreg_range(0X105824,"T",0X1,3);
	split_sreg_range(0X10584E,"T",0X1,3);
	split_sreg_range(0X10585C,"T",0X1,3);
	split_sreg_range(0X105870,"T",0X1,3);
	split_sreg_range(0X105872,"T",0X1,3);
	split_sreg_range(0X105878,"T",0X1,3);
	split_sreg_range(0X10587A,"T",0X1,3);
	split_sreg_range(0X105880,"T",0X1,3);
	split_sreg_range(0X105886,"T",0X1,3);
	split_sreg_range(0X105892,"T",0X1,3);
	split_sreg_range(0X1058AE,"T",0X1,3);
	split_sreg_range(0X1058B6,"T",0X1,3);
	split_sreg_range(0X1058C6,"T",0X1,3);
	split_sreg_range(0X105900,"T",0X1,3);
	split_sreg_range(0X105906,"T",0X1,3);
	split_sreg_range(0X10590C,"T",0X1,3);
	split_sreg_range(0X105918,"T",0X1,3);
	split_sreg_range(0X10592A,"T",0X1,3);
	split_sreg_range(0X105940,"T",0X1,3);
	split_sreg_range(0X105942,"T",0X1,3);
	split_sreg_range(0X105946,"T",0X1,3);
	split_sreg_range(0X105954,"T",0X1,3);
	split_sreg_range(0X105962,"T",0X1,3);
	split_sreg_range(0X1059E0,"T",0X1,3);
	split_sreg_range(0X1059E6,"T",0X1,3);
	split_sreg_range(0X105A54,"T",0X1,3);
	split_sreg_range(0X105A94,"T",0X1,3);
	split_sreg_range(0X105AC4,"T",0X1,3);
	split_sreg_range(0X105B06,"T",0X1,3);
	split_sreg_range(0X105B78,"T",0X1,3);
	split_sreg_range(0X105C28,"T",0X1,3);
	split_sreg_range(0X105C70,"T",0X1,3);
	split_sreg_range(0X105E38,"T",0X1,3);
	split_sreg_range(0X105F94,"T",0X1,3);
	split_sreg_range(0X10613E,"T",0X1,3);
	split_sreg_range(0X10627C,"T",0X1,3);
	split_sreg_range(0X106404,"T",0X1,3);
	split_sreg_range(0X106436,"T",0X1,3);
	split_sreg_range(0X10645A,"T",0X1,3);
	split_sreg_range(0X10646A,"T",0X1,3);
	split_sreg_range(0X10647E,"T",0X1,3);
	split_sreg_range(0X1064E4,"T",0X1,3);
	split_sreg_range(0X106526,"T",0X1,3);
	split_sreg_range(0X106558,"T",0X1,3);
	split_sreg_range(0X10655E,"T",0X1,3);
	split_sreg_range(0X10656C,"T",0X1,3);
	split_sreg_range(0X106580,"T",0X1,3);
	split_sreg_range(0X106596,"T",0X1,3);
	split_sreg_range(0X10659E,"T",0X1,3);
	split_sreg_range(0X1065AC,"T",0X1,3);
	split_sreg_range(0X1065BA,"T",0X1,3);
	split_sreg_range(0X1065C4,"T",0X1,3);
	split_sreg_range(0X1065EC,"T",0X1,3);
	split_sreg_range(0X106670,"T",0X1,3);
	split_sreg_range(0X106672,"T",0X1,3);
	split_sreg_range(0X106674,"T",0X1,3);
	split_sreg_range(0X1066A8,"T",0X1,3);
	split_sreg_range(0X106818,"T",0X1,3);
	split_sreg_range(0X106852,"T",0X1,3);
	split_sreg_range(0X106882,"T",0X1,3);
	split_sreg_range(0X1068C4,"T",0X1,3);
	split_sreg_range(0X1068CC,"T",0X1,3);
	split_sreg_range(0X1068CE,"T",0X1,3);
	split_sreg_range(0X106904,"T",0X1,3);
	split_sreg_range(0X106934,"T",0X1,3);
	split_sreg_range(0X10693C,"T",0X1,3);
	split_sreg_range(0X106942,"T",0X1,3);
	split_sreg_range(0X106982,"T",0X1,3);
	split_sreg_range(0X10698C,"T",0X1,3);
	split_sreg_range(0X106996,"T",0X1,3);
	split_sreg_range(0X1069E4,"T",0X1,3);
	split_sreg_range(0X1069F2,"T",0X1,3);
	split_sreg_range(0X106A00,"T",0X1,3);
	split_sreg_range(0X106A12,"T",0X1,3);
	split_sreg_range(0X106A1E,"T",0X1,3);
	split_sreg_range(0X106A76,"T",0X1,3);
	split_sreg_range(0X106A96,"T",0X1,3);
	split_sreg_range(0X106AA0,"T",0X1,3);
	split_sreg_range(0X106AE4,"T",0X1,3);
	split_sreg_range(0X106B10,"T",0X1,3);
	split_sreg_range(0X106B26,"T",0X1,3);
	split_sreg_range(0X106B4E,"T",0X1,3);
	split_sreg_range(0X106B54,"T",0X1,3);
	split_sreg_range(0X106B5C,"T",0X1,3);
	split_sreg_range(0X106B6E,"T",0X1,3);
	split_sreg_range(0X106B7C,"T",0X1,3);
	split_sreg_range(0X106B9A,"T",0X1,3);
	split_sreg_range(0X106C0A,"T",0X1,3);
	split_sreg_range(0X106C2C,"T",0X1,3);
	split_sreg_range(0X106C5E,"T",0X1,3);
	split_sreg_range(0X106C70,"T",0X1,3);
	split_sreg_range(0X106C72,"T",0X1,3);
	split_sreg_range(0X106C78,"T",0X1,3);
	split_sreg_range(0X106D9E,"T",0X1,3);
	split_sreg_range(0X106DC2,"T",0X1,3);
	split_sreg_range(0X106DDC,"T",0X1,3);
	split_sreg_range(0X106DDE,"T",0X1,3);
	split_sreg_range(0X106E0E,"T",0X1,3);
	split_sreg_range(0X106E12,"T",0X1,3);
	split_sreg_range(0X106E6A,"T",0X1,3);
	split_sreg_range(0X106E6C,"T",0X1,3);
	split_sreg_range(0X106E7E,"T",0X1,3);
	split_sreg_range(0X106F18,"T",0X1,3);
	split_sreg_range(0X106F26,"T",0X1,3);
	split_sreg_range(0X106FB4,"T",0X1,3);
	split_sreg_range(0X1070CA,"T",0X1,3);
	split_sreg_range(0X1070EC,"T",0X1,3);
	split_sreg_range(0X107102,"T",0X1,3);
	split_sreg_range(0X10712C,"T",0X1,3);
	split_sreg_range(0X107146,"T",0X1,3);
	split_sreg_range(0X107148,"T",0X1,3);
	split_sreg_range(0X107154,"T",0X1,3);
	split_sreg_range(0X10715A,"T",0X1,3);
	split_sreg_range(0X10715E,"T",0X1,3);
	split_sreg_range(0X107166,"T",0X1,3);
	split_sreg_range(0X107168,"T",0X1,3);
	split_sreg_range(0X107184,"T",0X1,3);
	split_sreg_range(0X10718E,"T",0X1,3);
	split_sreg_range(0X1071A0,"T",0X1,3);
	split_sreg_range(0X1071A4,"T",0X1,3);
	split_sreg_range(0X1071B4,"T",0X1,3);
	split_sreg_range(0X1071B8,"T",0X1,3);
	split_sreg_range(0X1071CA,"T",0X1,3);
	split_sreg_range(0X1071D0,"T",0X1,3);
	split_sreg_range(0X1071E0,"T",0X1,3);
	split_sreg_range(0X1071FE,"T",0X1,3);
	split_sreg_range(0X10721C,"T",0X1,3);
	split_sreg_range(0X10722C,"T",0X1,3);
	split_sreg_range(0X10722E,"T",0X1,3);
	split_sreg_range(0X107234,"T",0X1,3);
	split_sreg_range(0X107244,"T",0X1,3);
	split_sreg_range(0X107296,"T",0X1,3);
	split_sreg_range(0X10729E,"T",0X1,3);
	split_sreg_range(0X1072A4,"T",0X1,3);
	split_sreg_range(0X1072BA,"T",0X1,3);
	split_sreg_range(0X1072C4,"T",0X1,3);
	split_sreg_range(0X1072CE,"T",0X1,3);
	split_sreg_range(0X1072D0,"T",0X1,3);
	split_sreg_range(0X1072FE,"T",0X1,3);
	split_sreg_range(0X10736A,"T",0X1,3);
	split_sreg_range(0X10738A,"T",0X1,3);
	split_sreg_range(0X1073A6,"T",0X1,3);
	split_sreg_range(0X1073AC,"T",0X1,3);
	split_sreg_range(0X1073BA,"T",0X1,3);
	split_sreg_range(0X1073C8,"T",0X1,3);
	split_sreg_range(0X1073CA,"T",0X1,3);
	split_sreg_range(0X1073CC,"T",0X1,3);
	split_sreg_range(0X1073D2,"T",0X1,3);
	split_sreg_range(0X107400,"T",0X1,3);
	split_sreg_range(0X107410,"T",0X1,3);
	split_sreg_range(0X10741C,"T",0X1,3);
	split_sreg_range(0X10741E,"T",0X1,3);
	split_sreg_range(0X10748A,"T",0X1,3);
	split_sreg_range(0X107494,"T",0X1,3);
	split_sreg_range(0X1074BC,"T",0X1,3);
	split_sreg_range(0X1074C8,"T",0X1,3);
	split_sreg_range(0X1074CE,"T",0X1,3);
	split_sreg_range(0X1074DA,"T",0X1,3);
	split_sreg_range(0X1074DE,"T",0X1,3);
	split_sreg_range(0X107510,"T",0X1,3);
	split_sreg_range(0X107518,"T",0X1,3);
	split_sreg_range(0X107528,"T",0X1,3);
	split_sreg_range(0X10752A,"T",0X1,3);
	split_sreg_range(0X10752C,"T",0X1,3);
	split_sreg_range(0X10754E,"T",0X1,3);
	split_sreg_range(0X107574,"T",0X1,3);
	split_sreg_range(0X1075DA,"T",0X1,3);
	split_sreg_range(0X107604,"T",0X1,3);
	split_sreg_range(0X10764C,"T",0X1,3);
	split_sreg_range(0X10764E,"T",0X1,3);
	split_sreg_range(0X107650,"T",0X1,3);
	split_sreg_range(0X107678,"T",0X1,3);
	split_sreg_range(0X10767C,"T",0X1,3);
	split_sreg_range(0X1076B0,"T",0X1,3);
	split_sreg_range(0X1076C0,"T",0X1,3);
	split_sreg_range(0X1076DC,"T",0X1,3);
	split_sreg_range(0X107708,"T",0X1,3);
	split_sreg_range(0X107710,"T",0X1,3);
	split_sreg_range(0X10772A,"T",0X1,3);
	split_sreg_range(0X10773E,"T",0X1,3);
	split_sreg_range(0X10774A,"T",0X1,3);
	split_sreg_range(0X107758,"T",0X1,3);
	split_sreg_range(0X107768,"T",0X1,3);
	split_sreg_range(0X10776C,"T",0X1,3);
	split_sreg_range(0X107772,"T",0X1,3);
	split_sreg_range(0X107774,"T",0X1,3);
	split_sreg_range(0X10777E,"T",0X1,3);
	split_sreg_range(0X107782,"T",0X1,3);
	split_sreg_range(0X10778C,"T",0X1,3);
	split_sreg_range(0X107794,"T",0X1,3);
	split_sreg_range(0X107798,"T",0X1,3);
	split_sreg_range(0X10779A,"T",0X1,3);
	split_sreg_range(0X10779E,"T",0X1,3);
	split_sreg_range(0X1077A6,"T",0X1,3);
	split_sreg_range(0X1077AA,"T",0X1,3);
	split_sreg_range(0X1077AE,"T",0X1,3);
	split_sreg_range(0X1077B2,"T",0X1,3);
	split_sreg_range(0X1077B4,"T",0X1,3);
	split_sreg_range(0X1077D2,"T",0X1,3);
	split_sreg_range(0X1077D6,"T",0X1,3);
	split_sreg_range(0X1077DA,"T",0X1,3);
	split_sreg_range(0X1077DC,"T",0X1,3);
	split_sreg_range(0X1077DE,"T",0X1,3);
	split_sreg_range(0X1077F4,"T",0X1,3);
	split_sreg_range(0X1077F6,"T",0X1,3);
	split_sreg_range(0X1077FA,"T",0X1,3);
	split_sreg_range(0X107802,"T",0X1,3);
	split_sreg_range(0X10780A,"T",0X1,3);
	split_sreg_range(0X107820,"T",0X1,3);
	split_sreg_range(0X107840,"T",0X1,3);
	split_sreg_range(0X107848,"T",0X1,3);
	split_sreg_range(0X107856,"T",0X1,3);
	split_sreg_range(0X10785C,"T",0X1,3);
	split_sreg_range(0X107860,"T",0X1,3);
	split_sreg_range(0X107886,"T",0X1,3);
	split_sreg_range(0X10788C,"T",0X1,3);
	split_sreg_range(0X1078D0,"T",0X1,3);
	split_sreg_range(0X1078E4,"T",0X1,3);
	split_sreg_range(0X107910,"T",0X1,3);
	split_sreg_range(0X10791A,"T",0X1,3);
	split_sreg_range(0X107922,"T",0X1,3);
	split_sreg_range(0X107924,"T",0X1,3);
	split_sreg_range(0X107936,"T",0X1,3);
	split_sreg_range(0X107950,"T",0X1,3);
	split_sreg_range(0X107970,"T",0X1,3);
	split_sreg_range(0X107974,"T",0X1,3);
	split_sreg_range(0X107988,"T",0X1,3);
	split_sreg_range(0X1079A4,"T",0X1,3);
	split_sreg_range(0X1079A8,"T",0X1,3);
	split_sreg_range(0X1079E8,"T",0X1,3);
	split_sreg_range(0X1079EC,"T",0X1,3);
	split_sreg_range(0X1079F6,"T",0X1,3);
	split_sreg_range(0X1079FE,"T",0X1,3);
	split_sreg_range(0X107A0C,"T",0X1,3);
	split_sreg_range(0X107A14,"T",0X1,3);
	split_sreg_range(0X107A26,"T",0X1,3);
	split_sreg_range(0X107A38,"T",0X1,3);
	split_sreg_range(0X107A3C,"T",0X1,3);
	split_sreg_range(0X107A60,"T",0X1,3);
	split_sreg_range(0X107A70,"T",0X1,3);
	split_sreg_range(0X107A84,"T",0X1,3);
	split_sreg_range(0X107AA8,"T",0X1,3);
	split_sreg_range(0X107ACE,"T",0X1,3);
	split_sreg_range(0X107AEC,"T",0X1,3);
	split_sreg_range(0X107AFA,"T",0X1,3);
	split_sreg_range(0X107B02,"T",0X1,3);
	split_sreg_range(0X107B0C,"T",0X1,3);
	split_sreg_range(0X107B2A,"T",0X1,3);
	split_sreg_range(0X107B38,"T",0X1,3);
	split_sreg_range(0X107B40,"T",0X1,3);
	split_sreg_range(0X107B4C,"T",0X1,3);
	split_sreg_range(0X107B86,"T",0X1,3);
	split_sreg_range(0X107BB8,"T",0X1,3);
	split_sreg_range(0X107BBA,"T",0X1,3);
	split_sreg_range(0X107BBE,"T",0X1,3);
	split_sreg_range(0X107C22,"T",0X1,3);
	split_sreg_range(0X107C38,"T",0X1,3);
	split_sreg_range(0X107C54,"T",0X1,3);
	split_sreg_range(0X107C66,"T",0X1,3);
	split_sreg_range(0X107C8E,"T",0X1,3);
	split_sreg_range(0X107C94,"T",0X1,3);
	split_sreg_range(0X107CA0,"T",0X1,3);
	split_sreg_range(0X107CA8,"T",0X1,3);
	split_sreg_range(0X107CB4,"T",0X1,3);
	split_sreg_range(0X107CB8,"T",0X1,3);
	split_sreg_range(0X107CC0,"T",0X1,3);
	split_sreg_range(0X107CD2,"T",0X1,3);
	split_sreg_range(0X108064,"T",0X1,3);
	split_sreg_range(0X108480,"T",0X1,3);
	split_sreg_range(0X1089DC,"T",0X1,3);
	split_sreg_range(0X109060,"T",0X1,3);
	split_sreg_range(0X109604,"T",0X1,3);
	split_sreg_range(0X109A0C,"T",0X1,3);
	split_sreg_range(0X109E18,"T",0X1,3);
	split_sreg_range(0X10A34C,"T",0X1,3);
	split_sreg_range(0X10A7E8,"T",0X1,3);
	split_sreg_range(0X10ABFC,"T",0X1,3);
	split_sreg_range(0X10B014,"T",0X1,3);
	split_sreg_range(0X10B430,"T",0X1,3);
	split_sreg_range(0X10B864,"T",0X1,3);
	split_sreg_range(0X10BCC8,"T",0X1,3);
	split_sreg_range(0X10C0D4,"T",0X1,3);
	split_sreg_range(0X10C4EC,"T",0X1,3);
	split_sreg_range(0X10C9A0,"T",0X1,3);
	split_sreg_range(0X10CDBC,"T",0X1,3);
	split_sreg_range(0X10D1C4,"T",0X1,3);
	split_sreg_range(0X10D610,"T",0X1,3);
	split_sreg_range(0X10DA88,"T",0X1,3);
	split_sreg_range(0X10DFAC,"T",0X1,3);
	split_sreg_range(0X10E216,"T",0X1,3);
	split_sreg_range(0X10E218,"T",0X1,3);
	split_sreg_range(0X10E310,"T",0X1,3);
	split_sreg_range(0X10E312,"T",0X1,3);
	split_sreg_range(0X10E31A,"T",0X1,3);
	split_sreg_range(0X10E3D4,"T",0X1,3);
	split_sreg_range(0X10E7F6,"T",0X1,3);
	split_sreg_range(0X10E838,"T",0X1,3);
	split_sreg_range(0X10EC8C,"T",0X1,3);
	split_sreg_range(0X10F0C0,"T",0X1,3);
	split_sreg_range(0X10F810,"T",0X1,3);
	split_sreg_range(0X10F81E,"T",0X1,3);
	split_sreg_range(0X10F838,"T",0X1,3);
	split_sreg_range(0X10F88C,"T",0X1,3);
	split_sreg_range(0X10F8A2,"T",0X1,3);
	split_sreg_range(0X10F8E4,"T",0X1,3);
	split_sreg_range(0X10F8E8,"T",0X1,3);
	split_sreg_range(0X10F91E,"T",0X1,3);
	split_sreg_range(0X10F922,"T",0X1,3);
	split_sreg_range(0X10F958,"T",0X1,3);
	split_sreg_range(0X10F95C,"T",0X1,3);
	split_sreg_range(0X10F960,"T",0X1,3);
	split_sreg_range(0X10F978,"T",0X1,3);
	split_sreg_range(0X10F97C,"T",0X1,3);
	split_sreg_range(0X10F97E,"T",0X1,3);
	split_sreg_range(0X10F986,"T",0X1,3);
	split_sreg_range(0X10F9B6,"T",0X1,3);
	split_sreg_range(0X10F9C8,"T",0X1,3);
	split_sreg_range(0X10F9CA,"T",0X1,3);
	split_sreg_range(0X10F9D0,"T",0X1,3);
	split_sreg_range(0X10F9F6,"T",0X1,3);
	split_sreg_range(0X10FA1C,"T",0X1,3);
	split_sreg_range(0X10FA1E,"T",0X1,3);
	split_sreg_range(0X10FA3E,"T",0X1,3);
	split_sreg_range(0X10FA40,"T",0X1,3);
	split_sreg_range(0X10FA60,"T",0X1,3);
	split_sreg_range(0X10FA62,"T",0X1,3);
	split_sreg_range(0X10FA6E,"T",0X1,3);
	split_sreg_range(0X10FA84,"T",0X1,3);
	split_sreg_range(0X10FA96,"T",0X1,3);
	split_sreg_range(0X10FA9C,"T",0X1,3);
	split_sreg_range(0X10FA9E,"T",0X1,3);
	split_sreg_range(0X10FAC2,"T",0X1,3);
	split_sreg_range(0X10FAE0,"T",0X1,3);
	split_sreg_range(0X10FAE8,"T",0X1,3);
	split_sreg_range(0X10FAEE,"T",0X1,3);
	split_sreg_range(0X10FAF0,"T",0X1,3);
	split_sreg_range(0X10FAF2,"T",0X1,3);
	split_sreg_range(0X10FAF6,"T",0X1,3);
	split_sreg_range(0X10FB1A,"T",0X1,3);
	split_sreg_range(0X10FB26,"T",0X1,3);
	split_sreg_range(0X10FB46,"T",0X1,3);
	split_sreg_range(0X10FB52,"T",0X1,3);
	split_sreg_range(0X10FB76,"T",0X1,3);
	split_sreg_range(0X10FB84,"T",0X1,3);
	split_sreg_range(0X10FB94,"T",0X1,3);
	split_sreg_range(0X10FBA6,"T",0X1,3);
	split_sreg_range(0X10FBAC,"T",0X1,3);
	split_sreg_range(0X10FBBC,"T",0X1,3);
	split_sreg_range(0X10FBC0,"T",0X1,3);
	split_sreg_range(0X10FBC4,"T",0X1,3);
	split_sreg_range(0X10FC14,"T",0X1,3);
	split_sreg_range(0X10FC18,"T",0X1,3);
	split_sreg_range(0X10FC2C,"T",0X1,3);
	split_sreg_range(0X10FC48,"T",0X1,3);
	split_sreg_range(0X10FC76,"T",0X1,3);
	split_sreg_range(0X10FC9A,"T",0X1,3);
	split_sreg_range(0X10FC9C,"T",0X1,3);
	split_sreg_range(0X10FCA6,"T",0X1,3);
	split_sreg_range(0X10FCF8,"T",0X1,3);
	split_sreg_range(0X10FD12,"T",0X1,3);
	split_sreg_range(0X10FD1A,"T",0X1,3);
	split_sreg_range(0X10FD22,"T",0X1,3);
	split_sreg_range(0X10FD40,"T",0X1,3);
	split_sreg_range(0X10FD48,"T",0X1,3);
	split_sreg_range(0X10FD50,"T",0X1,3);
	split_sreg_range(0X10FD58,"T",0X1,3);
	split_sreg_range(0X10FD60,"T",0X1,3);
	split_sreg_range(0X10FD68,"T",0X1,3);
	split_sreg_range(0X10FD70,"T",0X1,3);
	split_sreg_range(0X10FD76,"T",0X1,3);
	split_sreg_range(0X10FD86,"T",0X1,3);
	split_sreg_range(0X10FDA0,"T",0X1,3);
	split_sreg_range(0X10FDA8,"T",0X1,3);
	split_sreg_range(0X10FDB0,"T",0X1,3);
	split_sreg_range(0X10FDC0,"T",0X1,3);
	split_sreg_range(0X10FDC2,"T",0X1,3);
	split_sreg_range(0X10FDC4,"T",0X1,3);
	split_sreg_range(0X10FDF2,"T",0X1,3);
	split_sreg_range(0X10FDF4,"T",0X1,3);
	split_sreg_range(0X10FE02,"T",0X1,3);
	split_sreg_range(0X10FE08,"T",0X1,3);
	split_sreg_range(0X10FE96,"T",0X1,3);
	split_sreg_range(0X10FEB2,"T",0X1,3);
	split_sreg_range(0X10FECE,"T",0X1,3);
	split_sreg_range(0X10FEF0,"T",0X1,3);
	split_sreg_range(0X10FEF4,"T",0X1,3);
	split_sreg_range(0X10FEF6,"T",0X1,3);
	split_sreg_range(0X10FF22,"T",0X1,3);
	split_sreg_range(0X10FF30,"T",0X1,3);
	split_sreg_range(0X10FF38,"T",0X1,3);
	split_sreg_range(0X10FF40,"T",0X1,3);
	split_sreg_range(0X10FF70,"T",0X1,3);
	split_sreg_range(0X10FF72,"T",0X1,3);
	split_sreg_range(0X10FF74,"T",0X1,3);
	split_sreg_range(0X10FF76,"T",0X1,3);
	split_sreg_range(0X10FFB4,"T",0X1,3);
	split_sreg_range(0X10FFB6,"T",0X1,3);
	split_sreg_range(0X10FFB8,"T",0X1,3);
	split_sreg_range(0X11000A,"T",0X1,3);
	split_sreg_range(0X11001E,"T",0X1,3);
	split_sreg_range(0X110024,"T",0X1,3);
	split_sreg_range(0X110036,"T",0X1,3);
	split_sreg_range(0X11003E,"T",0X1,3);
	split_sreg_range(0X110054,"T",0X1,3);
	split_sreg_range(0X11007C,"T",0X1,3);
	split_sreg_range(0X110084,"T",0X1,3);
	split_sreg_range(0X11008C,"T",0X1,3);
	split_sreg_range(0X11009C,"T",0X1,3);
	split_sreg_range(0X1100AC,"T",0X1,3);
	split_sreg_range(0X1100B8,"T",0X1,3);
	split_sreg_range(0X1100C0,"T",0X1,3);
	split_sreg_range(0X1100C2,"T",0X1,3);
	split_sreg_range(0X1100C8,"T",0X1,3);
	split_sreg_range(0X1100DC,"T",0X1,3);
	split_sreg_range(0X1100E0,"T",0X1,3);
	split_sreg_range(0X110106,"T",0X1,3);
	split_sreg_range(0X11012E,"T",0X1,3);
	split_sreg_range(0X11013E,"T",0X1,3);
	split_sreg_range(0X11014C,"T",0X1,3);
	split_sreg_range(0X11014E,"T",0X1,3);
	split_sreg_range(0X110166,"T",0X1,3);
	split_sreg_range(0X11016A,"T",0X1,3);
	split_sreg_range(0X110170,"T",0X1,3);
	split_sreg_range(0X11017C,"T",0X1,3);
	split_sreg_range(0X110188,"T",0X1,3);
	split_sreg_range(0X110198,"T",0X1,3);
	split_sreg_range(0X1101C4,"T",0X1,3);
	split_sreg_range(0X1101C6,"T",0X1,3);
	split_sreg_range(0X1101E6,"T",0X1,3);
	split_sreg_range(0X110214,"T",0X1,3);
	split_sreg_range(0X110224,"T",0X1,3);
	split_sreg_range(0X110226,"T",0X1,3);
	split_sreg_range(0X1102CA,"T",0X1,3);
	split_sreg_range(0X110324,"T",0X1,3);
	split_sreg_range(0X110326,"T",0X1,3);
	split_sreg_range(0X110356,"T",0X1,3);
	split_sreg_range(0X11039A,"T",0X1,3);
	split_sreg_range(0X1103E8,"T",0X1,3);
	split_sreg_range(0X110406,"T",0X1,3);
	split_sreg_range(0X110424,"T",0X1,3);
	split_sreg_range(0X110426,"T",0X1,3);
	split_sreg_range(0X11044E,"T",0X1,3);
	split_sreg_range(0X110452,"T",0X1,3);
	split_sreg_range(0X110470,"T",0X1,3);
	split_sreg_range(0X1104D0,"T",0X1,3);
	split_sreg_range(0X1104D2,"T",0X1,3);
	split_sreg_range(0X1104FC,"T",0X1,3);
	split_sreg_range(0X1105D0,"T",0X1,3);
	split_sreg_range(0X110654,"T",0X1,3);
	split_sreg_range(0X110666,"T",0X1,3);
	split_sreg_range(0X110684,"T",0X1,3);
	split_sreg_range(0X11068E,"T",0X1,3);
	split_sreg_range(0X110694,"T",0X1,3);
	split_sreg_range(0X1106B8,"T",0X1,3);
	split_sreg_range(0X1106C2,"T",0X1,3);
	split_sreg_range(0X1106C8,"T",0X1,3);
	split_sreg_range(0X1106F2,"T",0X1,3);
	split_sreg_range(0X1106FC,"T",0X1,3);
	split_sreg_range(0X110702,"T",0X1,3);
	split_sreg_range(0X110732,"T",0X1,3);
	split_sreg_range(0X11073C,"T",0X1,3);
	split_sreg_range(0X110742,"T",0X1,3);
	split_sreg_range(0X110746,"T",0X1,3);
	split_sreg_range(0X110756,"T",0X1,3);
	split_sreg_range(0X11076A,"T",0X1,3);
	split_sreg_range(0X110774,"T",0X1,3);
	split_sreg_range(0X11077A,"T",0X1,3);
	split_sreg_range(0X110780,"T",0X1,3);
	split_sreg_range(0X110784,"T",0X1,3);
	split_sreg_range(0X11078E,"T",0X1,3);
	split_sreg_range(0X11079A,"T",0X1,3);
	split_sreg_range(0X1107D8,"T",0X1,3);
	split_sreg_range(0X1107E8,"T",0X1,3);
	split_sreg_range(0X1107EA,"T",0X1,3);
	split_sreg_range(0X110846,"T",0X1,3);
	split_sreg_range(0X110848,"T",0X1,3);
	split_sreg_range(0X110858,"T",0X1,3);
	split_sreg_range(0X11085A,"T",0X1,3);
	split_sreg_range(0X11086A,"T",0X1,3);
	split_sreg_range(0X11086C,"T",0X1,3);
	split_sreg_range(0X11087C,"T",0X1,3);
	split_sreg_range(0X11087E,"T",0X1,3);
	split_sreg_range(0X11088E,"T",0X1,3);
	split_sreg_range(0X110890,"T",0X1,3);
	split_sreg_range(0X1108A0,"T",0X1,3);
	split_sreg_range(0X1108A2,"T",0X1,3);
	split_sreg_range(0X1108B2,"T",0X1,3);
	split_sreg_range(0X1108B4,"T",0X1,3);
	split_sreg_range(0X1108C4,"T",0X1,3);
	split_sreg_range(0X1108C6,"T",0X1,3);
	split_sreg_range(0X11090E,"T",0X1,3);
	split_sreg_range(0X110916,"T",0X1,3);
	split_sreg_range(0X110938,"T",0X1,3);
	split_sreg_range(0X110972,"T",0X1,3);
	split_sreg_range(0X110976,"T",0X1,3);
	split_sreg_range(0X110978,"T",0X1,3);
	split_sreg_range(0X110990,"T",0X1,3);
	split_sreg_range(0X1109A6,"T",0X1,3);
	split_sreg_range(0X110A1C,"T",0X1,3);
	split_sreg_range(0X110A66,"T",0X1,3);
	split_sreg_range(0X110ACC,"T",0X1,3);
	split_sreg_range(0X110ADA,"T",0X1,3);
	split_sreg_range(0X110AE2,"T",0X1,3);
	split_sreg_range(0X110AFA,"T",0X1,3);
	split_sreg_range(0X110B06,"T",0X1,3);
	split_sreg_range(0X110B0A,"T",0X1,3);
	split_sreg_range(0X110B10,"T",0X1,3);
	split_sreg_range(0X110B28,"T",0X1,3);
	split_sreg_range(0X110B32,"T",0X1,3);
	split_sreg_range(0X110B40,"T",0X1,3);
	split_sreg_range(0X110B50,"T",0X1,3);
	split_sreg_range(0X110B60,"T",0X1,3);
	split_sreg_range(0X110B80,"T",0X1,3);
	split_sreg_range(0X110B82,"T",0X1,3);
	split_sreg_range(0X110B8C,"T",0X1,3);
	split_sreg_range(0X110B8E,"T",0X1,3);
	split_sreg_range(0X110B9E,"T",0X1,3);
	split_sreg_range(0X110BB6,"T",0X1,3);
	split_sreg_range(0X110BE6,"T",0X1,3);
	split_sreg_range(0X110C06,"T",0X1,3);
	split_sreg_range(0X110C12,"T",0X1,3);
	split_sreg_range(0X110C48,"T",0X1,3);
	split_sreg_range(0X110C6C,"T",0X1,3);
	split_sreg_range(0X110C78,"T",0X1,3);
	split_sreg_range(0X110CBE,"T",0X1,3);
	split_sreg_range(0X110CE2,"T",0X1,3);
	split_sreg_range(0X110CEE,"T",0X1,3);
	split_sreg_range(0X110CF8,"T",0X1,3);
	split_sreg_range(0X110CFA,"T",0X1,3);
	split_sreg_range(0X110D00,"T",0X1,3);
	split_sreg_range(0X110D3C,"T",0X1,3);
	split_sreg_range(0X110D4A,"T",0X1,3);
	split_sreg_range(0X110D52,"T",0X1,3);
	split_sreg_range(0X110D7C,"T",0X1,3);
	split_sreg_range(0X110D88,"T",0X1,3);
	split_sreg_range(0X110D92,"T",0X1,3);
	split_sreg_range(0X110DC4,"T",0X1,3);
	split_sreg_range(0X110DEA,"T",0X1,3);
	split_sreg_range(0X110E28,"T",0X1,3);
	split_sreg_range(0X110E96,"T",0X1,3);
	split_sreg_range(0X110EAC,"T",0X1,3);
	split_sreg_range(0X110EC8,"T",0X1,3);
	split_sreg_range(0X110EE0,"T",0X1,3);
	split_sreg_range(0X110F1A,"T",0X1,3);
	split_sreg_range(0X110F7C,"T",0X1,3);
	split_sreg_range(0X110F88,"T",0X1,3);
	split_sreg_range(0X110FA2,"T",0X1,3);
	split_sreg_range(0X110FDE,"T",0X1,3);
	split_sreg_range(0X11104A,"T",0X1,3);
	split_sreg_range(0X11104E,"T",0X1,3);
	split_sreg_range(0X111078,"T",0X1,3);
	split_sreg_range(0X11107A,"T",0X1,3);
	split_sreg_range(0X11108C,"T",0X1,3);
	split_sreg_range(0X1110AE,"T",0X1,3);
	split_sreg_range(0X1110C6,"T",0X1,3);
	split_sreg_range(0X1110D6,"T",0X1,3);
	split_sreg_range(0X1110E2,"T",0X1,3);
	split_sreg_range(0X1110EE,"T",0X1,3);
	split_sreg_range(0X1110F0,"T",0X1,3);
	split_sreg_range(0X111124,"T",0X1,3);
	split_sreg_range(0X11113C,"T",0X1,3);
	split_sreg_range(0X111154,"T",0X1,3);
	split_sreg_range(0X111214,"T",0X1,3);
	split_sreg_range(0X11121C,"T",0X1,3);
	split_sreg_range(0X1112B6,"T",0X1,3);
	split_sreg_range(0X1112B8,"T",0X1,3);
	split_sreg_range(0X1112E6,"T",0X1,3);
	split_sreg_range(0X1112F8,"T",0X1,3);
	split_sreg_range(0X11131A,"T",0X1,3);
	split_sreg_range(0X111320,"T",0X1,3);
	split_sreg_range(0X111324,"T",0X1,3);
	split_sreg_range(0X111330,"T",0X1,3);
	split_sreg_range(0X11139E,"T",0X1,3);
	split_sreg_range(0X1113E0,"T",0X1,3);
	split_sreg_range(0X1113F8,"T",0X1,3);
	split_sreg_range(0X1113FA,"T",0X1,3);
	split_sreg_range(0X11140C,"T",0X1,3);
	split_sreg_range(0X11140E,"T",0X1,3);
	split_sreg_range(0X111426,"T",0X1,3);
	split_sreg_range(0X111428,"T",0X1,3);
	split_sreg_range(0X111436,"T",0X1,3);
	split_sreg_range(0X111446,"T",0X1,3);
	split_sreg_range(0X111454,"T",0X1,3);
	split_sreg_range(0X111460,"T",0X1,3);
	split_sreg_range(0X11146C,"T",0X1,3);
	split_sreg_range(0X111470,"T",0X1,3);
	split_sreg_range(0X111494,"T",0X1,3);
	split_sreg_range(0X1114A4,"T",0X1,3);
	split_sreg_range(0X1114B6,"T",0X1,3);
	split_sreg_range(0X11150C,"T",0X1,3);
	split_sreg_range(0X11152C,"T",0X1,3);
	split_sreg_range(0X111538,"T",0X1,3);
	split_sreg_range(0X11153A,"T",0X1,3);
	split_sreg_range(0X111542,"T",0X1,3);
	split_sreg_range(0X111544,"T",0X1,3);
	split_sreg_range(0X111548,"T",0X1,3);
	split_sreg_range(0X11154C,"T",0X1,3);
	split_sreg_range(0X11156A,"T",0X1,3);
	split_sreg_range(0X1115E0,"T",0X1,3);
	split_sreg_range(0X111654,"T",0X1,3);
	split_sreg_range(0X11165E,"T",0X1,3);
	split_sreg_range(0X111674,"T",0X1,3);
	split_sreg_range(0X11167E,"T",0X1,3);
	split_sreg_range(0X11169A,"T",0X1,3);
	split_sreg_range(0X1116A0,"T",0X1,3);
	split_sreg_range(0X1116B6,"T",0X1,3);
	split_sreg_range(0X1116BC,"T",0X1,3);
	split_sreg_range(0X1116C8,"T",0X1,3);
	split_sreg_range(0X1116E4,"T",0X1,3);
	split_sreg_range(0X111700,"T",0X1,3);
	split_sreg_range(0X11170C,"T",0X1,3);
	split_sreg_range(0X111730,"T",0X1,3);
	split_sreg_range(0X11173C,"T",0X1,3);
	split_sreg_range(0X111752,"T",0X1,3);
	split_sreg_range(0X111772,"T",0X1,3);
	split_sreg_range(0X11177A,"T",0X1,3);
	split_sreg_range(0X111782,"T",0X1,3);
	split_sreg_range(0X111786,"T",0X1,3);
	split_sreg_range(0X111788,"T",0X1,3);
	split_sreg_range(0X11178E,"T",0X1,3);
	split_sreg_range(0X1117B6,"T",0X1,3);
	split_sreg_range(0X1117D6,"T",0X1,3);
	split_sreg_range(0X1117E2,"T",0X1,3);
	split_sreg_range(0X1117F4,"T",0X1,3);
	split_sreg_range(0X111814,"T",0X1,3);
	split_sreg_range(0X111818,"T",0X1,3);
	split_sreg_range(0X111832,"T",0X1,3);
	split_sreg_range(0X111852,"T",0X1,3);
	split_sreg_range(0X111872,"T",0X1,3);
	split_sreg_range(0X111874,"T",0X1,3);
	split_sreg_range(0X111878,"T",0X1,3);
	split_sreg_range(0X111888,"T",0X1,3);
	split_sreg_range(0X11189E,"T",0X1,3);
	split_sreg_range(0X1118A8,"T",0X1,3);
	split_sreg_range(0X1118C2,"T",0X1,3);
	split_sreg_range(0X1118CC,"T",0X1,3);
	split_sreg_range(0X1118E2,"T",0X1,3);
	split_sreg_range(0X1118EC,"T",0X1,3);
	split_sreg_range(0X111906,"T",0X1,3);
	split_sreg_range(0X111908,"T",0X1,3);
	split_sreg_range(0X111922,"T",0X1,3);
	split_sreg_range(0X111936,"T",0X1,3);
	split_sreg_range(0X11193E,"T",0X1,3);
	split_sreg_range(0X111956,"T",0X1,3);
	split_sreg_range(0X11195E,"T",0X1,3);
	split_sreg_range(0X111972,"T",0X1,3);
	split_sreg_range(0X11197A,"T",0X1,3);
	split_sreg_range(0X111992,"T",0X1,3);
	split_sreg_range(0X1119D8,"T",0X1,3);
	split_sreg_range(0X111A12,"T",0X1,3);
	split_sreg_range(0X111A1E,"T",0X1,3);
	split_sreg_range(0X111A22,"T",0X1,3);
	split_sreg_range(0X111AA0,"T",0X1,3);
	split_sreg_range(0X111AA2,"T",0X1,3);
	split_sreg_range(0X111AF2,"T",0X1,3);
	split_sreg_range(0X111AF8,"T",0X1,3);
	split_sreg_range(0X111B04,"T",0X1,3);
	split_sreg_range(0X111B2C,"T",0X1,3);
	split_sreg_range(0X111B2E,"T",0X1,3);
	split_sreg_range(0X111B40,"T",0X1,3);
	split_sreg_range(0X111B42,"T",0X1,3);
	split_sreg_range(0X111B48,"T",0X1,3);
	split_sreg_range(0X111B64,"T",0X1,3);
	split_sreg_range(0X111B78,"T",0X1,3);
	split_sreg_range(0X111B88,"T",0X1,3);
	split_sreg_range(0X111B8C,"T",0X1,3);
	split_sreg_range(0X111B8E,"T",0X1,3);
	split_sreg_range(0X111BA0,"T",0X1,3);
	split_sreg_range(0X111C0C,"T",0X1,3);
	split_sreg_range(0X111C1E,"T",0X1,3);
	split_sreg_range(0X111C2E,"T",0X1,3);
	split_sreg_range(0X111C7E,"T",0X1,3);
	split_sreg_range(0X111C84,"T",0X1,3);
	split_sreg_range(0X111C88,"T",0X1,3);
	split_sreg_range(0X111C8E,"T",0X1,3);
	split_sreg_range(0X111C92,"T",0X1,3);
	split_sreg_range(0X111C94,"T",0X1,3);
	split_sreg_range(0X111CB2,"T",0X1,3);
	split_sreg_range(0X111CBC,"T",0X1,3);
	split_sreg_range(0X111CC2,"T",0X1,3);
	split_sreg_range(0X111CF0,"T",0X1,3);
	split_sreg_range(0X111CF2,"T",0X1,3);
	split_sreg_range(0X111CFC,"T",0X1,3);
	split_sreg_range(0X111D10,"T",0X1,3);
	split_sreg_range(0X111D24,"T",0X1,3);
	split_sreg_range(0X111D2A,"T",0X1,3);
	split_sreg_range(0X111D2E,"T",0X1,3);
	split_sreg_range(0X111D38,"T",0X1,3);
	split_sreg_range(0X111D46,"T",0X1,3);
	split_sreg_range(0X111D58,"T",0X1,3);
	split_sreg_range(0X111D5C,"T",0X1,3);
	split_sreg_range(0X111D80,"T",0X1,3);
	split_sreg_range(0X111D94,"T",0X1,3);
	split_sreg_range(0X111D98,"T",0X1,3);
	split_sreg_range(0X111DA8,"T",0X1,3);
	split_sreg_range(0X111DB8,"T",0X1,3);
	split_sreg_range(0X111DBE,"T",0X1,3);
	split_sreg_range(0X111DC2,"T",0X1,3);
	split_sreg_range(0X111DC4,"T",0X1,3);
	split_sreg_range(0X111E00,"T",0X1,3);
	split_sreg_range(0X111E14,"T",0X1,3);
	split_sreg_range(0X111E32,"T",0X1,3);
	split_sreg_range(0X111E4E,"T",0X1,3);
	split_sreg_range(0X111E6A,"T",0X1,3);
	split_sreg_range(0X111E6E,"T",0X1,3);
	split_sreg_range(0X111E94,"T",0X1,3);
	split_sreg_range(0X111EAC,"T",0X1,3);
	split_sreg_range(0X111EC2,"T",0X1,3);
	split_sreg_range(0X111ED0,"T",0X1,3);
	split_sreg_range(0X111ED8,"T",0X1,3);
	split_sreg_range(0X111EDC,"T",0X1,3);
	split_sreg_range(0X111EE2,"T",0X1,3);
	split_sreg_range(0X111F04,"T",0X1,3);
	split_sreg_range(0X111F1C,"T",0X1,3);
	split_sreg_range(0X111F24,"T",0X1,3);
	split_sreg_range(0X111F26,"T",0X1,3);
	split_sreg_range(0X111F2A,"T",0X1,3);
	split_sreg_range(0X111F58,"T",0X1,3);
	split_sreg_range(0X111F74,"T",0X1,3);
	split_sreg_range(0X111F76,"T",0X1,3);
	split_sreg_range(0X111F7E,"T",0X1,3);
	split_sreg_range(0X111FA6,"T",0X1,3);
	split_sreg_range(0X111FDA,"T",0X1,3);
	split_sreg_range(0X111FE2,"T",0X1,3);
	split_sreg_range(0X111FF4,"T",0X1,3);
	split_sreg_range(0X112000,"T",0X1,3);
	split_sreg_range(0X11200E,"T",0X1,3);
	split_sreg_range(0X11201C,"T",0X1,3);
	split_sreg_range(0X112028,"T",0X1,3);
	split_sreg_range(0X11202C,"T",0X1,3);
	split_sreg_range(0X112030,"T",0X1,3);
	split_sreg_range(0X11205A,"T",0X1,3);
	split_sreg_range(0X112066,"T",0X1,3);
	split_sreg_range(0X11206E,"T",0X1,3);
	split_sreg_range(0X11207C,"T",0X1,3);
	split_sreg_range(0X1120AE,"T",0X1,3);
	split_sreg_range(0X1120B4,"T",0X1,3);
	split_sreg_range(0X1120CA,"T",0X1,3);
	split_sreg_range(0X1120D0,"T",0X1,3);
	split_sreg_range(0X1120EA,"T",0X1,3);
	split_sreg_range(0X1120EC,"T",0X1,3);
	split_sreg_range(0X112112,"T",0X1,3);
	split_sreg_range(0X112140,"T",0X1,3);
	split_sreg_range(0X112168,"T",0X1,3);
	split_sreg_range(0X11216C,"T",0X1,3);
	split_sreg_range(0X11218A,"T",0X1,3);
	split_sreg_range(0X112196,"T",0X1,3);
	split_sreg_range(0X1121A6,"T",0X1,3);
	split_sreg_range(0X1121B2,"T",0X1,3);
	split_sreg_range(0X1121B6,"T",0X1,3);
	split_sreg_range(0X1121C0,"T",0X1,3);
	split_sreg_range(0X1121C6,"T",0X1,3);
	split_sreg_range(0X1121E8,"T",0X1,3);
	split_sreg_range(0X1121EE,"T",0X1,3);
	split_sreg_range(0X1121FE,"T",0X1,3);
	split_sreg_range(0X112200,"T",0X1,3);
	split_sreg_range(0X112220,"T",0X1,3);
	split_sreg_range(0X112248,"T",0X1,3);
	split_sreg_range(0X112262,"T",0X1,3);
	split_sreg_range(0X112270,"T",0X1,3);
	split_sreg_range(0X11227A,"T",0X1,3);
	split_sreg_range(0X112288,"T",0X1,3);
	split_sreg_range(0X11228E,"T",0X1,3);
	split_sreg_range(0X112298,"T",0X1,3);
	split_sreg_range(0X1122A6,"T",0X1,3);
	split_sreg_range(0X1122E0,"T",0X1,3);
	split_sreg_range(0X1122E6,"T",0X1,3);
	split_sreg_range(0X1122E8,"T",0X1,3);
	split_sreg_range(0X112316,"T",0X1,3);
	split_sreg_range(0X11231E,"T",0X1,3);
	split_sreg_range(0X112338,"T",0X1,3);
	split_sreg_range(0X11234E,"T",0X1,3);
	split_sreg_range(0X112350,"T",0X1,3);
	split_sreg_range(0X11237E,"T",0X1,3);
	split_sreg_range(0X112380,"T",0X1,3);
	split_sreg_range(0X1123A8,"T",0X1,3);
	split_sreg_range(0X1123AA,"T",0X1,3);
	split_sreg_range(0X1123E4,"T",0X1,3);
	split_sreg_range(0X1123E6,"T",0X1,3);
	split_sreg_range(0X1123E8,"T",0X1,3);
	split_sreg_range(0X1123F6,"T",0X1,3);
	split_sreg_range(0X112406,"T",0X1,3);
	split_sreg_range(0X112464,"T",0X1,3);
	split_sreg_range(0X11246E,"T",0X1,3);
	split_sreg_range(0X112490,"T",0X1,3);
	split_sreg_range(0X112494,"T",0X1,3);
	split_sreg_range(0X1124B0,"T",0X1,3);
	split_sreg_range(0X1124B4,"T",0X1,3);
	split_sreg_range(0X1124BC,"T",0X1,3);
	split_sreg_range(0X1124BE,"T",0X1,3);
	split_sreg_range(0X1124C8,"T",0X1,3);
	split_sreg_range(0X1124CC,"T",0X1,3);
	split_sreg_range(0X1124D0,"T",0X1,3);
	split_sreg_range(0X1124D8,"T",0X1,3);
	split_sreg_range(0X1124DE,"T",0X1,3);
	split_sreg_range(0X1124E2,"T",0X1,3);
	split_sreg_range(0X112500,"T",0X1,3);
	split_sreg_range(0X112504,"T",0X1,3);
	split_sreg_range(0X1125CE,"T",0X1,3);
	split_sreg_range(0X1125D2,"T",0X1,3);
	split_sreg_range(0X1125E4,"T",0X1,3);
	split_sreg_range(0X1125FA,"T",0X1,3);
	split_sreg_range(0X11260E,"T",0X1,3);
	split_sreg_range(0X11261A,"T",0X1,3);
	split_sreg_range(0X11261C,"T",0X1,3);
	split_sreg_range(0X112620,"T",0X1,3);
	split_sreg_range(0X112650,"T",0X1,3);
	split_sreg_range(0X112654,"T",0X1,3);
	split_sreg_range(0X112658,"T",0X1,3);
	split_sreg_range(0X11265A,"T",0X1,3);
	split_sreg_range(0X11265C,"T",0X1,3);
	split_sreg_range(0X112664,"T",0X1,3);
	split_sreg_range(0X11266C,"T",0X1,3);
	split_sreg_range(0X112672,"T",0X1,3);
	split_sreg_range(0X112674,"T",0X1,3);
	split_sreg_range(0X1126BC,"T",0X1,3);
	split_sreg_range(0X1126BE,"T",0X1,3);
	split_sreg_range(0X1126E0,"T",0X1,3);
	split_sreg_range(0X1126E6,"T",0X1,3);
	split_sreg_range(0X1126E8,"T",0X1,3);
	split_sreg_range(0X112710,"T",0X1,3);
	split_sreg_range(0X112716,"T",0X1,3);
	split_sreg_range(0X11271A,"T",0X1,3);
	split_sreg_range(0X1127A2,"T",0X1,3);
	split_sreg_range(0X1127C4,"T",0X1,3);
	split_sreg_range(0X1127DE,"T",0X1,3);
	split_sreg_range(0X11281E,"T",0X1,3);
	split_sreg_range(0X112822,"T",0X1,3);
	split_sreg_range(0X11284C,"T",0X1,3);
	split_sreg_range(0X11284E,"T",0X1,3);
	split_sreg_range(0X11285C,"T",0X1,3);
	split_sreg_range(0X112878,"T",0X1,3);
	split_sreg_range(0X1128A4,"T",0X1,3);
	split_sreg_range(0X1128A6,"T",0X1,3);
	split_sreg_range(0X1128BC,"T",0X1,3);
	split_sreg_range(0X1128E4,"T",0X1,3);
	split_sreg_range(0X11290C,"T",0X1,3);
	split_sreg_range(0X112914,"T",0X1,3);
	split_sreg_range(0X112924,"T",0X1,3);
	split_sreg_range(0X112936,"T",0X1,3);
	split_sreg_range(0X112942,"T",0X1,3);
	split_sreg_range(0X112972,"T",0X1,3);
	split_sreg_range(0X112976,"T",0X1,3);
	split_sreg_range(0X11297C,"T",0X1,3);
	split_sreg_range(0X112992,"T",0X1,3);
	split_sreg_range(0X112996,"T",0X1,3);
	split_sreg_range(0X1129BE,"T",0X1,3);
	split_sreg_range(0X1129F4,"T",0X1,3);
	split_sreg_range(0X1129FE,"T",0X1,3);
	split_sreg_range(0X112A04,"T",0X1,3);
	split_sreg_range(0X112A18,"T",0X1,3);
	split_sreg_range(0X112A1A,"T",0X1,3);
	split_sreg_range(0X112A2E,"T",0X1,3);
	split_sreg_range(0X112A46,"T",0X1,3);
	split_sreg_range(0X112A48,"T",0X1,3);
	split_sreg_range(0X112A52,"T",0X1,3);
	split_sreg_range(0X112A5E,"T",0X1,3);
	split_sreg_range(0X112A62,"T",0X1,3);
	split_sreg_range(0X112A64,"T",0X1,3);
	split_sreg_range(0X112A94,"T",0X1,3);
	split_sreg_range(0X112AA4,"T",0X1,3);
	split_sreg_range(0X112ABA,"T",0X1,3);
	split_sreg_range(0X112AC4,"T",0X1,3);
	split_sreg_range(0X112ACA,"T",0X1,3);
	split_sreg_range(0X112AD2,"T",0X1,3);
	split_sreg_range(0X112AD4,"T",0X1,3);
	split_sreg_range(0X112ADA,"T",0X1,3);
	split_sreg_range(0X112AFA,"T",0X1,3);
	split_sreg_range(0X112AFE,"T",0X1,3);
	split_sreg_range(0X112B02,"T",0X1,3);
	split_sreg_range(0X112B40,"T",0X1,3);
	split_sreg_range(0X112B4E,"T",0X1,3);
	split_sreg_range(0X112B50,"T",0X1,3);
	split_sreg_range(0X112B8C,"T",0X1,3);
	split_sreg_range(0X112B8E,"T",0X1,3);
	split_sreg_range(0X112B96,"T",0X1,3);
	split_sreg_range(0X112BC8,"T",0X1,3);
	split_sreg_range(0X112BD8,"T",0X1,3);
	split_sreg_range(0X112BE8,"T",0X1,3);
	split_sreg_range(0X112BEC,"T",0X1,3);
	split_sreg_range(0X112BF2,"T",0X1,3);
	split_sreg_range(0X112C38,"T",0X1,3);
	split_sreg_range(0X112C3A,"T",0X1,3);
	split_sreg_range(0X112C40,"T",0X1,3);
	split_sreg_range(0X112CAE,"T",0X1,3);
	split_sreg_range(0X112CD4,"T",0X1,3);
	split_sreg_range(0X112CE4,"T",0X1,3);
	split_sreg_range(0X112D8C,"T",0X1,3);
	split_sreg_range(0X112DAE,"T",0X1,3);
	split_sreg_range(0X112DB4,"T",0X1,3);
	split_sreg_range(0X112DB8,"T",0X1,3);
	split_sreg_range(0X112DBC,"T",0X1,3);
	split_sreg_range(0X112DCC,"T",0X1,3);
	split_sreg_range(0X112E00,"T",0X1,3);
	split_sreg_range(0X112E08,"T",0X1,3);
	split_sreg_range(0X112E0E,"T",0X1,3);
	split_sreg_range(0X112E64,"T",0X1,3);
	split_sreg_range(0X112E66,"T",0X1,3);
	split_sreg_range(0X112E7A,"T",0X1,3);
	split_sreg_range(0X112E82,"T",0X1,3);
	split_sreg_range(0X112E88,"T",0X1,3);
	split_sreg_range(0X112EE4,"T",0X1,3);
	split_sreg_range(0X112EEA,"T",0X1,3);
	split_sreg_range(0X112F18,"T",0X1,3);
	split_sreg_range(0X112F1A,"T",0X1,3);
	split_sreg_range(0X112F34,"T",0X1,3);
	split_sreg_range(0X112F5C,"T",0X1,3);
	split_sreg_range(0X112F60,"T",0X1,3);
	split_sreg_range(0X112F68,"T",0X1,3);
	split_sreg_range(0X112F88,"T",0X1,3);
	split_sreg_range(0X112FAA,"T",0X1,3);
	split_sreg_range(0X112FB6,"T",0X1,3);
	split_sreg_range(0X112FEC,"T",0X1,3);
	split_sreg_range(0X113068,"T",0X1,3);
	split_sreg_range(0X113094,"T",0X1,3);
	split_sreg_range(0X113098,"T",0X1,3);
	split_sreg_range(0X1130AE,"T",0X1,3);
	split_sreg_range(0X1130BA,"T",0X1,3);
	split_sreg_range(0X1130C4,"T",0X1,3);
	split_sreg_range(0X1130F8,"T",0X1,3);
	split_sreg_range(0X113100,"T",0X1,3);
	split_sreg_range(0X113104,"T",0X1,3);
	split_sreg_range(0X113126,"T",0X1,3);
	split_sreg_range(0X113132,"T",0X1,3);
	split_sreg_range(0X113134,"T",0X1,3);
	split_sreg_range(0X11313A,"T",0X1,3);
	split_sreg_range(0X11317E,"T",0X1,3);
	split_sreg_range(0X1131BC,"T",0X1,3);
	split_sreg_range(0X1131C8,"T",0X1,3);
	split_sreg_range(0X1131CC,"T",0X1,3);
	split_sreg_range(0X1131D0,"T",0X1,3);
	split_sreg_range(0X1131D8,"T",0X1,3);
	split_sreg_range(0X1131DC,"T",0X1,3);
	split_sreg_range(0X1131E4,"T",0X1,3);
	split_sreg_range(0X113218,"T",0X1,3);
	split_sreg_range(0X11326A,"T",0X1,3);
	split_sreg_range(0X113278,"T",0X1,3);
	split_sreg_range(0X11327E,"T",0X1,3);
	split_sreg_range(0X113282,"T",0X1,3);
	split_sreg_range(0X113290,"T",0X1,3);
	split_sreg_range(0X113296,"T",0X1,3);
	split_sreg_range(0X11329A,"T",0X1,3);
	split_sreg_range(0X1132D0,"T",0X1,3);
	split_sreg_range(0X113312,"T",0X1,3);
	split_sreg_range(0X11331E,"T",0X1,3);
	split_sreg_range(0X113320,"T",0X1,3);
	split_sreg_range(0X11332E,"T",0X1,3);
	split_sreg_range(0X113332,"T",0X1,3);
	split_sreg_range(0X11339C,"T",0X1,3);
	split_sreg_range(0X1133A2,"T",0X1,3);
	split_sreg_range(0X1133A6,"T",0X1,3);
	split_sreg_range(0X1133AA,"T",0X1,3);
	split_sreg_range(0X1133B8,"T",0X1,3);
	split_sreg_range(0X1133F8,"T",0X1,3);
	split_sreg_range(0X113452,"T",0X1,3);
	split_sreg_range(0X113468,"T",0X1,3);
	split_sreg_range(0X113472,"T",0X1,3);
	split_sreg_range(0X11347A,"T",0X1,3);
	split_sreg_range(0X11347E,"T",0X1,3);
	split_sreg_range(0X11349A,"T",0X1,3);
	split_sreg_range(0X1134BE,"T",0X1,3);
	split_sreg_range(0X1134CA,"T",0X1,3);
	split_sreg_range(0X1134D6,"T",0X1,3);
	split_sreg_range(0X1134DA,"T",0X1,3);
	split_sreg_range(0X1134FC,"T",0X1,3);
	split_sreg_range(0X11351E,"T",0X1,3);
	split_sreg_range(0X113522,"T",0X1,3);
	split_sreg_range(0X11352E,"T",0X1,3);
	split_sreg_range(0X11354C,"T",0X1,3);
	split_sreg_range(0X113578,"T",0X1,3);
	split_sreg_range(0X11357A,"T",0X1,3);
	split_sreg_range(0X11357C,"T",0X1,3);
	split_sreg_range(0X113582,"T",0X1,3);
	split_sreg_range(0X113602,"T",0X1,3);
	split_sreg_range(0X113604,"T",0X1,3);
	split_sreg_range(0X113732,"T",0X1,3);
	split_sreg_range(0X113734,"T",0X1,3);
	split_sreg_range(0X113744,"T",0X1,3);
	split_sreg_range(0X113746,"T",0X1,3);
	split_sreg_range(0X113748,"T",0X1,3);
	split_sreg_range(0X1137B4,"T",0X1,3);
	split_sreg_range(0X1137C6,"T",0X1,3);
	split_sreg_range(0X1137D6,"T",0X1,3);
	split_sreg_range(0X1137E6,"T",0X1,3);
	split_sreg_range(0X113802,"T",0X1,3);
	split_sreg_range(0X113824,"T",0X1,3);
	split_sreg_range(0X113832,"T",0X1,3);
	split_sreg_range(0X11383E,"T",0X1,3);
	split_sreg_range(0X11384A,"T",0X1,3);
	split_sreg_range(0X11386A,"T",0X1,3);
	split_sreg_range(0X113880,"T",0X1,3);
	split_sreg_range(0X1138AC,"T",0X1,3);
	split_sreg_range(0X1138C2,"T",0X1,3);
	split_sreg_range(0X1138D8,"T",0X1,3);
	split_sreg_range(0X1138DE,"T",0X1,3);
	split_sreg_range(0X11395C,"T",0X1,3);
	split_sreg_range(0X11396C,"T",0X1,3);
	split_sreg_range(0X113970,"T",0X1,3);
	split_sreg_range(0X113978,"T",0X1,3);
	split_sreg_range(0X11397A,"T",0X1,3);
	split_sreg_range(0X113980,"T",0X1,3);
	split_sreg_range(0X113996,"T",0X1,3);
	split_sreg_range(0X1139A6,"T",0X1,3);
	split_sreg_range(0X1139B8,"T",0X1,3);
	split_sreg_range(0X1139C8,"T",0X1,3);
	split_sreg_range(0X1139CA,"T",0X1,3);
	split_sreg_range(0X1139DA,"T",0X1,3);
	split_sreg_range(0X1139E2,"T",0X1,3);
	split_sreg_range(0X1139FA,"T",0X1,3);
	split_sreg_range(0X113A06,"T",0X1,3);
	split_sreg_range(0X113A12,"T",0X1,3);
	split_sreg_range(0X113A1C,"T",0X1,3);
	split_sreg_range(0X113A1E,"T",0X1,3);
	split_sreg_range(0X113A22,"T",0X1,3);
	split_sreg_range(0X113A3C,"T",0X1,3);
	split_sreg_range(0X113A4C,"T",0X1,3);
	split_sreg_range(0X113A4E,"T",0X1,3);
	split_sreg_range(0X113A52,"T",0X1,3);
	split_sreg_range(0X113A72,"T",0X1,3);
	split_sreg_range(0X113A78,"T",0X1,3);
	split_sreg_range(0X113A90,"T",0X1,3);
	split_sreg_range(0X113AC0,"T",0X1,3);
	split_sreg_range(0X113AC4,"T",0X1,3);
	split_sreg_range(0X113AF6,"T",0X1,3);
	split_sreg_range(0X113B88,"T",0X1,3);
	split_sreg_range(0X113BAA,"T",0X1,3);
	split_sreg_range(0X113BB4,"T",0X1,3);
	split_sreg_range(0X113BD6,"T",0X1,3);
	split_sreg_range(0X113BD8,"T",0X1,3);
	split_sreg_range(0X113BE0,"T",0X1,3);
	split_sreg_range(0X113BE6,"T",0X1,3);
	split_sreg_range(0X113C34,"T",0X1,3);
	split_sreg_range(0X113C64,"T",0X1,3);
	split_sreg_range(0X113C76,"T",0X1,3);
	split_sreg_range(0X113C94,"T",0X1,3);
	split_sreg_range(0X113CB0,"T",0X1,3);
	split_sreg_range(0X113CB4,"T",0X1,3);
	split_sreg_range(0X113CB8,"T",0X1,3);
	split_sreg_range(0X113CD2,"T",0X1,3);
	split_sreg_range(0X113D34,"T",0X1,3);
	split_sreg_range(0X113D48,"T",0X1,3);
	split_sreg_range(0X113D4A,"T",0X1,3);
	split_sreg_range(0X113D86,"T",0X1,3);
	split_sreg_range(0X113D8A,"T",0X1,3);
	split_sreg_range(0X113D8E,"T",0X1,3);
	split_sreg_range(0X113D92,"T",0X1,3);
	split_sreg_range(0X113DA0,"T",0X1,3);
	split_sreg_range(0X113DA4,"T",0X1,3);
	split_sreg_range(0X113DDE,"T",0X1,3);
	split_sreg_range(0X113DE4,"T",0X1,3);
	split_sreg_range(0X113DEA,"T",0X1,3);
	split_sreg_range(0X113DF4,"T",0X1,3);
	split_sreg_range(0X113E02,"T",0X1,3);
	split_sreg_range(0X113E06,"T",0X1,3);
	split_sreg_range(0X113E1A,"T",0X1,3);
	split_sreg_range(0X113E1E,"T",0X1,3);
	split_sreg_range(0X113E26,"T",0X1,3);
	split_sreg_range(0X113E46,"T",0X1,3);
	split_sreg_range(0X113E62,"T",0X1,3);
	split_sreg_range(0X113E64,"T",0X1,3);
	split_sreg_range(0X113E6A,"T",0X1,3);
	split_sreg_range(0X113E70,"T",0X1,3);
	split_sreg_range(0X113E82,"T",0X1,3);
	split_sreg_range(0X113E86,"T",0X1,3);
	split_sreg_range(0X113E96,"T",0X1,3);
	split_sreg_range(0X113EA8,"T",0X1,3);
	split_sreg_range(0X113EB0,"T",0X1,3);
	split_sreg_range(0X113EB2,"T",0X1,3);
	split_sreg_range(0X113EBA,"T",0X1,3);
	split_sreg_range(0X113EBE,"T",0X1,3);
	split_sreg_range(0X113EC6,"T",0X1,3);
	split_sreg_range(0X113EDE,"T",0X1,3);
	split_sreg_range(0X113EE6,"T",0X1,3);
	split_sreg_range(0X113F22,"T",0X1,3);
	split_sreg_range(0X113F32,"T",0X1,3);
	split_sreg_range(0X113F56,"T",0X1,3);
	split_sreg_range(0X113F5E,"T",0X1,3);
	split_sreg_range(0X113F6E,"T",0X1,3);
	split_sreg_range(0X113F74,"T",0X1,3);
	split_sreg_range(0X113F84,"T",0X1,3);
	split_sreg_range(0X113F96,"T",0X1,3);
	split_sreg_range(0X113FA4,"T",0X1,3);
	split_sreg_range(0X113FA6,"T",0X1,3);
	split_sreg_range(0X113FAA,"T",0X1,3);
	split_sreg_range(0X113FB0,"T",0X1,3);
	split_sreg_range(0X113FC8,"T",0X1,3);
	split_sreg_range(0X113FD0,"T",0X1,3);
	split_sreg_range(0X114020,"T",0X1,3);
	split_sreg_range(0X114042,"T",0X1,3);
	split_sreg_range(0X114050,"T",0X1,3);
	split_sreg_range(0X11409A,"T",0X1,3);
	split_sreg_range(0X1140A4,"T",0X1,3);
	split_sreg_range(0X1140C6,"T",0X1,3);
	split_sreg_range(0X114112,"T",0X1,3);
	split_sreg_range(0X114114,"T",0X1,3);
	split_sreg_range(0X114120,"T",0X1,3);
	split_sreg_range(0X114150,"T",0X1,3);
	split_sreg_range(0X1141F0,"T",0X1,3);
	split_sreg_range(0X114204,"T",0X1,3);
	split_sreg_range(0X114218,"T",0X1,3);
	split_sreg_range(0X114248,"T",0X1,3);
	split_sreg_range(0X114250,"T",0X1,3);
	split_sreg_range(0X1142A8,"T",0X1,3);
	split_sreg_range(0X1142DA,"T",0X1,3);
	split_sreg_range(0X1142E0,"T",0X1,3);
	split_sreg_range(0X114304,"T",0X1,3);
	split_sreg_range(0X114312,"T",0X1,3);
	split_sreg_range(0X11431C,"T",0X1,3);
	split_sreg_range(0X114326,"T",0X1,3);
	split_sreg_range(0X114338,"T",0X1,3);
	split_sreg_range(0X11433A,"T",0X1,3);
	split_sreg_range(0X114356,"T",0X1,3);
	split_sreg_range(0X11435C,"T",0X1,3);
	split_sreg_range(0X114362,"T",0X1,3);
	split_sreg_range(0X114390,"T",0X1,3);
	split_sreg_range(0X114396,"T",0X1,3);
	split_sreg_range(0X1143E0,"T",0X1,3);
	split_sreg_range(0X1143E6,"T",0X1,3);
	split_sreg_range(0X114406,"T",0X1,3);
	split_sreg_range(0X114450,"T",0X1,3);
	split_sreg_range(0X114458,"T",0X1,3);
	split_sreg_range(0X114490,"T",0X1,3);
	split_sreg_range(0X114496,"T",0X1,3);
	split_sreg_range(0X11450C,"T",0X1,3);
	split_sreg_range(0X11450E,"T",0X1,3);
	split_sreg_range(0X114512,"T",0X1,3);
	split_sreg_range(0X114524,"T",0X1,3);
	split_sreg_range(0X114544,"T",0X1,3);
	split_sreg_range(0X114546,"T",0X1,3);
	split_sreg_range(0X114554,"T",0X1,3);
	split_sreg_range(0X11457C,"T",0X1,3);
	split_sreg_range(0X114592,"T",0X1,3);
	split_sreg_range(0X1145B6,"T",0X1,3);
	split_sreg_range(0X1145C4,"T",0X1,3);
	split_sreg_range(0X1145D0,"T",0X1,3);
	split_sreg_range(0X1145E6,"T",0X1,3);
	split_sreg_range(0X1145F4,"T",0X1,3);
	split_sreg_range(0X1145FC,"T",0X1,3);
	split_sreg_range(0X114606,"T",0X1,3);
	split_sreg_range(0X114634,"T",0X1,3);
	split_sreg_range(0X114638,"T",0,3);
	split_sreg_range(0X114648,"T",0X1,3);
	split_sreg_range(0X11464C,"T",0,3);
	split_sreg_range(0X11465C,"T",0X1,3);
	split_sreg_range(0X114660,"T",0,3);
	split_sreg_range(0X114694,"T",0,3);
	split_sreg_range(0X1146B4,"T",0,3);
	split_sreg_range(0X1146D4,"T",0,3);
	split_sreg_range(0X1146F4,"T",0,3);
	split_sreg_range(0X114714,"T",0,3);
	split_sreg_range(0X114734,"T",0X1,3);
	split_sreg_range(0X114738,"T",0,3);
	split_sreg_range(0X114744,"T",0,3);
	split_sreg_range(0X11475C,"T",0,3);
	split_sreg_range(0X11479C,"T",0X1,3);
	split_sreg_range(0X1147A0,"T",0,3);
	split_sreg_range(0X1147A4,"T",0,3);
	split_sreg_range(0X1147B8,"T",0,3);
	split_sreg_range(0X1147F4,"T",0X1,3);
	split_sreg_range(0X1147F8,"T",0,3);
	split_sreg_range(0X114818,"T",0X1,3);
	split_sreg_range(0X11481C,"T",0,3);
	split_sreg_range(0X114868,"T",0,3);
	split_sreg_range(0X114898,"T",0,3);
	split_sreg_range(0X1148EC,"T",0,3);
	split_sreg_range(0X114928,"T",0,3);
	split_sreg_range(0X11492C,"T",0,3);
	split_sreg_range(0X1149A0,"T",0,3);
	split_sreg_range(0X1149A8,"T",0X1,3);
	split_sreg_range(0X1149AC,"T",0,3);
	split_sreg_range(0X1149C4,"T",0X1,3);
	split_sreg_range(0X1149C6,"T",0X1,3);
	split_sreg_range(0X1149C8,"T",0X1,3);
	split_sreg_range(0X1149CA,"T",0X1,3);
	split_sreg_range(0X1149D4,"T",0,3);
	split_sreg_range(0X114A18,"T",0X1,3);
	split_sreg_range(0X114A20,"T",0,3);
	split_sreg_range(0X114A38,"T",0,3);
	split_sreg_range(0X114A3C,"T",0,3);
	split_sreg_range(0X114A44,"T",0,3);
	split_sreg_range(0X114A6C,"T",0,3);
	split_sreg_range(0X114A80,"T",0,3);
	split_sreg_range(0X114A94,"T",0X1,3);
	split_sreg_range(0X114AAC,"T",0,3);
	split_sreg_range(0X114B5C,"T",0,3);
	split_sreg_range(0X114B64,"T",0X1,3);
	split_sreg_range(0X114C20,"T",0X1,3);
	split_sreg_range(0X114C3C,"T",0,3);
	split_sreg_range(0X114C48,"T",0,3);
	split_sreg_range(0X114C58,"T",0,3);
	split_sreg_range(0X114CB8,"T",0,3);
	split_sreg_range(0X114CC8,"T",0X1,3);
	split_sreg_range(0X114CCC,"T",0,3);
	split_sreg_range(0X114CDC,"T",0,3);
	split_sreg_range(0X114CE4,"T",0X1,3);
	split_sreg_range(0X114CF8,"T",0X1,3);
	split_sreg_range(0X114D00,"T",0,3);
	split_sreg_range(0X114D0C,"T",0,3);
	split_sreg_range(0X114D1C,"T",0X1,3);
	split_sreg_range(0X114D20,"T",0,3);
	split_sreg_range(0X114D3C,"T",0,3);
	split_sreg_range(0X114D48,"T",0,3);
	split_sreg_range(0X114D54,"T",0X1,3);
	split_sreg_range(0X114D58,"T",0,3);
	split_sreg_range(0X114D5C,"T",0,3);
	split_sreg_range(0X114D68,"T",0X1,3);
	split_sreg_range(0X114D6C,"T",0,3);
	split_sreg_range(0X114D70,"T",0X1,3);
	split_sreg_range(0X114D74,"T",0,3);
	split_sreg_range(0X114D80,"T",0,3);
	split_sreg_range(0X114D8C,"T",0,3);
	split_sreg_range(0X114DA4,"T",0,3);
	split_sreg_range(0X114DAC,"T",0,3);
	split_sreg_range(0X114DC0,"T",0,3);
	split_sreg_range(0X114DD8,"T",0,3);
	split_sreg_range(0X114DE0,"T",0,3);
	split_sreg_range(0X114E1C,"T",0X1,3);
	split_sreg_range(0X114E20,"T",0,3);
	split_sreg_range(0X40000000,"T",0,3);
	split_sreg_range(0X40010000,"T",0,3);
	split_sreg_range(0X40020000,"T",0,3);
	split_sreg_range(0X40030000,"T",0,3);
	split_sreg_range(0X60005000,"T",0,3);
	split_sreg_range(0X60006000,"T",0,3);
	split_sreg_range(0X60007000,"T",0,3);
	split_sreg_range(0X6000C000,"T",0,3);
	split_sreg_range(0X6000D500,"T",0,3);
	split_sreg_range(0X6000F000,"T",0,3);
	split_sreg_range(0X6001DC00,"T",0,3);
	split_sreg_range(0X70000000,"T",0,3);
	split_sreg_range(0X70000800,"T",0,3);
	split_sreg_range(0X70003000,"T",0,3);
	split_sreg_range(0X70006000,"T",0,3);
	split_sreg_range(0X70006040,"T",0,3);
	split_sreg_range(0X70006200,"T",0,3);
	split_sreg_range(0X70006300,"T",0,3);
	split_sreg_range(0X70006400,"T",0,3);
	split_sreg_range(0X7000C000,"T",0,3);
	split_sreg_range(0X7000C400,"T",0,3);
	split_sreg_range(0X7000C500,"T",0,3);
	split_sreg_range(0X7000C700,"T",0,3);
	split_sreg_range(0X7000D000,"T",0,3);
	split_sreg_range(0X7000D100,"T",0,3);
	split_sreg_range(0X7000E400,"T",0,3);
	split_sreg_range(0X7000F800,"T",0,3);
	split_sreg_range(0X7000FC00,"T",0,3);
	split_sreg_range(0X70012000,"T",0,3);
	split_sreg_range(0X70019000,"T",0,3);
	split_sreg_range(0X7001B000,"T",0,3);
	split_sreg_range(0X70020000,"T",0,3);
	split_sreg_range(0X70090000,"T",0,3);
	split_sreg_range(0X7009F000,"T",0,3);
	split_sreg_range(0X700B0000,"T",0,3);
	split_sreg_range(0X700B0200,"T",0,3);
	split_sreg_range(0X700B0400,"T",0,3);
	split_sreg_range(0X700B0600,"T",0,3);
	split_sreg_range(0X700B1000,"T",0,3);
	split_sreg_range(0X700B2200,"T",0,3);
	split_sreg_range(0X700B3400,"T",0,3);
	split_sreg_range(0X700B4600,"T",0,3);
	split_sreg_range(0X700D0000,"T",0,3);
	split_sreg_range(0X700F0000,"T",0,3);
	split_sreg_range(0X70410000,"T",0,3);
	split_sreg_range(0X7D000000,"T",0,3);
	split_sreg_range(0X100000,"DS",0,3);
	split_sreg_range(0X40000000,"DS",0X1,3);
	split_sreg_range(0X40010000,"DS",0X1,3);
	split_sreg_range(0X40020000,"DS",0X1,3);
	split_sreg_range(0X40030000,"DS",0X1,3);
	split_sreg_range(0X60005000,"DS",0X1,3);
	split_sreg_range(0X60006000,"DS",0X1,3);
	split_sreg_range(0X60007000,"DS",0X1,3);
	split_sreg_range(0X6000C000,"DS",0X1,3);
	split_sreg_range(0X6000D500,"DS",0X1,3);
	split_sreg_range(0X6000F000,"DS",0X1,3);
	split_sreg_range(0X6001DC00,"DS",0X1,3);
	split_sreg_range(0X70000000,"DS",0X1,3);
	split_sreg_range(0X70000800,"DS",0X1,3);
	split_sreg_range(0X70003000,"DS",0X1,3);
	split_sreg_range(0X70006000,"DS",0X1,3);
	split_sreg_range(0X70006040,"DS",0X1,3);
	split_sreg_range(0X70006200,"DS",0X1,3);
	split_sreg_range(0X70006300,"DS",0X1,3);
	split_sreg_range(0X70006400,"DS",0X1,3);
	split_sreg_range(0X7000C000,"DS",0X1,3);
	split_sreg_range(0X7000C400,"DS",0X1,3);
	split_sreg_range(0X7000C500,"DS",0X1,3);
	split_sreg_range(0X7000C700,"DS",0X1,3);
	split_sreg_range(0X7000D000,"DS",0X1,3);
	split_sreg_range(0X7000D100,"DS",0X1,3);
	split_sreg_range(0X7000E400,"DS",0X1,3);
	split_sreg_range(0X7000F800,"DS",0X1,3);
	split_sreg_range(0X7000FC00,"DS",0X1,3);
	split_sreg_range(0X70012000,"DS",0X1,3);
	split_sreg_range(0X70019000,"DS",0X1,3);
	split_sreg_range(0X7001B000,"DS",0X1,3);
	split_sreg_range(0X70020000,"DS",0X1,3);
	split_sreg_range(0X70090000,"DS",0X1,3);
	split_sreg_range(0X7009F000,"DS",0X1,3);
	split_sreg_range(0X700B0000,"DS",0X1,3);
	split_sreg_range(0X700B0200,"DS",0X1,3);
	split_sreg_range(0X700B0400,"DS",0X1,3);
	split_sreg_range(0X700B0600,"DS",0X1,3);
	split_sreg_range(0X700B1000,"DS",0X1,3);
	split_sreg_range(0X700B2200,"DS",0X1,3);
	split_sreg_range(0X700B3400,"DS",0X1,3);
	split_sreg_range(0X700B4600,"DS",0X1,3);
	split_sreg_range(0X700D0000,"DS",0X1,3);
	split_sreg_range(0X700F0000,"DS",0X1,3);
	split_sreg_range(0X70410000,"DS",0X1,3);
	split_sreg_range(0X7D000000,"DS",0X1,3);
}

//------------------------------------------------------------------------
// Information about all patched bytes:

static Patches(void) {
}

//------------------------------------------------------------------------
// Call all byte feature functions:

static Bytes(void) {
	Bytes_0();
	Bytes_1();
	Bytes_2();
	Bytes_3();
        end_type_updating(UTP_STRUCT);
}

// End of file.
